{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\components\\\\Common\\\\AccountMovementsHistory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport Select from \"react-select\";\nimport { useLocation, useHistory } from 'react-router-dom';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { Row, Col, Card, CardBody, Button, Label, Table, Pagination, PaginationItem, PaginationLink, CardFooter } from \"reactstrap\";\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\nimport { Link } from \"react-router-dom\";\nimport { CoreServices, BackendServices } from '../../services';\nimport Currency from '../../helpers/currency';\nimport { uniq_key } from '../../helpers/unq_key';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\n\nconst AccountMovementsHistory = props => {\n  _s();\n\n  const currencyData = new Currency();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [dataRows, setDataRows] = useState([]);\n  const [isActiveLoading, setIsActiveLoading] = useState(false);\n  const [apiServiceBackend, setapiServiceBackend] = useState(new BackendServices());\n  const [apiCoreServices, setCoreServices] = useState(new CoreServices());\n  const [dataMovimientos, setdataMovimientos] = useState(null); //On Mounting (componentDidMount)\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  function fetchData() {\n    loadData();\n  }\n\n  function groupBy(collection, property) {\n    var i = 0,\n        val,\n        index,\n        values = [],\n        result = [];\n\n    for (; i < collection.length; i++) {\n      val = collection[i][property];\n      index = values.indexOf(val);\n      if (index > -1) result[index].push(collection[i]);else {\n        values.push(val);\n        result.push([collection[i]]);\n      }\n    }\n\n    return result;\n  } //cargar lista de facilidades\n\n\n  async function loadData(core = false) {\n    var _props$transactionId;\n\n    if (props === null || props === void 0 ? void 0 : props.validacion) {\n      setIsActiveLoading(false);\n      return;\n    }\n\n    setIsActiveLoading(true);\n    await apiServiceBackend.consultMovementsBank((_props$transactionId = props === null || props === void 0 ? void 0 : props.transactionId) !== null && _props$transactionId !== void 0 ? _props$transactionId : 0).then(resp => {\n      setIsActiveLoading(false);\n\n      if (resp !== undefined && resp !== null && resp.bankBanesco.length > 0) {\n        setIsActiveLoading(false); //toca dibujar la tabla\n\n        if (resp.bankBanesco.length > 0) {\n          resp = resp.bankBanesco; // console.log(\"ssdadasda\",groupBy(resp,\"accountNumber\"));\n          // let newJson=groupBy(resp,\"accountNumber\");\n\n          setdataMovimientos(resp.map((data, index, arr) => {\n            var _resp, _arr, _data$averageBalance, _data$deposits, _arr2, _movementsYear$reduce, _movementsYear$reduce2, _movementsYear$reduce3, _movementsYear$reduce4;\n\n            let movementsYear = (_resp = resp) === null || _resp === void 0 ? void 0 : _resp.filter(movement => movement.year === data.year && movement.status && movement.accountNumber === data.accountNumber);\n            return data.status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: ((_arr = arr[index - 1]) === null || _arr === void 0 ? void 0 : _arr.accountNumber) != data.accountNumber && data.accountNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.year\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.month\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", currencyData.formatTable((_data$averageBalance = data.averageBalance) !== null && _data$averageBalance !== void 0 ? _data$averageBalance : 0)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", currencyData.formatTable((_data$deposits = data.deposits) !== null && _data$deposits !== void 0 ? _data$deposits : 0)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 21\n                }, this)]\n              }, uniq_key() + \"1\", true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this), data.year !== ((_arr2 = arr[index + 1]) === null || _arr2 === void 0 ? void 0 : _arr2.year) && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: t(\"Total\")\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 96,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [\"$\", currencyData.formatTable((_movementsYear$reduce = movementsYear === null || movementsYear === void 0 ? void 0 : movementsYear.reduce((acu, crr) => acu + crr.averageBalance, 0).toFixed(2)) !== null && _movementsYear$reduce !== void 0 ? _movementsYear$reduce : 0)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [\"$\", currencyData.formatTable((_movementsYear$reduce2 = movementsYear === null || movementsYear === void 0 ? void 0 : movementsYear.reduce((acu, crr) => acu + crr.deposits, 0).toFixed(2)) !== null && _movementsYear$reduce2 !== void 0 ? _movementsYear$reduce2 : 0)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 25\n                  }, this)]\n                }, uniq_key() + \"2\", true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: t(\"Average\")\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [\"$\", currencyData.formatTable((_movementsYear$reduce3 = movementsYear === null || movementsYear === void 0 ? void 0 : movementsYear.reduce((acu, crr) => acu + crr.averageBalance / movementsYear.length, 0).toFixed(2)) !== null && _movementsYear$reduce3 !== void 0 ? _movementsYear$reduce3 : 0)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [\"$\", currencyData.formatTable((_movementsYear$reduce4 = movementsYear === null || movementsYear === void 0 ? void 0 : movementsYear.reduce((acu, crr) => acu + crr.deposits / movementsYear.length, 0).toFixed(2)) !== null && _movementsYear$reduce4 !== void 0 ? _movementsYear$reduce4 : 0)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 25\n                  }, this)]\n                }, uniq_key() + \"3\", true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true) : null;\n          }));\n        } else {\n          setdataMovimientos( /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"6\",\n              style: {\n                textAlign: 'center'\n              },\n              children: t(\"NoData\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)\n          }, uniq_key() + \"2\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this));\n        }\n      } else {\n        if (core) {\n          setIsActiveLoading(false);\n          return;\n        } //guardamos los datos de t24\n\n        /*apiCoreServices.getAccountMovementsByTransaction(props?.transactionId ?? 0)\r\n          .then(async (data) => {\r\n            console.log(\"getAccountMovements\", data);\r\n            if (data !== null && data !== undefined) {\r\n              for (let i = 0; i < data.length; i++) {\r\n                //aqui cargamos por cuentas\r\n                let cuenta = data[i].AcctId;\r\n                for (let j = 0; j < data[i].dataByYear.length; j++) {\r\n                  console.log(\"data[i].dataByYear\", data[i].dataByYear);\r\n                  for (let k = 0; k < data[i].dataByYear[j].dataresult.length; k++) {\r\n                    let jsonSet = {\r\n                      \"trasactId\": Number(props?.transactionId),\r\n                      \"year\": data[i].dataByYear[j].dataresult[k].year,\r\n                      \"month\": data[i].dataByYear[j].dataresult[k].month,\r\n                      \"deposits\": data[i].dataByYear[j].dataresult[k].deposits,\r\n                      \"averageBalance\": data[i].dataByYear[j].dataresult[k].amount,\r\n                      \"observations\": \"\",\r\n                      \"accountNumber\": cuenta,\r\n                      \"t24\": true\r\n                    }\r\n                    await apiServiceBackend.newMovementsAccountsIGR(jsonSet).then(resp => {\r\n                      })\r\n                    }\r\n                  }\r\n                }\r\n              setIsActiveLoading(false)\r\n              loadData(true)\r\n            } else {\r\n              setIsActiveLoading(false)\r\n            }\r\n          }).catch((error) => {\r\n            setIsActiveLoading(false)\r\n          });*/\n\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n    active: isActiveLoading,\n    spinner: true,\n    text: t(\"WaitingPlease\"),\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-sub-title\",\n            children: t(\"AccountMovementsHistory\") + \" - Banesco\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: \"12\",\n            className: \"table-responsive styled-table-div\",\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              className: \"table table-striped table-hover styled-table table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: t(\"Account\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: t(\"Year\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: t(\"Month\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: t(\"AverageAmount\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: t(\"Deposits\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: dataMovimientos\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccountMovementsHistory, \"hOBh6RtKyynYB6dmdNTW6Lb2034=\", false, function () {\n  return [useTranslation];\n});\n\n_c = AccountMovementsHistory;\nAccountMovementsHistory.propTypes = {\n  customerNumberT24: PropTypes.string\n}; //export default (withTranslation()(DatosGenerales));\n\nexport default AccountMovementsHistory;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountMovementsHistory\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/components/Common/AccountMovementsHistory.js"],"names":["React","useState","PropTypes","useTranslation","Select","useLocation","useHistory","LoadingOverlay","Row","Col","Card","CardBody","Button","Label","Table","Pagination","PaginationItem","PaginationLink","CardFooter","AvForm","AvField","Link","CoreServices","BackendServices","Currency","uniq_key","AccountMovementsHistory","props","currencyData","t","i18n","dataRows","setDataRows","isActiveLoading","setIsActiveLoading","apiServiceBackend","setapiServiceBackend","apiCoreServices","setCoreServices","dataMovimientos","setdataMovimientos","useEffect","fetchData","loadData","groupBy","collection","property","i","val","index","values","result","length","indexOf","push","core","validacion","consultMovementsBank","transactionId","then","resp","undefined","bankBanesco","map","data","arr","movementsYear","filter","movement","year","status","accountNumber","month","formatTable","averageBalance","deposits","reduce","acu","crr","toFixed","textAlign","propTypes","customerNumberT24","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next'\r\nimport Select from \"react-select\";\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Label,\r\n  Table,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  CardFooter,\r\n} from \"reactstrap\"\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport { CoreServices, BackendServices } from '../../services';\r\nimport Currency from '../../helpers/currency'; import { uniq_key } from '../../helpers/unq_key';\r\n;\r\n\r\nconst AccountMovementsHistory = (props) => {\r\n  const currencyData = new Currency();\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const [dataRows, setDataRows] = useState([]);\r\n  const [isActiveLoading, setIsActiveLoading] = useState(false);\r\n\r\n  const [apiServiceBackend, setapiServiceBackend] = useState(new BackendServices());\r\n  const [apiCoreServices, setCoreServices] = useState(new CoreServices());\r\n\r\n  const [dataMovimientos, setdataMovimientos] = useState(null);\r\n  //On Mounting (componentDidMount)\r\n  React.useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  function fetchData() {\r\n    loadData();\r\n  }\r\n  function groupBy(collection, property) {\r\n    var i = 0, val, index,\r\n      values = [], result = [];\r\n    for (; i < collection.length; i++) {\r\n      val = collection[i][property];\r\n      index = values.indexOf(val);\r\n      if (index > -1)\r\n        result[index].push(collection[i]);\r\n      else {\r\n        values.push(val);\r\n        result.push([collection[i]]);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  //cargar lista de facilidades\r\n  async function loadData(core = false) {\r\n    if(props?.validacion){\r\n      setIsActiveLoading(false)\r\n      return\r\n    }\r\n    setIsActiveLoading(true)\r\n    await apiServiceBackend.consultMovementsBank(props?.transactionId ?? 0).then(resp => {      \r\n      setIsActiveLoading(false)\r\n      if (resp!==undefined && resp!==null && resp.bankBanesco.length > 0) {\r\n        setIsActiveLoading(false)\r\n        //toca dibujar la tabla\r\n        if (resp.bankBanesco.length > 0) {\r\n          resp = resp.bankBanesco;\r\n          // console.log(\"ssdadasda\",groupBy(resp,\"accountNumber\"));\r\n          // let newJson=groupBy(resp,\"accountNumber\");\r\n          setdataMovimientos(resp.map((data, index, arr) => {\r\n            let movementsYear = resp?.filter(movement => movement.year === data.year && movement.status && movement.accountNumber === data.accountNumber);\r\n            return (\r\n              data.status ?\r\n                <>\r\n                  <tr key={uniq_key() + \"1\"}>\r\n                    <th>{arr[index - 1]?.accountNumber != data.accountNumber && data.accountNumber}</th>\r\n                    <td>{data.year}</td>\r\n                    <td>{data.month}</td>\r\n                    <td>${currencyData.formatTable(data.averageBalance ?? 0)}</td>\r\n                    <td>${currencyData.formatTable(data.deposits ?? 0)}</td>\r\n\r\n                  </tr>\r\n                  {data.year !== arr[index + 1]?.year && (\r\n                    <>\r\n                      <tr key={uniq_key() + \"2\"}>\r\n                        <td></td>\r\n                        <th><b>{t(\"Total\")}</b></th>\r\n                        <td></td>\r\n                        <th>${currencyData.formatTable(movementsYear?.reduce((acu, crr) => acu + crr.averageBalance, 0).toFixed(2) ?? 0)}</th>\r\n                        <th>${currencyData.formatTable(movementsYear?.reduce((acu, crr) => acu + crr.deposits, 0).toFixed(2) ?? 0)}</th>\r\n                        <td></td>\r\n                      </tr>\r\n                      <tr key={uniq_key() + \"3\"}>\r\n                        <td></td>\r\n                        <th><b>{t(\"Average\")}</b></th>\r\n                        <td></td>\r\n                        <th>${currencyData.formatTable(movementsYear?.reduce((acu, crr) => acu + crr.averageBalance / movementsYear.length, 0).toFixed(2) ?? 0)}</th>\r\n                        <th>${currencyData.formatTable(movementsYear?.reduce((acu, crr) => acu + crr.deposits / movementsYear.length, 0).toFixed(2) ?? 0)}</th>\r\n                        <td></td>\r\n                      </tr>\r\n                    </>\r\n                  )}\r\n                </>\r\n                : null)\r\n          }\r\n          ));\r\n        } else {\r\n          setdataMovimientos(\r\n            <tr key={uniq_key() + \"2\"}>\r\n              <td colSpan=\"6\" style={{ textAlign: 'center' }}>{t(\"NoData\")}</td>\r\n            </tr>);\r\n        }\r\n      } else {\r\n        if (core) {\r\n          setIsActiveLoading(false)\r\n          return;\r\n        }\r\n        \r\n        //guardamos los datos de t24\r\n        /*apiCoreServices.getAccountMovementsByTransaction(props?.transactionId ?? 0)\r\n          .then(async (data) => {\r\n            console.log(\"getAccountMovements\", data);\r\n            if (data !== null && data !== undefined) {\r\n              for (let i = 0; i < data.length; i++) {\r\n                //aqui cargamos por cuentas\r\n                let cuenta = data[i].AcctId;\r\n                for (let j = 0; j < data[i].dataByYear.length; j++) {\r\n                  console.log(\"data[i].dataByYear\", data[i].dataByYear);\r\n                  for (let k = 0; k < data[i].dataByYear[j].dataresult.length; k++) {\r\n                    let jsonSet = {\r\n                      \"trasactId\": Number(props?.transactionId),\r\n                      \"year\": data[i].dataByYear[j].dataresult[k].year,\r\n                      \"month\": data[i].dataByYear[j].dataresult[k].month,\r\n                      \"deposits\": data[i].dataByYear[j].dataresult[k].deposits,\r\n                      \"averageBalance\": data[i].dataByYear[j].dataresult[k].amount,\r\n                      \"observations\": \"\",\r\n                      \"accountNumber\": cuenta,\r\n                      \"t24\": true\r\n                    }\r\n                    await apiServiceBackend.newMovementsAccountsIGR(jsonSet).then(resp => {\r\n\r\n                    })\r\n\r\n                  }\r\n\r\n                }\r\n\r\n              }\r\n              setIsActiveLoading(false)\r\n              loadData(true)\r\n            } else {\r\n              setIsActiveLoading(false)\r\n            }\r\n          }).catch((error) => {\r\n            setIsActiveLoading(false)\r\n          });*/\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  return (\r\n\r\n    <LoadingOverlay active={isActiveLoading} spinner text={t(\"WaitingPlease\")}>\r\n\r\n      <Card>\r\n\r\n        <Row>\r\n          <Col md=\"6\">\r\n            <h5 className=\"card-sub-title\">{t(\"AccountMovementsHistory\") + \" - Banesco\"}</h5>\r\n          </Col>\r\n        </Row>\r\n\r\n        <CardBody>\r\n\r\n          <Row>\r\n            <Col md=\"12\" className=\"table-responsive styled-table-div\">\r\n              <Table className=\"table table-striped table-hover styled-table table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>{t(\"Account\")}</th>\r\n                    <th>{t(\"Year\")}</th>\r\n                    <th>{t(\"Month\")}</th>\r\n                    <th>{t(\"AverageAmount\")}</th>\r\n                    <th>{t(\"Deposits\")}</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {/* {dataRows.length > 0 ? dataRows : null} */}\r\n                  {dataMovimientos}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n\r\n    </LoadingOverlay>\r\n\r\n  )\r\n}\r\n\r\nAccountMovementsHistory.propTypes = {\r\n  customerNumberT24: PropTypes.string\r\n}\r\n\r\n//export default (withTranslation()(DatosGenerales));\r\nexport default AccountMovementsHistory;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}