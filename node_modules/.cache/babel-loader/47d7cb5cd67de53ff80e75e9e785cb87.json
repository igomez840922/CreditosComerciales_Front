{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\Dashboard\\\\ModalTransferProcess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { useTranslation } from \"react-i18next\";\nimport { Row, Col, Card, CardBody, CardFooter, Button, Label, Table, Modal } from \"reactstrap\";\nimport { AvForm, AvField, AvGroup, AvInput, AvCheckbox } from \"availity-reactstrap-validation\";\nimport Select from \"react-select\";\nimport { BackendServices, CoreServices, BpmServices } from \"../../services\";\nimport * as opt from \"../../helpers/options_helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalTransferProcess = props => {\n  _s();\n\n  const {\n    t,\n    i18n\n  } = useTranslation(); //Servicios\n\n  const [backendServices, setbackendServices] = useState(new BackendServices());\n  const [coreServices, setcoreServices] = useState(new CoreServices());\n  const [bpmServices, setbpmServices] = useState(new BpmServices());\n  React.useEffect(() => {\n    loadUserGroups();\n  }, []); //cargar lista de tipo de personas\n\n  function loadUserGroups() {\n    backendServices.getUsersByGroup(opt.AnalistaCredito).then(data => {\n      if (data !== null && data.result !== undefined) {\n        let json = [];\n\n        for (let i = 0; i < data.result.length; i++) {\n          json.push({\n            label: data.result[i][\"userName\"],\n            value: data.result[i][\"userName\"]\n          });\n        }\n\n        setpersonTypeList(json); //setpersonTypeSelected(selectClient !== undefined ? json.find(x => x.value === Number(selectClient.personType)) : json[0]);\n      }\n    }).catch(error => {});\n  } //Guardar el Cliente\n\n\n  async function handleSubmitFormClient(event, errors, values) {\n    event.preventDefault();\n\n    if (errors.length > 0) {\n      return;\n    }\n\n    var result = await bpmServices.ChangeTaskUser(values.transferTo, props.data.taskId);\n\n    if (result) {\n      props.updateData();\n    }\n\n    props.toggle();\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"xl\",\n      isOpen: props.isOpen,\n      toggle: props.toggle,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title mt-0\",\n          children: t(\"Transferir Tr√°mite\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: props.toggle,\n          className: \"close\",\n          \"data-dismiss\": \"modal\",\n          \"aria-label\": \"Close\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-hidden\": \"true\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-title-desc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(AvForm, {\n          id: \"frmClient\",\n          className: \"needs-validation\",\n          onSubmit: handleSubmitFormClient,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardBody, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  md: \"6\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mb-3\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"transferto\",\n                      children: t(\"Seleccionar Usuario\")\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 108,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                      className: \"form-control\",\n                      name: \"transferTo\",\n                      type: \"text\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 109,\n                      columnNumber: 19\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n              style: {\n                textAlign: \"right\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                color: \"danger\",\n                style: {\n                  margin: '5px 0px'\n                },\n                type: \"button\",\n                onClick: props.toggle,\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"mdi mdi mdi-cancel mid-12px\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 15\n                }, this), \" \", t(\"Cancel\")]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"success\",\n                type: \"submit\",\n                style: {\n                  margin: '5px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"mdi mdi-content-save mdi-12px\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 77\n                }, this), \" \", t(\"Save\")]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }, this)]\n      }, \"TransferForm\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)\n  }, \"mcf1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalTransferProcess, \"Vj7dWb9F7074QYrFtc6NQr870QM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ModalTransferProcess;\nModalTransferProcess.propTypes = {\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  onCancel: PropTypes.func,\n  data: PropTypes.any,\n  updateData: PropTypes.func\n};\nexport default ModalTransferProcess;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalTransferProcess\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/Dashboard/ModalTransferProcess.js"],"names":["React","useState","PropTypes","useTranslation","Row","Col","Card","CardBody","CardFooter","Button","Label","Table","Modal","AvForm","AvField","AvGroup","AvInput","AvCheckbox","Select","BackendServices","CoreServices","BpmServices","opt","ModalTransferProcess","props","t","i18n","backendServices","setbackendServices","coreServices","setcoreServices","bpmServices","setbpmServices","useEffect","loadUserGroups","getUsersByGroup","AnalistaCredito","then","data","result","undefined","json","i","length","push","label","value","setpersonTypeList","catch","error","handleSubmitFormClient","event","errors","values","preventDefault","ChangeTaskUser","transferTo","taskId","updateData","toggle","isOpen","textAlign","margin","propTypes","bool","func","onCancel","any"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    Button,\r\n    Label,\r\n    Table,\r\n  Modal,\r\n} from \"reactstrap\"\r\n\r\nimport { AvForm, AvField, AvGroup, AvInput, AvCheckbox } from \"availity-reactstrap-validation\";\r\nimport Select from \"react-select\";\r\nimport { BackendServices, CoreServices, BpmServices } from \"../../services\";\r\nimport * as opt from \"../../helpers/options_helper\"\r\n\r\nconst ModalTransferProcess = props => {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  //Servicios\r\n  const [backendServices, setbackendServices] = useState(new BackendServices());\r\n  const [coreServices, setcoreServices] = useState(new CoreServices());\r\n  const [bpmServices, setbpmServices] = useState(new BpmServices());\r\n    \r\n  React.useEffect(() => {\r\n    loadUserGroups();\r\n  }, []);\r\n  \r\n\r\n  //cargar lista de tipo de personas\r\n  function loadUserGroups() {\r\n    backendServices.getUsersByGroup(opt.AnalistaCredito)\r\n      .then((data) => {\r\n        if (data !== null && data.result !== undefined) {\r\n          let json = [];\r\n          for (let i = 0; i < data.result.length; i++) {\r\n            json.push({ label: data.result[i][\"userName\"], value: data.result[i][\"userName\"] })\r\n          }\r\n          setpersonTypeList(json);\r\n          //setpersonTypeSelected(selectClient !== undefined ? json.find(x => x.value === Number(selectClient.personType)) : json[0]);\r\n        }\r\n      }).catch((error) => { });\r\n  }\r\n\r\n  //Guardar el Cliente\r\n  async function handleSubmitFormClient(event, errors, values) {    \r\n    event.preventDefault();\r\n    if (errors.length > 0) {\r\n      return;\r\n    }\r\n    \r\n    var result = await bpmServices.ChangeTaskUser(values.transferTo,props.data.taskId);\r\n    if(result){\r\n      props.updateData();\r\n    }\r\n\r\n    props.toggle();\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment key=\"mcf1\">\r\n    <Modal\r\n      size=\"xl\"\r\n      isOpen={props.isOpen}\r\n      toggle={props.toggle}\r\n      centered={true}>\r\n      <div className=\"modal-header\">\r\n        <h5 className=\"modal-title mt-0\">{t(\"Transferir Tr√°mite\")}</h5>\r\n        <button\r\n          type=\"button\"\r\n          onClick={props.toggle}\r\n          className=\"close\"\r\n          data-dismiss=\"modal\"\r\n          aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div key=\"TransferForm\" className=\"modal-body\">\r\n\r\n      <p className=\"card-title-desc\"></p>\r\n      <AvForm id=\"frmClient\" className=\"needs-validation\" onSubmit={handleSubmitFormClient}>\r\n        <Card>\r\n          {/*<h5 className=\"card-sub-title\">{t(\"Seleccionar Usuario\")}</h5>*/}\r\n          <CardBody>\r\n            <Row>\r\n             {/*\r\n             <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"personType\">{t(\"PersonType\")}</Label>\r\n                  <Select noOptionsMessage={() => \"\"}\r\n                    onChange={(e) => { setpersonTypeSelected(personTypeList.find(x => x.value === e.value)); handleChangeInputFormClient({ target: { name: 'personType', value: e.value } }) }}\r\n                    options={personTypeList}\r\n                    classNamePrefix=\"select2-selection\"\r\n                    value={personTypeSelected}\r\n                    name=\"personType\"\r\n                  />\r\n                </div>\r\n              </Col>\r\n              */} \r\n              <Col md=\"6\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"transferto\">{t(\"Seleccionar Usuario\")}</Label>\r\n                  <AvField className=\"form-control\"\r\n                    name=\"transferTo\" type=\"text\" />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n           \r\n          </CardBody>\r\n          <CardFooter style={{ textAlign: \"right\" }}>\r\n            <Button color=\"danger\" style={{ margin: '5px 0px' }} type=\"button\" onClick={props.toggle}>\r\n              <i className=\"mdi mdi mdi-cancel mid-12px\"></i>{\" \"}{t(\"Cancel\")}\r\n            </Button>\r\n            <Button color=\"success\" type=\"submit\" style={{ margin: '5px' }}><i className=\"mdi mdi-content-save mdi-12px\"></i>\r\n              {\" \"}{t(\"Save\")}\r\n            </Button>\r\n          </CardFooter>\r\n        </Card>\r\n      </AvForm>\r\n      \r\n      </div>\r\n    </Modal>\r\n</React.Fragment>\r\n  );\r\n};\r\n\r\nModalTransferProcess.propTypes = {\r\n  isOpen: PropTypes.bool,\r\n  toggle: PropTypes.func,\r\n  onCancel:PropTypes.func,\r\n  data:PropTypes.any,\r\n  updateData: PropTypes.func,\r\n}\r\n\r\nexport default ModalTransferProcess;\r\n"]},"metadata":{},"sourceType":"module"}