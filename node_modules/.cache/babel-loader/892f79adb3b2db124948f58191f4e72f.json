{"ast":null,"code":"import { BackendServices, CoreServices } from \"../services\";\nconst backendServices = new BackendServices();\nconst coreServices = new CoreServices();\nexport default class AutoSaveData {\n  //salvamos deudas de un tramite\n  async saveInitialData(transactionId) {\n    this.saveDebts(transactionId);\n    this.saveAccountMovements(transactionId);\n    this.saveCorporateExhibition(transactionId);\n    this.saveCorporateExhibitionByClients(transactionId);\n    this.saveFacilities(transactionId);\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibition(transactionId) {\n    try {\n      /*var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\n      //Borrar de BD todas las Exposicion Corporativa con \"t24\"= true\n      await backendServices.eliminarExposicionCorporativaBD(transactionId);\n      var dataResult = await coreServices.getCorporateExhibition(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        let datoSent = {\n          \"transactId\": Number(transactionId),\n          //\"accountNumber\": data.name,\n          //\"t24ClientId\": data.customerNumberT24,\n          \"description\": dataResult[i].name,\n          \"approved\": dataResult[i].approved,\n          \"currentBalance\": dataResult[i].balance,\n          \"proposed\": dataResult[i].proposal,\n          \"ltv\": 0,\n          t24: true,\n          \"difference\": dataResult[i].variation,\n          \"guarantee\": 0\n        };\n        await backendServices.saveExposicionCorporativaBD(datoSent);\n      }\n    } catch (err) {}\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibitionByClients(transactionId) {\n    try {\n      /*var dataResult = await backendServices.getExposicionCorporativaClienteBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\n      backendServices.eliminarExposicionCorporativaClienteBD(transactionId);\n      var debtors = await backendServices.consultarDeudores(transactionId);\n\n      if (debtors === null || debtors === undefined) {\n        return undefined;\n      } //Borrar de BD todas las Exposicion Corporativa Cliente con \"t24\"= true\n\n\n      for (var i = 0; i < debtors.length; i++) {\n        var partyId = debtors[i].customerNumberT24;\n        var debtorName = debtors[i] !== undefined ? debtors[i].typePerson == \"2\" ? debtors[i].name : debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2 : \"\";\n        var dataResult = await coreServices.getCorporateExhibitionByClients(partyId);\n\n        for (let p = 0; p < dataResult.length; p++) {\n          let datoSent = {\n            \"transactId\": Number(transactionId),\n            \"accountNumber\": debtorName,\n            \"t24ClientId\": partyId,\n            \"description\": dataResult[p].name,\n            \"approved\": dataResult[p].approved,\n            \"currentBalance\": dataResult[p].balance,\n            \"proposed\": dataResult[p].proposal,\n            \"ltv\": 0,\n            t24: true,\n            \"difference\": dataResult[p].variation,\n            \"guarantee\": 0\n          };\n          console.log(\"saveCorporateExhibitionByClients\", datoSent);\n          await backendServices.saveExposicionCorporativaClienteBD(datoSent);\n        }\n      }\n    } catch (err) {}\n  } //salvamos facilidades por tramite\n\n\n  async saveFacilities(transactionId) {\n    try {\n      var request = await backendServices.consultGeneralDataPropCred(transactionId);\n      var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\n      /*if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\n      //Borrar de BD todas las Facilidades con \"t24\"= true\n\n      console.log(\"saveFacilities\", dataResult);\n      backendServices.eliminarFacilidadesFisica(request[0].requestId);\n      var dataResult = await coreServices.getFacilitiesByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        var _dataResult$i$facilit, _request$0$requestId;\n\n        let datoSent = {\n          \"facilityNumber\": dataResult[i].AcctId,\n          \"cr\": dataResult[i].AcctId,\n          \"amount\": dataResult[i].approvedAmount,\n          \"debtor\": dataResult[i].debtorName,\n          \"clientTypeId\": dataResult[i].debtorId,\n          \"balance\": dataResult[i].actualBalance,\n          \"purpose\": \"\",\n          \"sublimits\": \"\",\n          \"proposalRate\": 0,\n          \"noSubsidyRate\": 0,\n          \"effectiveRate\": 0,\n          \"feci\": false,\n          \"termDays\": 0,\n          \"termDescription\": \"\",\n          \"ltv\": 0,\n          \"finantialConditions\": \" \",\n          \"environmentRiskCategory\": 0,\n          \"covenant\": \" \",\n          \"environmentRiskOpinion\": \" \",\n          \"finantialCovenant\": \" \",\n          \"legalDocumentation\": \"  \",\n          \"otherConditions\": \" \",\n          \"creditRiskOpinion\": \" \",\n          \"provision\": \" \",\n          \"proposalTypeId\": \"\",\n          \"proposalTypeName\": \"\",\n          \"facilityTypeId\": (_dataResult$i$facilit = dataResult[i].facilityType) !== null && _dataResult$i$facilit !== void 0 ? _dataResult$i$facilit : \"\",\n          \"termType\": \"\",\n          \"origin\": \"CORE\",\n          \"applyEscrow\": false,\n          \"facilityId\": 0,\n          \"requestId\": (_request$0$requestId = request[0].requestId) !== null && _request$0$requestId !== void 0 ? _request$0$requestId : \"\",\n          \"startingAmount\": 0,\n          t24: true,\n          \"term\": \"\"\n        };\n        await backendServices.newFacilityPropCred(datoSent);\n        console.log(\"saveFacilities\", dataResult);\n      }\n    } catch (err) {}\n  } //salvamos deudas a Corto y largo Plazo\n\n\n  async saveDebts(transactionId) {\n    try {\n      var checkCP = false;\n      var checkLP = false;\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {} else {\n        checkCP = true;\n      }\n\n      dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) {} else {\n        checkLP = true;\n      }\n\n      if (!checkCP && !checkLP) {\n        return;\n      }\n\n      dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\n\n      if (checkCP) {\n        for (var short of dataResult.shortTermresult) {\n          console.log(\"shortTermresult\", short);\n          var dat = {\n            \"facilityType\": short.facilityType,\n            \"amount\": Number(short.approvedAmount.toFixed(2)),\n            \"date\": short.startDate,\n            \"expirationDate\": short.endDate,\n            \"debitBalance1\": Number(short.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"paymentHistory\": short.paymentHistory,\n            \"rate\": 0,\n            \"fee\": 0,\n            \"bail\": 0,\n            \"fundDestiny\": \"\",\n            status: true,\n            t24: true,\n            \"bank\": short.bank,\n            \"transactId\": Number(transactionId),\n            \"codeT24\": \"\",\n            \"dateT24\": \"\"\n          };\n\n          if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {//Verificar si existe un record en dataResult.getBankingRelationCPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\n            //si no tiene fecha actualizar todo\n            // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\n          }\n\n          await backendServices.newBankingRelationsDebtsCP(dat);\n        }\n      }\n\n      if (checkLP) {\n        for (var long of dataResult.longTermresult) {\n          var dat1 = {\n            \"transactId\": Number(transactionId),\n            \"bank\": long.bank,\n            \"facilityType\": long.facilityType,\n            \"amount\": Number(long.approvedAmount.toFixed(2)),\n            \"date\": long.startDate,\n            \"expirationDate\": long.endDate,\n            \"debitBalance1\": Number(long.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"paymentHistory\": long.paymentHistory,\n            \"rate\": 0,\n            \"fee\": 0,\n            t24: true,\n            \"bail\": \" \",\n            \"fundDestiny\": \" \",\n            status: true,\n            \"codeT24\": \"\",\n            \"dateT24\": \"\"\n          };\n\n          if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) {//Verificar si existe un record en dataResult.bankingRelationLPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\n            //si no tiene fecha actualizar todo\n            // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\n          }\n\n          await backendServices.newBankingRelationsDebtsLP(dat1);\n        }\n      }\n    } catch (err) {\n      console.error(\"newBankingRelationsDebts\", err);\n    }\n  } //salvamos facilidades por tramite\n\n\n  async saveAccountMovements(transactionId) {\n    try {\n      //var dataResult = await backendServices.consultMovementsBank(transactionId);\n      //if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\n      //return;\n      //}\n      //Borrar de BD todos los Movimientos de Cuenta cuyo \"t24\"= true\n      backendServices.deleteFisicalMovementsAccountsIGR(transactionId);\n      var dataResult = await coreServices.getAccountMovementsByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        //aqui cargamos por cuentas\n        let cuenta = dataResult[i].AcctId;\n\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\n\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\n            let jsonSet = {\n              \"trasactId\": Number(transactionId),\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\n              \"observations\": \"\",\n              \"accountNumber\": cuenta,\n              \"t24\": true\n            };\n            await backendServices.newMovementsAccountsIGR(jsonSet);\n          }\n        }\n      }\n    } catch (err) {}\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/helpers/AutoSaveData.js"],"names":["BackendServices","CoreServices","backendServices","coreServices","AutoSaveData","saveInitialData","transactionId","saveDebts","saveAccountMovements","saveCorporateExhibition","saveCorporateExhibitionByClients","saveFacilities","eliminarExposicionCorporativaBD","dataResult","getCorporateExhibition","i","length","datoSent","Number","name","approved","balance","proposal","t24","variation","saveExposicionCorporativaBD","err","eliminarExposicionCorporativaClienteBD","debtors","consultarDeudores","undefined","partyId","customerNumberT24","debtorName","typePerson","name2","lastName","lastName2","getCorporateExhibitionByClients","p","console","log","saveExposicionCorporativaClienteBD","request","consultGeneralDataPropCred","consultarFacilidadesT24","requestId","eliminarFacilidadesFisica","getFacilitiesByTransaction","AcctId","approvedAmount","debtorId","actualBalance","facilityType","newFacilityPropCred","checkCP","checkLP","consultBankingRelationsDebtsCP","getBankingRelationCPDTOList","consultBankRelationsDebtsLP","bankingRelationLPDTOList","getAllTermDebtsByTransaction","short","shortTermresult","dat","toFixed","startDate","endDate","paymentHistory","status","bank","newBankingRelationsDebtsCP","long","longTermresult","dat1","newBankingRelationsDebtsLP","error","deleteFisicalMovementsAccountsIGR","getAccountMovementsByTransaction","cuenta","j","dataByYear","k","dataresult","jsonSet","year","month","deposits","amount","newMovementsAccountsIGR"],"mappings":"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","sourcesContent":["\r\nimport { BackendServices, CoreServices } from \"../services\";\r\n\r\nconst backendServices = new BackendServices();\r\nconst coreServices = new CoreServices();\r\n\r\nexport default class AutoSaveData {\r\n\r\n\r\n  //salvamos deudas de un tramite\r\n  async saveInitialData(transactionId) {\r\n    this.saveDebts(transactionId);\r\n    this.saveAccountMovements(transactionId);\r\n    this.saveCorporateExhibition(transactionId);\r\n    this.saveCorporateExhibitionByClients(transactionId);\r\n    this.saveFacilities(transactionId);\r\n  }\r\n\r\n  //salvamos exposicion por tramite\r\n  async saveCorporateExhibition(transactionId) {\r\n    try {\r\n\r\n      /*var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\r\n\r\n      //Borrar de BD todas las Exposicion Corporativa con \"t24\"= true\r\n      await backendServices.eliminarExposicionCorporativaBD(transactionId);\r\n\r\n      var dataResult = await coreServices.getCorporateExhibition(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        let datoSent = {\r\n          \"transactId\": Number(transactionId),\r\n          //\"accountNumber\": data.name,\r\n          //\"t24ClientId\": data.customerNumberT24,\r\n          \"description\": dataResult[i].name,\r\n          \"approved\": dataResult[i].approved,\r\n          \"currentBalance\": dataResult[i].balance,\r\n          \"proposed\": dataResult[i].proposal,\r\n          \"ltv\": 0,\r\n          t24: true,\r\n          \"difference\": dataResult[i].variation,\r\n          \"guarantee\": 0,\r\n        }\r\n        await backendServices.saveExposicionCorporativaBD(datoSent)\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos exposicion por tramite\r\n  async saveCorporateExhibitionByClients(transactionId) {\r\n    try {\r\n\r\n      /*var dataResult = await backendServices.getExposicionCorporativaClienteBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\r\n\r\n      backendServices.eliminarExposicionCorporativaClienteBD(transactionId)\r\n\r\n      var debtors = await backendServices.consultarDeudores(transactionId);\r\n      if (debtors === null || debtors === undefined) {\r\n        return undefined;\r\n      }\r\n\r\n      //Borrar de BD todas las Exposicion Corporativa Cliente con \"t24\"= true\r\n\r\n      for (var i = 0; i < debtors.length; i++) {\r\n        var partyId = debtors[i].customerNumberT24;\r\n        var debtorName = debtors[i] !== undefined ? (debtors[i].typePerson == \"2\" ? debtors[i].name : (debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2)) : \"\";\r\n        var dataResult = await coreServices.getCorporateExhibitionByClients(partyId)\r\n        for (let p = 0; p < dataResult.length; p++) {\r\n          let datoSent = {\r\n            \"transactId\": Number(transactionId),\r\n            \"accountNumber\": debtorName,\r\n            \"t24ClientId\": partyId,\r\n            \"description\": dataResult[p].name,\r\n            \"approved\": dataResult[p].approved,\r\n            \"currentBalance\": dataResult[p].balance,\r\n            \"proposed\": dataResult[p].proposal,\r\n            \"ltv\": 0,\r\n            t24: true,\r\n            \"difference\": dataResult[p].variation,\r\n            \"guarantee\": 0,\r\n            \r\n          }\r\n          console.log(\"saveCorporateExhibitionByClients\", datoSent);\r\n          await backendServices.saveExposicionCorporativaClienteBD(datoSent)\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  async saveFacilities(transactionId) {\r\n    try {\r\n\r\n      var request = await backendServices.consultGeneralDataPropCred(transactionId);\r\n      var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\r\n      /*if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\r\n\r\n      //Borrar de BD todas las Facilidades con \"t24\"= true\r\n      console.log(\"saveFacilities\",dataResult);\r\n      backendServices.eliminarFacilidadesFisica(request[0].requestId);\r\n\r\n      var dataResult = await coreServices.getFacilitiesByTransaction(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        let datoSent = {\r\n          \"facilityNumber\": dataResult[i].AcctId,\r\n          \"cr\": dataResult[i].AcctId,\r\n          \"amount\": dataResult[i].approvedAmount,\r\n          \"debtor\": dataResult[i].debtorName,\r\n          \"clientTypeId\": dataResult[i].debtorId,\r\n          \"balance\": dataResult[i].actualBalance,\r\n          \"purpose\": \"\",\r\n          \"sublimits\": \"\",\r\n          \"proposalRate\": 0,\r\n          \"noSubsidyRate\": 0,\r\n          \"effectiveRate\": 0,\r\n          \"feci\": false,\r\n          \"termDays\": 0,\r\n          \"termDescription\": \"\",\r\n          \"ltv\": 0,\r\n          \"finantialConditions\": \" \",\r\n          \"environmentRiskCategory\": 0,\r\n          \"covenant\": \" \",\r\n          \"environmentRiskOpinion\": \" \",\r\n          \"finantialCovenant\": \" \",\r\n          \"legalDocumentation\": \"  \",\r\n          \"otherConditions\": \" \",\r\n          \"creditRiskOpinion\": \" \",\r\n          \"provision\": \" \",\r\n          \"proposalTypeId\": \"\",\r\n          \"proposalTypeName\": \"\",\r\n          \"facilityTypeId\": dataResult[i].facilityType ?? \"\",\r\n          \"termType\": \"\",\r\n          \"origin\": \"CORE\",\r\n          \"applyEscrow\": false,\r\n          \"facilityId\": 0,\r\n          \"requestId\": request[0].requestId ?? \"\",\r\n          \"startingAmount\": 0,\r\n          t24: true,\r\n          \"term\": \"\"\r\n        }\r\n        await backendServices.newFacilityPropCred(datoSent)\r\n        console.log(\"saveFacilities\",dataResult);\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos deudas a Corto y largo Plazo\r\n  async saveDebts(transactionId) {\r\n    try {\r\n\r\n      var checkCP = false;\r\n      var checkLP = false;\r\n\r\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) { }\r\n      else {\r\n        checkCP = true;\r\n      }\r\n      dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) { }\r\n      else {\r\n        checkLP = true;\r\n      }\r\n\r\n      if (!checkCP && !checkLP) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\r\n\r\n      if (checkCP) {\r\n        for (var short of dataResult.shortTermresult) {\r\n          console.log(\"shortTermresult\", short);\r\n          var dat = {\r\n            \"facilityType\": short.facilityType,\r\n            \"amount\": Number(short.approvedAmount.toFixed(2)),\r\n            \"date\": short.startDate,\r\n            \"expirationDate\": short.endDate,\r\n            \"debitBalance1\": Number(short.balance.toFixed(2)),\r\n            \"debitBalance2\": 0,\r\n            \"debitBalance3\": 0,\r\n            \"paymentHistory\": short.paymentHistory,\r\n            \"rate\": 0,\r\n            \"fee\": 0,\r\n            \"bail\": 0,\r\n            \"fundDestiny\": \"\",\r\n            status: true,\r\n            t24: true,\r\n            \"bank\": short.bank,\r\n            \"transactId\": Number(transactionId),\r\n            \"codeT24\": \"\",\r\n            \"dateT24\": \"\",\r\n          }\r\n\r\n          if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) { \r\n            //Verificar si existe un record en dataResult.getBankingRelationCPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\r\n            //si no tiene fecha actualizar todo\r\n            // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\r\n            \r\n          }\r\n\r\n          await backendServices.newBankingRelationsDebtsCP(dat)\r\n        }\r\n      }\r\n\r\n      if (checkLP) {\r\n        for (var long of dataResult.longTermresult) {\r\n          var dat1 = {\r\n            \"transactId\": Number(transactionId),\r\n            \"bank\": long.bank,\r\n            \"facilityType\": long.facilityType,\r\n            \"amount\": Number(long.approvedAmount.toFixed(2)),\r\n            \"date\": long.startDate,\r\n            \"expirationDate\": long.endDate,\r\n            \"debitBalance1\": Number(long.balance.toFixed(2)),\r\n            \"debitBalance2\": 0,\r\n            \"debitBalance3\": 0,\r\n            \"paymentHistory\": long.paymentHistory,\r\n            \"rate\": 0,\r\n            \"fee\": 0,\r\n            t24: true,\r\n            \"bail\": \" \",\r\n            \"fundDestiny\": \" \",\r\n            status: true,\r\n            \"codeT24\": \"\",\r\n            \"dateT24\": \"\",\r\n          }\r\n\r\n          if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) { \r\n            //Verificar si existe un record en dataResult.bankingRelationLPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\r\n            //si no tiene fecha actualizar todo\r\n            // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\r\n            \r\n          }\r\n\r\n          await backendServices.newBankingRelationsDebtsLP(dat1)\r\n        }\r\n      }\r\n\r\n    }\r\n    catch (err) { console.error(\"newBankingRelationsDebts\", err) }\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  async saveAccountMovements(transactionId) {\r\n    try {\r\n\r\n      //var dataResult = await backendServices.consultMovementsBank(transactionId);\r\n      //if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\r\n        //return;\r\n      //}\r\n\r\n      //Borrar de BD todos los Movimientos de Cuenta cuyo \"t24\"= true\r\n      backendServices.deleteFisicalMovementsAccountsIGR(transactionId);\r\n\r\n      var dataResult = await coreServices.getAccountMovementsByTransaction(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        //aqui cargamos por cuentas\r\n        let cuenta = dataResult[i].AcctId;\r\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\r\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\r\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\r\n            let jsonSet = {\r\n              \"trasactId\": Number(transactionId),\r\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\r\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\r\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\r\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\r\n              \"observations\": \"\",\r\n              \"accountNumber\": cuenta,\r\n              \"t24\": true\r\n            }\r\n            await backendServices.newMovementsAccountsIGR(jsonSet);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}