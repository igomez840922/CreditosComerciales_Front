{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\Dashboard\\\\historical.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\nimport { useTranslation } from 'react-i18next';\nimport { CardTitle, Card, CardBody } from \"reactstrap\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport ModalWatchProces from \"./ModalWacthProcess\";\nimport { translationHelpers } from '../../helpers';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { BackendServices } from \"../../services\"; //import ActiveDirectoryService from \"../../services/ActiveDirectory\";\n\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  SearchBar\n} = Search;\n\nconst Historical = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [tr] = translationHelpers('commercial_credit', 'translation');\n  const [dataHeader, setDataHeader] = useState([]);\n  const [dataBody, setDataBody] = useState([]);\n  const [ShowDisplayModal, setShowDisplayModal] = useState(false);\n  const [processInstanceId, setProcessInstanceId] = useState(null);\n  const [isActiveLoading, setIsActiveLoading] = useState(false);\n  const backendServices = new BackendServices();\n  useEffect(() => {\n    getDashBoard();\n  }, []);\n  /**\r\n   * *Permite cargar los datos a la tabla\r\n   * @param {}\r\n   * @returns {void}\r\n   */\n\n  async function getDashBoard() {\n    /* ------------------------------------------------------------------------------------------------------------------ */\n\n    /*   Instanciamos la api para el result de la api y asi enviar al modelo para retornar un json armado para la tabla   */\n\n    /* ------------------------------------------------------------------------------------------------------------------ */\n    setIsActiveLoading(true);\n    backendServices.getBpmStatisticsvm().then(data => {\n      setIsActiveLoading(false);\n      /* ------------------------------------------------------------------------------------------------------------------ */\n\n      /*             Seteamos los valores de las columnas y filas a la variable que va al componente de la tabla             */\n\n      /* ------------------------------------------------------------------------------------------------------------------ */\n\n      setDataBody(data.map($$ => {\n        $$.date = formatDate($$.date);\n        $$.applicationNumber = $$.applicationNumber === '0' ? '' : $$.applicationNumber;\n        $$.action = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            onClick: e => {\n              setProcessInstanceId($$.instanceId);\n              toggleModalWatchProcess();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"mdi mdi-eye mdi-24px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n        return $$;\n      }));\n    }).catch(error => {\n      setIsActiveLoading(false);\n      console.error(error);\n    }); //Header de la Tabla de Bandeja de Entrada\n\n    const columns = [{\n      text: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: t(\"Date\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this),\n      dataField: 'date',\n      sort: true\n    }, {\n      text: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: t(\"Process\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this),\n      dataField: 'instanceId',\n      sort: true\n    }, {\n      text: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: t(\"Procedure\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }, this),\n      dataField: 'transactId',\n      sort: true\n    }, {\n      text: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: t(\"Request\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }, this),\n      dataField: 'applicationNumber',\n      sort: true\n    }, {\n      text: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: t(\"Client\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }, this),\n      dataField: 'name',\n      sort: true\n    }, {\n      text: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: t(\"Activity\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }, this),\n      dataField: 'activityBpmName',\n      sort: true\n    }, {\n      text: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: t(\"Status\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this),\n      dataField: 'statusDescription',\n      sort: true\n    }, {\n      text: \"\",\n      dataField: 'action'\n    }];\n    setDataHeader(columns);\n  }\n\n  function formatDate(date) {\n    return moment(date).format(\"DD/MM/YYYY\");\n  }\n\n  function toggleModalWatchProcess() {\n    setShowDisplayModal(!ShowDisplayModal);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-content\",\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        title: t(\"Dashboard\"),\n        breadcrumbItem: t(\"Historical\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"h4\",\n            children: t(\"CommercialCredit\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-title-desc\",\n            children: t(\"Historicalofthecommercialcreditprocess\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n            active: isActiveLoading,\n            spinner: true,\n            text: t(\"Processinginformation\"),\n            children: dataHeader.length > 0 ? /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n              keyField: \"id\",\n              data: dataBody,\n              columns: dataHeader,\n              search: true,\n              children: props => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"m-3\",\n                children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                  className: \"custome-search-field float-end\",\n                  delay: 1000,\n                  placeholder: t(\"Search\"),\n                  ...props.searchProps\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, {\n                  bootstrap4: true,\n                  bordered: false,\n                  striped: true,\n                  hover: true,\n                  condensed: true,\n                  classes: \"styled-table\",\n                  style: {\n                    cursor: \"pointer\"\n                  },\n                  data: dataBody,\n                  columns: dataHeader,\n                  ...props.baseProps,\n                  pagination: paginationFactory({\n                    sizePerPage: 30,\n                    sizePerPageList: [30]\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), processInstanceId && /*#__PURE__*/_jsxDEV(ModalWatchProces, {\n      isOpen: ShowDisplayModal,\n      toggle: () => {\n        toggleModalWatchProcess();\n      },\n      processInstanceId: processInstanceId,\n      t: tr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Historical, \"9RQyDZB2S4fF/kw8Wibznr0Uqe4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Historical;\nexport default Historical;\n\nvar _c;\n\n$RefreshReg$(_c, \"Historical\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/Dashboard/historical.js"],"names":["React","useEffect","useState","Link","Breadcrumbs","useTranslation","CardTitle","Card","CardBody","BootstrapTable","ToolkitProvider","Search","paginationFactory","ModalWatchProces","translationHelpers","LoadingOverlay","BackendServices","moment","SearchBar","Historical","t","tr","dataHeader","setDataHeader","dataBody","setDataBody","ShowDisplayModal","setShowDisplayModal","processInstanceId","setProcessInstanceId","isActiveLoading","setIsActiveLoading","backendServices","getDashBoard","getBpmStatisticsvm","then","data","map","$$","date","formatDate","applicationNumber","action","e","instanceId","toggleModalWatchProcess","catch","error","console","columns","text","dataField","sort","format","length","props","searchProps","cursor","baseProps","sizePerPage","sizePerPageList"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n  CardTitle,\r\n  Card, CardBody\r\n} from \"reactstrap\"\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport ModalWatchProces from \"./ModalWacthProcess\";\r\nimport { translationHelpers } from '../../helpers';\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport { BackendServices } from \"../../services\";\r\n//import ActiveDirectoryService from \"../../services/ActiveDirectory\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst { SearchBar } = Search;\r\n\r\nconst Historical = () => {\r\n  const { t } = useTranslation();\r\n  const [tr] = translationHelpers('commercial_credit', 'translation');\r\n\r\n  const [dataHeader, setDataHeader] = useState([]);\r\n  const [dataBody, setDataBody] = useState([]);\r\n  const [ShowDisplayModal, setShowDisplayModal] = useState(false);\r\n  const [processInstanceId, setProcessInstanceId] = useState(null);\r\n  const [isActiveLoading, setIsActiveLoading] = useState(false);\r\n\r\n  const backendServices = new BackendServices();\r\n\r\n  useEffect(() => {\r\n    getDashBoard();\r\n\r\n  }, [])\r\n\r\n  /**\r\n   * *Permite cargar los datos a la tabla\r\n   * @param {}\r\n   * @returns {void}\r\n   */\r\n  async function getDashBoard() {\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n    /*   Instanciamos la api para el result de la api y asi enviar al modelo para retornar un json armado para la tabla   */\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n    setIsActiveLoading(true);\r\n    backendServices.getBpmStatisticsvm()\r\n      .then((data) => {\r\n        setIsActiveLoading(false)\r\n        /* ------------------------------------------------------------------------------------------------------------------ */\r\n        /*             Seteamos los valores de las columnas y filas a la variable que va al componente de la tabla             */\r\n        /* ------------------------------------------------------------------------------------------------------------------ */\r\n        setDataBody(data.map($$ => {\r\n          $$.date = formatDate($$.date);\r\n          $$.applicationNumber = $$.applicationNumber === '0' ? '' : $$.applicationNumber;\r\n          $$.action = (\r\n            <>\r\n              <Link onClick={(e) => { setProcessInstanceId($$.instanceId); toggleModalWatchProcess(); }}>\r\n                <i className=\"mdi mdi-eye mdi-24px\"></i>\r\n              </Link>\r\n            </>\r\n          )\r\n          return $$;\r\n        }));\r\n\r\n      })\r\n      .catch((error) => {\r\n        setIsActiveLoading(false)\r\n        console.error(error);\r\n      });\r\n\r\n\r\n    //Header de la Tabla de Bandeja de Entrada\r\n    const columns = [\r\n      { text: <strong>{t(\"Date\")}</strong>, dataField: 'date', sort: true },\r\n      { text: <strong>{t(\"Process\")}</strong>, dataField: 'instanceId', sort: true },\r\n      { text: <strong>{t(\"Procedure\")}</strong>, dataField: 'transactId', sort: true },\r\n      { text: <strong>{t(\"Request\")}</strong>, dataField: 'applicationNumber', sort: true },\r\n      { text: <strong>{t(\"Client\")}</strong>, dataField: 'name', sort: true },\r\n      { text: <strong>{t(\"Activity\")}</strong>, dataField: 'activityBpmName', sort: true },\r\n      { text: <strong>{t(\"Status\")}</strong>, dataField: 'statusDescription', sort: true },\r\n      { text: \"\", dataField: 'action' },\r\n    ];\r\n\r\n    setDataHeader(columns);\r\n  }\r\n\r\n  function formatDate(date) {\r\n    return moment(date).format(\"DD/MM/YYYY\");\r\n  }\r\n\r\n  function toggleModalWatchProcess() {\r\n    setShowDisplayModal(!ShowDisplayModal)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <Breadcrumbs title={t(\"Dashboard\")} breadcrumbItem={t(\"Historical\")} />\r\n\r\n        <Card>\r\n          <CardBody>\r\n\r\n            <CardTitle className=\"h4\">{t(\"CommercialCredit\")}</CardTitle>\r\n            <p className=\"card-title-desc\">\r\n              {t(\"Historicalofthecommercialcreditprocess\")}\r\n            </p>\r\n            <LoadingOverlay active={isActiveLoading} spinner text={t(\"Processinginformation\")}>\r\n              {dataHeader.length > 0 ?\r\n                <ToolkitProvider\r\n                  keyField=\"id\"\r\n                  data={dataBody}\r\n                  columns={dataHeader}\r\n                  search\r\n                >\r\n                  {\r\n                    props => (\r\n                      <div className=\"m-3\">\r\n\r\n                        <SearchBar className=\"custome-search-field float-end\" delay={1000} placeholder={t(\"Search\")} {...props.searchProps} />\r\n                        <BootstrapTable\r\n                          bootstrap4\r\n                          bordered={false}\r\n                          striped\r\n                          hover\r\n                          condensed\r\n                          classes='styled-table'\r\n                          style={{ cursor: \"pointer\" }}\r\n                          data={dataBody} columns={dataHeader}\r\n                          {...props.baseProps}\r\n                          pagination={paginationFactory({\r\n                            sizePerPage: 30,\r\n                            sizePerPageList: [30]\r\n                          })}\r\n                        />\r\n                      </div>\r\n                    )\r\n                  }\r\n                </ToolkitProvider>\r\n                : null}\r\n            </LoadingOverlay>\r\n\r\n          </CardBody>\r\n        </Card>\r\n\r\n      </div>\r\n      {processInstanceId && (<ModalWatchProces isOpen={ShowDisplayModal} toggle={() => { toggleModalWatchProcess() }} processInstanceId={processInstanceId} t={tr} />)}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Historical\r\n"]},"metadata":{},"sourceType":"module"}