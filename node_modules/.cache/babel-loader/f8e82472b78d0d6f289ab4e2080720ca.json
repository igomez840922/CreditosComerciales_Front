{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\ClearCache.js\";\nimport React, { useState, useEffect } from \"react\";\nimport packageJson from \"../package.json\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst buildDateGreaterThan = (latestDate, currentDate) => {\n  const momLatestDateTime = moment(latestDate);\n  const momCurrentDateTime = moment(currentDate);\n\n  if (momLatestDateTime.isAfter(momCurrentDateTime)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nfunction withClearCache(Component) {\n  var _s = $RefreshSig$();\n\n  function ClearCacheComponent(props) {\n    _s();\n\n    const [isLatestBuildDate, setIsLatestBuildDate] = useState(false);\n    useEffect(() => {\n      fetch(\"/meta.json\").then(response => response.json()).then(meta => {\n        const latestVersionDate = meta.buildDate;\n        const currentVersionDate = packageJson.buildDate;\n        const shouldForceRefresh = buildDateGreaterThan(latestVersionDate, currentVersionDate);\n\n        if (shouldForceRefresh) {\n          setIsLatestBuildDate(false);\n          refreshCacheAndReload();\n        } else {\n          setIsLatestBuildDate(true);\n        }\n      });\n    }, []);\n\n    const refreshCacheAndReload = () => {\n      if (caches) {\n        // Service worker cache should be cleared with caches.delete()\n        caches.keys().then(names => {\n          for (const name of names) {\n            caches.delete(name);\n          }\n        });\n      } // delete browser cache and hard reload\n\n\n      window.location.reload(true);\n    };\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: isLatestBuildDate ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 30\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(ClearCacheComponent, \"FlIs9TQBSO4RD1vxeupIA3JW2Uo=\");\n\n  return ClearCacheComponent;\n}\n\nexport default withClearCache;","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/ClearCache.js"],"names":["React","useState","useEffect","packageJson","moment","buildDateGreaterThan","latestDate","currentDate","momLatestDateTime","momCurrentDateTime","isAfter","withClearCache","Component","ClearCacheComponent","props","isLatestBuildDate","setIsLatestBuildDate","fetch","then","response","json","meta","latestVersionDate","buildDate","currentVersionDate","shouldForceRefresh","refreshCacheAndReload","caches","keys","names","name","delete","window","location","reload"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,UAAD,EAAaC,WAAb,KAA6B;AACxD,QAAMC,iBAAiB,GAAGJ,MAAM,CAACE,UAAD,CAAhC;AACA,QAAMG,kBAAkB,GAAGL,MAAM,CAACG,WAAD,CAAjC;;AAEA,MAAIC,iBAAiB,CAACE,OAAlB,CAA0BD,kBAA1B,CAAJ,EAAmD;AACjD,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CATD;;AAWA,SAASE,cAAT,CAAwBC,SAAxB,EAAmC;AAAA;;AACjC,WAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAClC,UAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,CAAC,KAAD,CAA1D;AAEAC,IAAAA,SAAS,CAAC,MAAM;AACde,MAAAA,KAAK,CAAC,YAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,cAAMC,iBAAiB,GAAGD,IAAI,CAACE,SAA/B;AACA,cAAMC,kBAAkB,GAAGrB,WAAW,CAACoB,SAAvC;AAEA,cAAME,kBAAkB,GAAGpB,oBAAoB,CAC7CiB,iBAD6C,EAE7CE,kBAF6C,CAA/C;;AAIA,YAAIC,kBAAJ,EAAwB;AACtBT,UAAAA,oBAAoB,CAAC,KAAD,CAApB;AACAU,UAAAA,qBAAqB;AACtB,SAHD,MAGO;AACLV,UAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,OAhBH;AAiBD,KAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,UAAMU,qBAAqB,GAAG,MAAM;AAClC,UAAIC,MAAJ,EAAY;AACV;AACAA,QAAAA,MAAM,CAACC,IAAP,GAAcV,IAAd,CAAoBW,KAAD,IAAW;AAC5B,eAAK,MAAMC,IAAX,IAAmBD,KAAnB,EAA0B;AACxBF,YAAAA,MAAM,CAACI,MAAP,CAAcD,IAAd;AACD;AACF,SAJD;AAKD,OARiC,CASlC;;;AACAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD,KAXD;;AAaA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,gBACGnB,iBAAiB,gBAAG,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,cAAH,GAA8B;AADlD;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA1CgC,KACxBD,mBADwB;;AA4CjC,SAAOA,mBAAP;AACD;;AAED,eAAeF,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport packageJson from \"../package.json\";\r\nimport moment from \"moment\";\r\n\r\nconst buildDateGreaterThan = (latestDate, currentDate) => {\r\n  const momLatestDateTime = moment(latestDate);\r\n  const momCurrentDateTime = moment(currentDate);\r\n\r\n  if (momLatestDateTime.isAfter(momCurrentDateTime)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nfunction withClearCache(Component) {\r\n  function ClearCacheComponent(props) {\r\n    const [isLatestBuildDate, setIsLatestBuildDate] = useState(false);\r\n\r\n    useEffect(() => {\r\n      fetch(\"/meta.json\")\r\n        .then((response) => response.json())\r\n        .then((meta) => {\r\n          const latestVersionDate = meta.buildDate;\r\n          const currentVersionDate = packageJson.buildDate;\r\n\r\n          const shouldForceRefresh = buildDateGreaterThan(\r\n            latestVersionDate,\r\n            currentVersionDate\r\n          );\r\n          if (shouldForceRefresh) {\r\n            setIsLatestBuildDate(false);\r\n            refreshCacheAndReload();\r\n          } else {\r\n            setIsLatestBuildDate(true);\r\n          }\r\n        });\r\n    }, []);\r\n\r\n    const refreshCacheAndReload = () => {\r\n      if (caches) {\r\n        // Service worker cache should be cleared with caches.delete()\r\n        caches.keys().then((names) => {\r\n          for (const name of names) {\r\n            caches.delete(name);\r\n          }\r\n        });\r\n      }\r\n      // delete browser cache and hard reload\r\n      window.location.reload(true);\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {isLatestBuildDate ? <Component {...props} /> : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  return ClearCacheComponent;\r\n}\r\n\r\nexport default withClearCache;"]},"metadata":{},"sourceType":"module"}