{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\CommercialCredit\\\\20_Cotizador\\\\FormQuoterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, Row, Col, Form, Container, Button } from \"react-bootstrap\";\nimport Select from 'react-select';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport LoadingOverlay from \"react-loading-overlay\";\nimport FormContainerQuoter from './FormContainerQuoter';\nimport FormQuoterTypeNatural from './FormQuoterTypeNatural';\nimport FormDataQuoter from './FormDataQuoter';\nimport FormCommonFields from './FormCommonFields';\nimport TableResultQuoter from './TableResultQuoter';\nimport quoterCompuesto from \"./dummy/quoterCompuesto\";\nimport { BackendServices, CoreServices } from \"../../../services\";\nimport Currency from '../../../helpers/currency';\nimport checkNumber from '../../../helpers/checkNumber';\nimport { useFormQuoter } from './Hooks/useFormQuoter';\nimport { FormData } from './FormData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst currencyValidation = new Currency();\nconst services = new BackendServices();\n\nconst validationsForm = form => {};\n\nconst FormQuoterScreen = props => {\n  _s();\n\n  const {\n    dataPrefillClient\n  } = props;\n  const initialForm = {\n    // // common fields\n    // personType: \"Natural\",\n    // idType: \"\",\n    // idnumber: \"\",\n    // // client data\n    // firstname: \"\",\n    // name: \"\",\n    // secondname: \"\",\n    // firstlastname: \"\",\n    // secondlastname: \"\",\n    // birthDate: \"\",\n    // nationality: \"\",\n    // phoneNumber: \"\",\n    // email: \"\",\n    // // quoter data\n    loanType: \"compuesto\",\n    amountDebt: 0,\n    anualRate: 0,\n    effectiveRate: 0,\n    paymentPeriod: 1,\n    definedPayment: \"No\",\n    customerDefinedPayment: 0,\n    term: 0,\n    feciPercentage: \"No\",\n    feciRate: 0,\n    gracePeriodType: \"NA\",\n    gracePeriod: 0 // banking: \"\",\n    // legalExpenses: 0,\n    // financialTrust: 0,\n\n  }; // hooks\n\n  const {\n    t,\n    i18n\n  } = useTranslation(); // custom hooks\n\n  const [form, setForm] = useState(initialForm);\n  const [disableSelect, setDisableSelect] = useState(true);\n  const [disableDefinedFee, setDisableDefinedFee] = useState(true);\n  const [disableTerm, setDisableTerm] = useState(false);\n  const [disableSelectSpecialFee, setDisableSelectSpecialFee] = useState(true);\n  const [disableSelectGracePeriod, setDisableSelectGracePeriod] = useState(true);\n  const [typePerson, setTypePerson] = useState(\"Natural\");\n  const [paymentPlan, setPaymentPlan] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const {\n    response,\n    loading\n  } = useFormQuoter(); // handlers\n\n  const handleChange = (evt, propertyName) => {\n    const name = (evt === null || evt === void 0 ? void 0 : evt.target) ? evt.target.name : propertyName.name;\n    const value = (evt === null || evt === void 0 ? void 0 : evt.target) ? evt.target.value : evt.value;\n\n    if (propertyName === null || propertyName === void 0 ? void 0 : propertyName.name) {\n      console.info(\"Here\");\n      handleSelect(propertyName.name, value);\n    }\n\n    setForm({ ...form,\n      [name]: value\n    });\n  };\n\n  const handleSelect = (propertyName, value) => {\n    switch (propertyName) {\n      case 'feciPercentage':\n        const disableFeci = value == \"Si\" ? false : true;\n        setDisableSelect(disableFeci);\n        return;\n\n      case 'personType':\n        const type = value == \"Natural\" ? \"Natural\" : \"Juridica\";\n        setTypePerson(type);\n        return;\n\n      case 'definedPayment':\n        const definedFee = value == \"Si\" ? false : true;\n        setDisableDefinedFee(definedFee);\n        setDisableTerm(!definedFee);\n        return;\n\n      case 'specialFee':\n        const disableSpecialFee = value == \"Si\" ? false : true;\n        setDisableSelectSpecialFee(disableSpecialFee);\n        return;\n\n      case 'gracePeriodType':\n        const disableGracePeriod = value == \"p\" ? false : true;\n        setDisableSelectGracePeriod(disableGracePeriod);\n        return;\n\n      default:\n        break;\n    }\n  };\n\n  const hdlOnKeyUpRealNumber = e => {\n    let input = currencyValidation.getRealValue(e.target.value);\n    e.target.value = currencyValidation.format(input);\n    console.info(\"real number:\", input);\n  };\n\n  const hdlOnKeyUpPercentageNumber = e => {\n    let input = currencyValidation.getRealPercent(e.target.value);\n    e.target.value = currencyValidation.formatPercent(input);\n    console.info(\"percentage number:\", input);\n  };\n\n  const handleFormSubmit = async () => {\n    console.group(\"Handle form submit!\");\n    console.log(\"data submitted\", form);\n    console.groupEnd();\n    setLoader(true);\n    await services.getQuoterPaymentPlan(form.loanType, form.amountDebt, form.anualRate, form.feciRate, form.term, form.paymentPeriod, form.gracePeriod, form.gracePeriodType, form.customerDefinedPayment).then(resp => {\n      setLoader(false);\n      console.info(\"response service\", resp); // setPaymentPlan(dataPaymentPlan.payments)\n\n      setPaymentPlan(resp.payments); // setForm(initialForm)\n      // console.info(\"data payment plan\", dataPaymentPlan.payments)    \n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormData, {\n      clientExist: dataPrefillClient // onChange={handleChange}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        style: {\n          margin: '5px 0px'\n        },\n        type: \"button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"mdi mdi mdi-cancel mid-12px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), \" \", t(\"Cancel\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-secondary\",\n        type: \"button\",\n        style: {\n          margin: '5px',\n          color: \"black\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"mdi mdi-printer mdi-12px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 109\n        }, this), \" \", t(\"Print\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        type: \"submit\",\n        style: {\n          margin: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"mdi mdi-content-save mdi-12px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 83\n        }, this), \" \", t(\"Save\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FormQuoterScreen, \"MMuCXtgaB2NEAa89NxN31dWRQA0=\", false, function () {\n  return [useTranslation, useFormQuoter];\n});\n\n_c = FormQuoterScreen;\nexport default FormQuoterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormQuoterScreen\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/CommercialCredit/20_Cotizador/FormQuoterScreen.js"],"names":["useEffect","useState","useTranslation","Card","Row","Col","Form","Container","Button","Select","AvForm","AvField","LoadingOverlay","FormContainerQuoter","FormQuoterTypeNatural","FormDataQuoter","FormCommonFields","TableResultQuoter","quoterCompuesto","BackendServices","CoreServices","Currency","checkNumber","useFormQuoter","FormData","currencyValidation","services","validationsForm","form","FormQuoterScreen","props","dataPrefillClient","initialForm","loanType","amountDebt","anualRate","effectiveRate","paymentPeriod","definedPayment","customerDefinedPayment","term","feciPercentage","feciRate","gracePeriodType","gracePeriod","t","i18n","setForm","disableSelect","setDisableSelect","disableDefinedFee","setDisableDefinedFee","disableTerm","setDisableTerm","disableSelectSpecialFee","setDisableSelectSpecialFee","disableSelectGracePeriod","setDisableSelectGracePeriod","typePerson","setTypePerson","paymentPlan","setPaymentPlan","loader","setLoader","response","loading","handleChange","evt","propertyName","name","target","value","console","info","handleSelect","disableFeci","type","definedFee","disableSpecialFee","disableGracePeriod","hdlOnKeyUpRealNumber","e","input","getRealValue","format","hdlOnKeyUpPercentageNumber","getRealPercent","formatPercent","handleFormSubmit","group","log","groupEnd","getQuoterPaymentPlan","then","resp","payments","textAlign","margin","color"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SACIC,IADJ,EAEIC,GAFJ,EAGIC,GAHJ,EAIIC,IAJJ,EAKIC,SALJ,EAMIC,MANJ,QAOO,iBAPP;AAQA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,gCAAhC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,mBAA9C;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAEA,MAAMC,kBAAkB,GAAG,IAAIJ,QAAJ,EAA3B;AACA,MAAMK,QAAQ,GAAG,IAAIP,eAAJ,EAAjB;;AAEA,MAAMQ,eAAe,GAAIC,IAAD,IAAU,CAAG,CAArC;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAwBD,KAA9B;AACA,QAAME,WAAW,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,WAhBM;AAiBhBC,IAAAA,UAAU,EAAE,CAjBI;AAkBhBC,IAAAA,SAAS,EAAE,CAlBK;AAmBhBC,IAAAA,aAAa,EAAE,CAnBC;AAoBhBC,IAAAA,aAAa,EAAE,CApBC;AAqBhBC,IAAAA,cAAc,EAAE,IArBA;AAsBhBC,IAAAA,sBAAsB,EAAE,CAtBR;AAuBhBC,IAAAA,IAAI,EAAE,CAvBU;AAwBhBC,IAAAA,cAAc,EAAE,IAxBA;AAyBhBC,IAAAA,QAAQ,EAAE,CAzBM;AA0BhBC,IAAAA,eAAe,EAAE,IA1BD;AA2BhBC,IAAAA,WAAW,EAAE,CA3BG,CA4BhB;AACA;AACA;;AA9BgB,GAApB,CAFgC,CAkChC;;AACA,QAAM;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAc5C,cAAc,EAAlC,CAnCgC,CAoChC;;AACA,QAAM,CAAC0B,IAAD,EAAOmB,OAAP,IAAkB9C,QAAQ,CAAC+B,WAAD,CAAhC;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoChD,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACiD,iBAAD,EAAoBC,oBAApB,IAA4ClD,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM,CAACmD,WAAD,EAAcC,cAAd,IAAgCpD,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACqD,uBAAD,EAA0BC,0BAA1B,IAAwDtD,QAAQ,CAAC,IAAD,CAAtE;AACA,QAAM,CAACuD,wBAAD,EAA2BC,2BAA3B,IAA0DxD,QAAQ,CAAC,IAAD,CAAxE;AACA,QAAM,CAACyD,UAAD,EAAaC,aAAb,IAA8B1D,QAAQ,CAAC,SAAD,CAA5C;AACA,QAAM,CAAC2D,WAAD,EAAcC,cAAd,IAAgC5D,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC6D,MAAD,EAASC,SAAT,IAAsB9D,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AACF+D,IAAAA,QADE;AAEFC,IAAAA;AAFE,MAGF1C,aAAa,EAHjB,CA9CgC,CAmDhC;;AACA,QAAM2C,YAAY,GAAG,CAACC,GAAD,EAAMC,YAAN,KAAuB;AAExC,UAAMC,IAAI,GAAG,CAAAF,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,MAAL,IACPH,GAAG,CAACG,MAAJ,CAAWD,IADJ,GAEPD,YAAY,CAACC,IAFnB;AAIA,UAAME,KAAK,GAAG,CAAAJ,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,MAAL,IACRH,GAAG,CAACG,MAAJ,CAAWC,KADH,GAERJ,GAAG,CAACI,KAFV;;AAIA,QAAIH,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEC,IAAlB,EAAwB;AACpBG,MAAAA,OAAO,CAACC,IAAR,CAAa,MAAb;AACAC,MAAAA,YAAY,CAACN,YAAY,CAACC,IAAd,EAAoBE,KAApB,CAAZ;AACH;;AAEDxB,IAAAA,OAAO,CAAC,EACJ,GAAGnB,IADC;AAEJ,OAACyC,IAAD,GAAQE;AAFJ,KAAD,CAAP;AAKH,GApBD;;AAsBA,QAAMG,YAAY,GAAG,CAACN,YAAD,EAAeG,KAAf,KAAyB;AAC1C,YAAQH,YAAR;AACI,WAAK,gBAAL;AACI,cAAMO,WAAW,GAAGJ,KAAK,IAAI,IAAT,GACd,KADc,GAEd,IAFN;AAGAtB,QAAAA,gBAAgB,CAAC0B,WAAD,CAAhB;AACA;;AACJ,WAAK,YAAL;AACI,cAAMC,IAAI,GAAGL,KAAK,IAAI,SAAT,GACP,SADO,GAEP,UAFN;AAGAZ,QAAAA,aAAa,CAACiB,IAAD,CAAb;AACA;;AACJ,WAAK,gBAAL;AACI,cAAMC,UAAU,GAAGN,KAAK,IAAI,IAAT,GACb,KADa,GAEb,IAFN;AAGApB,QAAAA,oBAAoB,CAAC0B,UAAD,CAApB;AACAxB,QAAAA,cAAc,CAAC,CAACwB,UAAF,CAAd;AACA;;AACJ,WAAK,YAAL;AACI,cAAMC,iBAAiB,GAAGP,KAAK,IAAI,IAAT,GACpB,KADoB,GAEpB,IAFN;AAGAhB,QAAAA,0BAA0B,CAACuB,iBAAD,CAA1B;AACA;;AACJ,WAAK,iBAAL;AACI,cAAMC,kBAAkB,GAAGR,KAAK,IAAI,GAAT,GACrB,KADqB,GAErB,IAFN;AAGAd,QAAAA,2BAA2B,CAACsB,kBAAD,CAA3B;AACA;;AACJ;AACI;AAjCR;AAmCH,GApCD;;AAsCA,QAAMC,oBAAoB,GAAIC,CAAD,IAAO;AAChC,QAAIC,KAAK,GAAGzD,kBAAkB,CAAC0D,YAAnB,CAAgCF,CAAC,CAACX,MAAF,CAASC,KAAzC,CAAZ;AACAU,IAAAA,CAAC,CAACX,MAAF,CAASC,KAAT,GAAiB9C,kBAAkB,CAAC2D,MAAnB,CAA0BF,KAA1B,CAAjB;AACAV,IAAAA,OAAO,CAACC,IAAR,CAAa,cAAb,EAA6BS,KAA7B;AACH,GAJD;;AAMA,QAAMG,0BAA0B,GAAIJ,CAAD,IAAO;AACtC,QAAIC,KAAK,GAAGzD,kBAAkB,CAAC6D,cAAnB,CAAkCL,CAAC,CAACX,MAAF,CAASC,KAA3C,CAAZ;AACAU,IAAAA,CAAC,CAACX,MAAF,CAASC,KAAT,GAAiB9C,kBAAkB,CAAC8D,aAAnB,CAAiCL,KAAjC,CAAjB;AACAV,IAAAA,OAAO,CAACC,IAAR,CAAa,oBAAb,EAAmCS,KAAnC;AACH,GAJD;;AAMA,QAAMM,gBAAgB,GAAG,YAAY;AACjChB,IAAAA,OAAO,CAACiB,KAAR,CAAc,qBAAd;AACAjB,IAAAA,OAAO,CAACkB,GAAR,CAAY,gBAAZ,EAA8B9D,IAA9B;AACA4C,IAAAA,OAAO,CAACmB,QAAR;AAEA5B,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA,UAAMrC,QAAQ,CAACkE,oBAAT,CACFhE,IAAI,CAACK,QADH,EAEFL,IAAI,CAACM,UAFH,EAGFN,IAAI,CAACO,SAHH,EAIFP,IAAI,CAACc,QAJH,EAKFd,IAAI,CAACY,IALH,EAMFZ,IAAI,CAACS,aANH,EAOFT,IAAI,CAACgB,WAPH,EAQFhB,IAAI,CAACe,eARH,EASFf,IAAI,CAACW,sBATH,EAWDsD,IAXC,CAWIC,IAAI,IAAI;AACV/B,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAS,MAAAA,OAAO,CAACC,IAAR,CAAa,kBAAb,EAAiCqB,IAAjC,EAFU,CAGV;;AACAjC,MAAAA,cAAc,CAACiC,IAAI,CAACC,QAAN,CAAd,CAJU,CAKV;AACA;AACH,KAlBC,CAAN;AAoBH,GA1BD;;AA4BA,sBACI;AAAA,4BAiDI,QAAC,QAAD;AACI,MAAA,WAAW,EAAEhE,iBADjB,CAEI;;AAFJ;AAAA;AAAA;AAAA;AAAA,YAjDJ,eAwDI;AAAK,MAAA,KAAK,EAAE;AAAEiE,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,QAAhB;AAAyB,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAhC;AAAuD,QAAA,IAAI,EAAC,QAA5D;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ,EACoD,GADpD,EACyDpD,CAAC,CAAC,QAAD,CAD1D;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,mBAAhB;AAAoC,QAAA,IAAI,EAAC,QAAzC;AAAkD,QAAA,KAAK,EAAE;AAAEoD,UAAAA,MAAM,EAAE,KAAV;AAAiBC,UAAAA,KAAK,EAAE;AAAxB,SAAzD;AAAA,gCAA4F;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAA5F,EACK,GADL,EACUrD,CAAC,CAAC,OAAD,CADX;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,IAAI,EAAC,QAA/B;AAAwC,QAAA,KAAK,EAAE;AAAEoD,UAAAA,MAAM,EAAE;AAAV,SAA/C;AAAA,gCAAkE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAAlE,EACK,GADL,EACUpD,CAAC,CAAC,MAAD,CADX;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAxDJ;AAAA,kBADJ;AAuEH,CA/ND;;GAAMhB,gB;UAmCkB3B,c,EAchBqB,a;;;KAjDFM,gB;AAiON,eAAeA,gBAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Container,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Select from 'react-select'\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\n\r\nimport FormContainerQuoter from './FormContainerQuoter'\r\nimport FormQuoterTypeNatural from './FormQuoterTypeNatural';\r\nimport FormDataQuoter from './FormDataQuoter';\r\nimport FormCommonFields from './FormCommonFields';\r\nimport TableResultQuoter from './TableResultQuoter';\r\nimport quoterCompuesto from \"./dummy/quoterCompuesto\";\r\nimport { BackendServices, CoreServices } from \"../../../services\";\r\nimport Currency from '../../../helpers/currency';\r\nimport checkNumber from '../../../helpers/checkNumber'\r\nimport { useFormQuoter } from './Hooks/useFormQuoter';\r\nimport { FormData } from './FormData';\r\n\r\nconst currencyValidation = new Currency()\r\nconst services = new BackendServices()\r\n\r\nconst validationsForm = (form) => { }\r\n\r\nconst FormQuoterScreen = (props) => {\r\n    const { dataPrefillClient } = props\r\n    const initialForm = {\r\n        // // common fields\r\n        // personType: \"Natural\",\r\n        // idType: \"\",\r\n        // idnumber: \"\",\r\n        // // client data\r\n        // firstname: \"\",\r\n        // name: \"\",\r\n        // secondname: \"\",\r\n        // firstlastname: \"\",\r\n        // secondlastname: \"\",\r\n        // birthDate: \"\",\r\n        // nationality: \"\",\r\n        // phoneNumber: \"\",\r\n        // email: \"\",\r\n        // // quoter data\r\n        loanType: \"compuesto\",\r\n        amountDebt: 0,\r\n        anualRate: 0,\r\n        effectiveRate: 0,\r\n        paymentPeriod: 1,\r\n        definedPayment: \"No\",\r\n        customerDefinedPayment: 0,\r\n        term: 0,\r\n        feciPercentage: \"No\",\r\n        feciRate: 0,\r\n        gracePeriodType: \"NA\",\r\n        gracePeriod: 0,\r\n        // banking: \"\",\r\n        // legalExpenses: 0,\r\n        // financialTrust: 0,\r\n    }\r\n    // hooks\r\n    const { t, i18n } = useTranslation();\r\n    // custom hooks\r\n    const [form, setForm] = useState(initialForm)\r\n    const [disableSelect, setDisableSelect] = useState(true)\r\n    const [disableDefinedFee, setDisableDefinedFee] = useState(true)\r\n    const [disableTerm, setDisableTerm] = useState(false)\r\n    const [disableSelectSpecialFee, setDisableSelectSpecialFee] = useState(true)\r\n    const [disableSelectGracePeriod, setDisableSelectGracePeriod] = useState(true)\r\n    const [typePerson, setTypePerson] = useState(\"Natural\")\r\n    const [paymentPlan, setPaymentPlan] = useState([])\r\n    const [loader, setLoader] = useState(false)\r\n    const {\r\n        response,\r\n        loading,\r\n    } = useFormQuoter()\r\n\r\n    // handlers\r\n    const handleChange = (evt, propertyName) => {\r\n\r\n        const name = evt?.target\r\n            ? evt.target.name\r\n            : propertyName.name\r\n\r\n        const value = evt?.target\r\n            ? evt.target.value\r\n            : evt.value\r\n\r\n        if (propertyName?.name) {\r\n            console.info(\"Here\")\r\n            handleSelect(propertyName.name, value)\r\n        }\r\n\r\n        setForm({\r\n            ...form,\r\n            [name]: value\r\n        })\r\n\r\n    }\r\n\r\n    const handleSelect = (propertyName, value) => {\r\n        switch (propertyName) {\r\n            case 'feciPercentage':\r\n                const disableFeci = value == \"Si\"\r\n                    ? false\r\n                    : true\r\n                setDisableSelect(disableFeci)\r\n                return\r\n            case 'personType':\r\n                const type = value == \"Natural\"\r\n                    ? \"Natural\"\r\n                    : \"Juridica\"\r\n                setTypePerson(type)\r\n                return\r\n            case 'definedPayment':\r\n                const definedFee = value == \"Si\"\r\n                    ? false\r\n                    : true\r\n                setDisableDefinedFee(definedFee)\r\n                setDisableTerm(!definedFee)\r\n                return\r\n            case 'specialFee':\r\n                const disableSpecialFee = value == \"Si\"\r\n                    ? false\r\n                    : true\r\n                setDisableSelectSpecialFee(disableSpecialFee)\r\n                return\r\n            case 'gracePeriodType':\r\n                const disableGracePeriod = value == \"p\"\r\n                    ? false\r\n                    : true\r\n                setDisableSelectGracePeriod(disableGracePeriod)\r\n                return\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const hdlOnKeyUpRealNumber = (e) => {\r\n        let input = currencyValidation.getRealValue(e.target.value)\r\n        e.target.value = currencyValidation.format(input)\r\n        console.info(\"real number:\", input)\r\n    }\r\n\r\n    const hdlOnKeyUpPercentageNumber = (e) => {\r\n        let input = currencyValidation.getRealPercent(e.target.value)\r\n        e.target.value = currencyValidation.formatPercent(input)\r\n        console.info(\"percentage number:\", input)\r\n    }\r\n\r\n    const handleFormSubmit = async () => {\r\n        console.group(\"Handle form submit!\")\r\n        console.log(\"data submitted\", form)\r\n        console.groupEnd()\r\n\r\n        setLoader(true)\r\n        await services.getQuoterPaymentPlan(\r\n            form.loanType,\r\n            form.amountDebt,\r\n            form.anualRate,\r\n            form.feciRate,\r\n            form.term,\r\n            form.paymentPeriod,\r\n            form.gracePeriod,\r\n            form.gracePeriodType,\r\n            form.customerDefinedPayment\r\n        )\r\n            .then(resp => {\r\n                setLoader(false)\r\n                console.info(\"response service\", resp)\r\n                // setPaymentPlan(dataPaymentPlan.payments)\r\n                setPaymentPlan(resp.payments)\r\n                // setForm(initialForm)\r\n                // console.info(\"data payment plan\", dataPaymentPlan.payments)    \r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <FormContainerQuoter>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>\r\n                            {t(\"ClientData\")}\r\n                        </Card.Title>\r\n                        <Row>\r\n                            <FormCommonFields\r\n                                form={form}\r\n                                typePerson={typePerson}\r\n                                dataPrefillClient={dataPrefillClient}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Row>\r\n                        <Row>\r\n                            <FormDataQuoter\r\n                                onChange={handleChange}\r\n                                hdlOnKeyUpRealNumber={hdlOnKeyUpRealNumber}\r\n                                hdlOnKeyUpPercentageNumber={hdlOnKeyUpPercentageNumber}\r\n                                form={form}\r\n                                disableSelect={disableSelect}\r\n                                disableDefinedFee={disableDefinedFee}\r\n                                disableTerm={disableTerm}\r\n                                disableSelectSpecialFee={disableSelectSpecialFee}\r\n                                disableGracePeriod={disableSelectGracePeriod}\r\n                            />\r\n                        </Row>\r\n                        <Row >\r\n                            <Col className='d-grid mt-5'>\r\n                                <Button\r\n                                    size='lg'\r\n                                    className='float-end'\r\n                                    type='submit'\r\n                                // onClick={handleFormSubmit}\r\n                                >\r\n                                    {t(\"Calculate\")}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <LoadingOverlay\r\n                            active={loader}\r\n                            spinner={true}\r\n                            text={t(\"Calculating payment plan\")}\r\n                        >\r\n                        </LoadingOverlay>\r\n                    </Card.Body>\r\n                </Card>\r\n            </FormContainerQuoter> */}\r\n            <FormData\r\n                clientExist={dataPrefillClient}\r\n                // onChange={handleChange}\r\n            />\r\n            {/* <TableResultQuoter\r\n                paymentPlan={paymentPlan}\r\n            /> */}\r\n            <div style={{ textAlign: \"right\" }}>\r\n                <Button variant=\"danger\" style={{ margin: '5px 0px' }} type=\"button\">\r\n                    <i className=\"mdi mdi mdi-cancel mid-12px\"></i>{\" \"}{t(\"Cancel\")}\r\n                </Button>\r\n                <Button variant=\"outline-secondary\" type=\"button\" style={{ margin: '5px', color: \"black\" }}><i className=\"mdi mdi-printer mdi-12px\"></i>\r\n                    {\" \"}{t(\"Print\")}\r\n                </Button>\r\n                <Button variant=\"success\" type=\"submit\" style={{ margin: '5px' }}><i className=\"mdi mdi-content-save mdi-12px\"></i>\r\n                    {\" \"}{t(\"Save\")}\r\n                </Button>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormQuoterScreen"]},"metadata":{},"sourceType":"module"}