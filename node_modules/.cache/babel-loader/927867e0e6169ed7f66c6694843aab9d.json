{"ast":null,"code":"import { WatchListModel, DocumentModel, ClientInfoModel, PartiesStaffModel } from \"../../models/Core\";\nimport ApiServiceCore from \"../ApiServiceCore\";\nimport * as url from \"../../helpers/url_helper\";\nimport qs from \"qs\";\nimport { ACT_FACILIDADACTIVOSFIJOS } from \"../../helpers/options_helper\";\nimport * as OPTs from \"../../helpers/options_helper\";\nimport { ResponseModel } from '../../models/Common/ResponseModel';\nimport moment from \"moment\";\nimport { part } from \"core-js/core/function\";\nimport { GetMontNumberByName, GetMontNameByNumber } from '../../helpers/commons';\nimport { ResourceStore } from \"i18next\";\nimport Currency from \"../../helpers/currency\";\nimport { convertToUpperCasesData } from '../../helpers/commons';\nimport { BackendServices } from \"../../services\";\nimport errorDispacherHelper from \"../../helpers/errorDispacherHelper\";\nexport default class Services extends ApiServiceCore {\n  constructor(...args) {\n    super(...args);\n    this.backendServices = new BackendServices();\n  }\n\n  //analysis/customers -> retorna la info de lista de vigilancia\n  //ConsultarListaCriterioCORE    \n  async postWhatchList(params) {\n    try {\n      /*\r\n      {\r\n      \"pCustomerId\": \"06--00711-002304\",\r\n      \"pTypeId\": \"CEDULA_IDENTIDAD\",\r\n      \"pModelId\": \"LISTA_VIGILANCIA\",\r\n      \"pCustomerListParams\": {\r\n      \"KeyValueParam\": [\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"NOMBRE\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Librada\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_NOMBRE\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Emilio\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"PRIMER_APELLIDO\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Rivera\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_APELLIDO\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Gaviria\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"TIPO_ID\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"CEDULA_IDENTIDAD\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"CEDULA\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"06--00711-002304\"\r\n        }\r\n      ]\r\n      },\r\n      \"pUser\": \"wallytech_ws_user\",\r\n      \"pWaitingInterval\": 180000000,\r\n      \"pPriority\": 1\r\n      }\r\n      */\n      var result = await this.post(url.URL_CORE_WATCHLIST, params);\n      return {\n        status: 200,\n        result: WatchListModel.fromJson(result).results\n      };\n    } catch (err) {\n      return {\n        status: err.response.status,\n        error: err.response.data\n      }; //errorMessage, //errorCode\n    }\n  } //documents -> salva documento en gestor documental ONBASE\n  //GuardarDocumentoECM\n\n\n  async postDocument(data) {\n    var config = {\n      headers: {\n        //\"Accept\":\"*/*\",\n        //\"Accept-Encoding\":\"gzip, deflate, sdch, br\",\n        //\"Accept-Language\":\"fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4\",\n        //\"Access-Control-Request-Headers\":\"accept, content-type\",\n        //\"Content-Type\":\"text/plain\",\n        //\"Content-Length\":JSON.stringify(data).length.toString(),\n        //\"Host\":\"https://qa.api.ob.banesco.com.pa/\",\n        //Connection: \"keep-alive\",\n        //\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n        \"userId\": \"mq3898\",\n        //Usuario\n        \"clientDt\": \"clientDt\",\n        //\"Fecha de ejecuciÃ³n del cliente.\"\n        \"appName\": \"ReactJs\",\n        //\"Aplicacion que consume el servicio\"\n        \"requestId\": \"202112202\",\n        //\"Identificador de la solicitud.\"\n        \"channelId\": \"channelID\" //\"Canal consumidor\",                \n\n      }\n    };\n    var result = await this.post(url.URL_CORE_DOCUMENTS, data, config);\n    console.log(\"Result Document: \", result);\n    /*\r\n    var result = {\r\n        \"Status\": {\r\n            \"StatusCode\": \"M0000\",\r\n            \"StatusDesc\": \"OK\"\r\n        },\r\n        \"Token\": \"e793-ddb2-ab0e-6626-5d3e-5f19-b79b-1f5d\",\r\n        \"Result\": {\r\n            \"DocName\": \"TDC - Contrato de TDC  (98765432)\",\r\n            \"DocumentID\": \"34589873\",\r\n            \"FormType\": \"HTML\"\r\n        }\r\n    }\r\n    */\n    //console.log(result);\n\n    if (result.Status.StatusCode === \"M0000\") {\n      var dataresult = {\n        docName: result.Result['DocName'],\n        documentId: result.Result['DocumentID'],\n        formType: result.Result['FormType']\n      };\n      return dataresult;\n    }\n\n    return undefined;\n  } //documents -> Ver documento en gestor documental ONBASE\n  //VerDocumentoECM\n\n\n  async postViewDocument(docId) {\n    try {\n      console.log(docId);\n      var data = {\n        DocumentHandle: docId,\n        ReturnBase64: false\n      };\n      var result = await this.post(url.URL_CORE_DOCUMENTSVIEW, data);\n      console.log(\"Result Document: \", result);\n      return result.Documents[0].DocPop;\n    } catch (e) {}\n\n    return null;\n  } //v1/parties/information -> retorna la info del cliente\n  //BuscarClienteCORE\n\n\n  async getPartiesInformation(params) {\n    /*var item =[ {id:800120843,clientnumber:800120843,clientname:\"Israel Michel Gomez Alfonso\",firstname:\"Israel\",secondname:\"Michel\",\r\n    lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"CED\",idnumber:\"456123\"},\r\n    {id:800120845,clientnumber:800120845,clientname:\"Pancho Pedro Gomez Alfonso\",firstname:\"Pancho\",secondname:\"Pedro\",\r\n    lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"RUC\",idnumber:\"456456\"}];\r\n    return item;*/\n    //params = {PartyType:Juridico,PartyId:600088018}\n    var data = qs.stringify(params);\n    console.log(data); //url.URL_CORSBYPASS +\n\n    var result = await this.get(url.URL_CORE_PARTIEINFO + \"?\" + data);\n    console.log(result);\n\n    if (result.Status.StatusCode === \"M0000\") {\n      return ClientInfoModel.fromJson(result);\n    } else {\n      result[\"error\"] = \"Error de Servicio del Core\"; //result.Status.StatusDesc;\n\n      result[\"errorCode\"] = result.Status.StatusCode;\n      return result;\n    }\n  }\n\n  async getPartiesInformationExtra(typePerson, customerNumberT24) {\n    try {\n      var params = {\n        PartyType: Number(typePerson) === 1 ? \"Natural\" : \"Juridico\",\n        PartyId: customerNumberT24\n      };\n      var result = await this.getPartiesInformation(params);\n\n      if (result !== undefined && result.length > 0) {\n        var _data$address$Country, _data$address, _data$address$Country2, _data$address$Provinc, _data$address2, _data$address2$Provin, _data$address$CountyD, _data$address3, _data$address3$County, _data$address$Jurisdi, _data$address4, _data$address4$Jurisd, _data$address$City$De, _data$address5, _data$address5$City, _data$address$AddrDes, _data$address6, _data$address$Buildin, _data$address7, _data$address7$Buildi, _data$address$HouseNu, _data$address8, _data$address$Street, _data$address9;\n\n        var data = result[0];\n        console.log(\"getPartiesInformationExtra\", data);\n        var extraInfo = {\n          activity: {\n            \"EconomicActivity\": data[\"economicActivity\"]\n          },\n          address: {\n            \"Country\": (_data$address$Country = (_data$address = data[\"address\"]) === null || _data$address === void 0 ? void 0 : (_data$address$Country2 = _data$address.Country) === null || _data$address$Country2 === void 0 ? void 0 : _data$address$Country2.CountryCode) !== null && _data$address$Country !== void 0 ? _data$address$Country : \"\",\n            \"Province\": (_data$address$Provinc = (_data$address2 = data[\"address\"]) === null || _data$address2 === void 0 ? void 0 : (_data$address2$Provin = _data$address2.Province) === null || _data$address2$Provin === void 0 ? void 0 : _data$address2$Provin.Cod) !== null && _data$address$Provinc !== void 0 ? _data$address$Provinc : \"\",\n            \"CountyDistrict\": (_data$address$CountyD = (_data$address3 = data[\"address\"]) === null || _data$address3 === void 0 ? void 0 : (_data$address3$County = _data$address3.CountyDistrict) === null || _data$address3$County === void 0 ? void 0 : _data$address3$County.Cod) !== null && _data$address$CountyD !== void 0 ? _data$address$CountyD : \"\",\n            \"Jurisdiction\": (_data$address$Jurisdi = (_data$address4 = data[\"address\"]) === null || _data$address4 === void 0 ? void 0 : (_data$address4$Jurisd = _data$address4.Jurisdiction) === null || _data$address4$Jurisd === void 0 ? void 0 : _data$address4$Jurisd.Cod) !== null && _data$address$Jurisdi !== void 0 ? _data$address$Jurisdi : \"\",\n            \"City\": (_data$address$City$De = (_data$address5 = data[\"address\"]) === null || _data$address5 === void 0 ? void 0 : (_data$address5$City = _data$address5.City) === null || _data$address5$City === void 0 ? void 0 : _data$address5$City.Desc) !== null && _data$address$City$De !== void 0 ? _data$address$City$De : \"\",\n            \"AddrDesc\": (_data$address$AddrDes = (_data$address6 = data[\"address\"]) === null || _data$address6 === void 0 ? void 0 : _data$address6.AddrDesc) !== null && _data$address$AddrDes !== void 0 ? _data$address$AddrDes : \"\",\n            \"Building\": (_data$address$Buildin = (_data$address7 = data[\"address\"]) === null || _data$address7 === void 0 ? void 0 : (_data$address7$Buildi = _data$address7.Building) === null || _data$address7$Buildi === void 0 ? void 0 : _data$address7$Buildi.Desc) !== null && _data$address$Buildin !== void 0 ? _data$address$Buildin : \"\",\n            \"HouseNumber\": (_data$address$HouseNu = (_data$address8 = data[\"address\"]) === null || _data$address8 === void 0 ? void 0 : _data$address8.HouseNumber) !== null && _data$address$HouseNu !== void 0 ? _data$address$HouseNu : \"\",\n            \"Street\": (_data$address$Street = (_data$address9 = data[\"address\"]) === null || _data$address9 === void 0 ? void 0 : _data$address9.Street) !== null && _data$address$Street !== void 0 ? _data$address$Street : \"\"\n          },\n          \"PhoneNumber\": data[\"phoneNumber\"],\n          \"Email\": data[\"email\"]\n        };\n        return extraInfo;\n      }\n    } catch (err) {}\n\n    return undefined;\n  } //Accionistas\n\n\n  async getPartiesStaff(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    var params = {\n      PartyId: PartyId\n    }; //{PartyId:600235373}\n\n    params = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_PARTIESTAFF + \"?\" + params);\n    return PartiesStaffModel.fromJson(result);\n  } ///v1/parties/staff\n\n\n  async putPartiesStaff(data) {\n    var result = await this.put(url.URL_CORE_PARTIESTAFF, data);\n    return PartiesStaffModel.fromJson(result);\n  } //ConsultarListaEmpresasRelacionadas\n\n\n  async getCompaniesRelations(params) {\n    //params = {PartyId:600012387}\n    var data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\n    return PartiesStaffModel.fromJson(result);\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                       Api para obtener todos los paises desde el catalogo                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPaisesCatalogo() {\n    try {\n      // var result = sessionStorage.getItem('catPaises');\n      // if (result !== undefined && result !== null) {\n      //     result = JSON.parse(result)\n      //     await convertToUpperCasesData(result)\n      //     return result;\n      // }\n      //sessionStorage.setItem('catPaises', JSON.stringify(result.roles));\n      let params = {\n        catalog_name: 'PAIS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      sessionStorage.setItem('catPaises', JSON.stringify(result.catalog));\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*       Api para obtener las provincias de un pais, pasandole como parametro el id del pais      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getProvinciasCatalogo(pais) {\n    try {\n      let params = {\n        catalog_name: 'PROVINCIA',\n        parent_catalog_name: pais,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*    API para obtener los distrito de cada provincia pasandole como parametro el id provincia    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getDistritoCatalogo(provincia) {\n    try {\n      let params = {\n        catalog_name: 'DISTRITO',\n        parent_catalog_name: provincia,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                      Api para obtener los corregimientos de cada distrito                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCorregimientoCatalogo(distrito) {\n    try {\n      let params = {\n        catalog_name: 'CORREGIMIENTO',\n        parent_catalog_name: distrito,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                         Api para obtener las ciudades de cada provincia                        */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCiudadCatalogo(provincia) {\n    try {\n      let params = {\n        catalog_name: 'CIUDAD',\n        parent_catalog_name: provincia,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                      Api para obtener el grupo economico de los catalogos                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getGrupoEconomicoCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'GRUPO ECONOMICO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      result.catalog.Records.unshift({\n        Description: \"N/A\",\n        Code: \"N/A\"\n      });\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                   Api para obtener las bancas esta api proviene de catalogos                   */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getBancaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'BANCA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                   Api muestra todos los cargos que retorna desde el catalogo                   */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCargosCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'CARGO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     Api retorna todos los bancos exitentes para el catalogo                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getBancosCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'BANCOS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getActividadEconomicaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'ACTIVIDAD ECONOMICA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSubActividadEconomicaCatalogo(codeActividad) {\n    try {\n      let params = {\n        catalog_name: 'SUB ACTIVIDAD ECONOMICA',\n        parent_catalog_name: codeActividad,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO DE SECTOR ECONOMICO                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSectorEconomicoCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'SECTOR ECONOMICO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO RELACION                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getRelacionCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'RELACION',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO TIPO DE GARANTIA                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getTipoGarantiaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'TIPO DE GARANTIA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n\n  async getSubTipoGarantiaCatalogo(codGarantia) {\n    try {\n      let params = {\n        catalog_name: 'SUB TIPO GARANTIA',\n        parent_catalog_name: codGarantia,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /*\r\n  \"catalog\": {\r\n      \"type\": \"TIPO DE GARANTIA\",\r\n      \"records\": [\r\n          {\r\n              \"CODIGO\": \"100\",\r\n              \"DESCRIPCION\": \"Garantia Hipotecaria Mueble\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"200\",\r\n              \"DESCRIPCION\": \"Garantia Hipotecaria Inmueble\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"300\",\r\n              \"DESCRIPCION\": \"Depositos Pignorados en el Banco\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"400\",\r\n              \"DESCRIPCION\": \"Depositos Pignorados en Otros Banco\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"500\",\r\n              \"DESCRIPCION\": \"Garantia Prendaria\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"600\",\r\n              \"DESCRIPCION\": \"Otras Garantias\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"700\",\r\n              \"DESCRIPCION\": \"SIN GARANTIAS\"\r\n          }\r\n      ]\r\n  }\r\n  */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO MONEDAS                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getMonedaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'MONEDA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                       Api para obtener todos las sucursales o agencias catalogo                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSucursalesCatalogo() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SUCURSAL',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Tipo de Limites de Credito\n\n\n  async getTypeOfCreditLimitsCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'LIMIT REFERENCE',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Aseguradoras\n\n\n  async getInsurersCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'ASEGURADORAS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Marcas de Auto\n\n\n  async getCarBrandCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'MARCA DE AUTOS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Modelos de Auto\n\n\n  async getCarModelCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'MODELO DE AUTO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Corredoras\n\n\n  async getBrokersCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'BROKER',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Fiduciaria\n\n\n  async getTrusteeCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'FIDUCIARIAS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Producto\n\n\n  async getProductCatalog() {\n    try {\n      // return json;\n\n      /*let params = {\r\n          catalog_name: 'SUBPRODUCTO',\r\n          parent_catalog_name: \"3200\",\r\n          keyword: \"\"\r\n      }\r\n      let data = qs.stringify(params);\r\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n      await convertToUpperCasesData(result.catalog)\r\n      */\n      var result = {\n        \"catalog\": {\n          \"type\": \"TIPO DE PRODUCTO\",\n          \"records\": [{\n            \"CODIGO\": \"3200\",\n            \"DESCRIPCION\": \"Comercial\"\n          }]\n        }\n      };\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - SubProducto\n\n\n  async getSubProductCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SUBPRODUCTO',\n        parent_catalog_name: \"3200\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Categorias\n\n\n  async getCategoriesCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'CATEGORIA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Tipo de poliza\n\n\n  async getPolicyTypeCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'TIPO POLIZA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Sub tipo de Garantia\n\n\n  async getSubTypeWarrantyCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SUB TIPO GARANTIA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Clases de Auto\n\n\n  async getAutoClassCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'CLASE AUTO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Avaluadora\n\n\n  async getAppraiserCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'AVALUADORA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Tipo de Desembolso\n\n\n  async getTipoDesembolsoCatalogo() {\n    try {\n      /*let params = {\r\n          catalog_name: 'CIUDAD',\r\n          parent_catalog_name: provincia,\r\n          keyword: \"\"\r\n      }\r\n      let data = qs.stringify(params);\r\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n      await convertToUpperCasesData(result.catalog)*/\n      var result = {\n        \"catalog\": {\n          \"type\": \"Tipo Desembolso\",\n          \"records\": [{\n            \"CODIGO\": \"100\",\n            \"DESCRIPCION\": \"Bajo Linea\"\n          }, {\n            \"CODIGO\": \"200\",\n            \"DESCRIPCION\": \"Comercial\"\n          }]\n        }\n      };\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Fuentes de Ventas\n\n\n  async getSourceSalesCatalogo() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SALE INFORMATION',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Autonomias\n\n\n  async getAutonomiaCatalogo() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'AUTONOMIAS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Authority\n\n\n  async getAuthorityTypeCatalogo() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'AUTH TYPE',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      await convertToUpperCasesData(result.catalog);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /*------------------------------------------------------------------------------------*/\n  ///v1/loans/details/informations\n  //Retorna las facilidades de un cliente ... partyId -> numero del cliente en T24\n  //getFacilidades\n\n\n  async getFacilitiesByTransaction(transactId) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = [];\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getFacilities(debtors[i].customerNumberT24);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            dataResult.forEach(function (item) {\n              item[\"debtorName\"] = debtors[i].typePerson === \"2\" ? debtors[i].name : debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2;\n              item[\"debtorId\"] = debtors[i].personId;\n              result.push(item);\n            });\n          }\n        } catch (err) {}\n\n        try {\n          var dataResult = await this.getCreditCard(debtors[i].customerNumberT24);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            dataResult.forEach(function (item) {\n              item[\"debtorName\"] = debtors[i].typePerson === \"2\" ? debtors[i].name : debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2;\n              item[\"debtorId\"] = debtors[i].personId;\n              result.push(item);\n            });\n          }\n        } catch (err) {}\n      }\n\n      console.log(\"getAllTermDebtsByTransaction\", result);\n      return result;\n    }\n\n    return undefined;\n  }\n\n  async getFacilities(partyId) {\n    try {\n      const currencyData = new Currency();\n\n      if (partyId.length <= 0) {\n        return undefined;\n      }\n\n      var dataResult = []; ////// Credit - Cortos Plazos\n\n      try {\n        var params = {\n          PartyId: partyId\n        };\n        var data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \n        //servicio retorna las cuentas del cliente\n\n        var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data); //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\n\n        if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\n          result.Party.PartyInfo.CreditLine.forEach(item => {\n            try {\n              /*\r\n              {\r\n              \"AvailableAmt\": {\r\n              \"Amt\": \"75,000.00\"\r\n              },\r\n              \"CreditLineId\": \"800048231.0010000.01\",\r\n              \"CreditLineNum\": \"01\",\r\n              \"CreditType\": {\r\n              \"Desc\": \"LÃ­mite Global - rotativo\"\r\n              },\r\n              \"CurCode\": \"USD\",\r\n              \"IntRateType\": {\r\n              \"Desc\": \"Fixed\"\r\n              },\r\n              \"OnlineAmt\": {\r\n              \"Amt\": \"125000.00\"\r\n              },\r\n              \"PendingAmt\": {\r\n              \"Amt\": \"50,000.00\"\r\n              },\r\n              \"Rating\": \"01\",\r\n              \"SecuredAmt\": {\r\n              \"Amt\": \"0.00\"\r\n              }\r\n              }\r\n              */\n              if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n                //item.AvailableAmt.Amt\n                var deudas = {\n                  debtype: \"short\",\n                  facilityType: item.CreditType.Desc,\n                  bank: \"Banesco\",\n                  balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                  approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                  variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                  startDate: moment().format(\"YYYY-MM-DD\"),\n                  endDate: moment().format(\"YYYY-MM-DD\")\n                }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n                dataResult.push({\n                  \"facilityType\": deudas.facilityType,\n                  \"approvedAmount\": deudas.approved,\n                  \"approvedDate\": deudas.startDate,\n                  \"actualBalance\": deudas.variation,\n                  \"debtorName\": \"\",\n                  \"AcctId\": \"\"\n                });\n              }\n            } catch (err) {}\n          });\n        } else {\n          // myVarToTest is not an array\n          //Armamos la data a mostrar en pantalla\n          var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n          try {\n            if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n              var deudas = {\n                debtype: \"short\",\n                facilityType: item.CreditType.Desc,\n                bank: \"Banesco\",\n                balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                startDate: moment().format(\"YYYY-MM-DD\"),\n                endDate: moment().format(\"YYYY-MM-DD\")\n              }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n              dataResult.push({\n                \"facilityType\": deudas.facilityType,\n                \"approvedAmount\": deudas.approved,\n                \"approvedDate\": deudas.startDate,\n                \"actualBalance\": deudas.balance,\n                \"debtorName\": \"\",\n                \"AcctId\": \"\"\n              });\n            }\n          } catch (err) {}\n        }\n      } catch (err) {} ////// loands - Cortos y Largos Plazos\n\n\n      try {\n        let params = {\n          PartyId: partyId\n        };\n        let data = qs.stringify(params);\n        var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\n\n        if (Array.isArray(result.AcctLoans.AcctLoan)) {\n          result.AcctLoans.AcctLoan.forEach(item => {\n            if (item.AcctKey !== null) {\n              try {\n                /*\r\n                {\r\n                \"Category\": \"01\",\r\n                \"Desc\": \"340000071156\",\r\n                \"ProductDesc\": \"Prestamo Comercia\",\r\n                \"AcctOpeningInfo\": {\r\n                \"InitialAmt\": {\r\n                \"Amt\": \"120000.00\",\r\n                \"CurCode\": \"USD\"\r\n                },\r\n                \"OpenDt\": \"2019-08-02\"\r\n                },\r\n                \"CreditAcctData\": {\r\n                \"DueDt\": \"2028-07-05\",\r\n                \"CreditAcctPmtInfo\": null\r\n                },\r\n                \"AcctKey\": {\r\n                \"AcctId\": \"1020243542\"\r\n                },\r\n                \"AcctBal\": [\r\n                {\r\n                \"BalType\": \"Balance\",\r\n                \"CurAmt\": {\r\n                    \"Amt\": \"87245.92\"\r\n                }\r\n                }\r\n                ],\r\n                \"AcctMember\": [\r\n                {\r\n                \"PartyRole\": {\r\n                    \"Cod\": \"TITULAR/DEUDOR\"\r\n                },\r\n                \"PartyName\": {\r\n                    \"ShortName\": \"ASI DEVELOPMENT\"\r\n                },\r\n                \"PartyKey\": null\r\n                }\r\n                ]\r\n                }\r\n                */\n                var deudas = {\n                  debtype: \"short\",\n                  facilityType: item.ProductDesc,\n                  bank: \"Banesco\",\n                  balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n                  approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n                  variation: 0,\n                  startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n                  endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n                };\n                deudas.variation = deudas.approved - deudas.balance;\n                dataResult.push({\n                  \"facilityType\": deudas.facilityType,\n                  \"approvedAmount\": deudas.approved,\n                  \"approvedDate\": deudas.startDate,\n                  \"actualBalance\": deudas.balance,\n                  \"debtorName\": \"\",\n                  \"AcctId\": item.AcctKey.AcctId\n                });\n              } catch (err) {}\n            }\n          });\n        } else {\n          // myVarToTest is not an array\n          //Armamos la data a mostrar en pantalla\n          var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n          if (item.AcctKey !== null) {\n            try {\n              var deudas = {\n                debtype: \"short\",\n                facilityType: item.ProductDesc,\n                bank: \"Banesco\",\n                balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n                approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n                variation: 0,\n                startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n                endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n              };\n              deudas.variation = deudas.approved - deudas.balance;\n              dataResult.push({\n                \"facilityType\": deudas.facilityType,\n                \"approvedAmount\": deudas.approved,\n                \"approvedDate\": deudas.startDate,\n                \"actualBalance\": deudas.balance,\n                \"debtorName\": \"\",\n                \"AcctId\": item.AcctKey.AcctId\n              });\n            } catch (err) {}\n          }\n        }\n      } catch (err) {}\n\n      console.log(\"getFacilities\", dataResult);\n      return dataResult;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  } //retorna los Clientes Relacionados se le pasa el Numero de Cliente de T24\n\n\n  async getRelatedClients(partyId) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params);\n    var dataResult = [];\n\n    try {\n      //servicio retorna clientes relacionados\n      var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\n\n      if (result.error !== undefined) {\n        return result;\n      } //Armamos la data a mostrar en pantalla\n\n\n      result.PartyPartyRels.PartyPartyRel.forEach(client => {\n        try {\n          var partyNumber = client.PartyPartyRelInfo.PartyRef[0].RelPartyRef[0].PartyKey[0].PartyId;\n\n          if (partyNumber !== undefined && partyNumber !== null && partyNumber.length > 0) {\n            dataResult.push(partyNumber);\n          }\n        } catch (err) {}\n      });\n    } catch (err) {}\n\n    return dataResult;\n  } //ExposicionCorporativa se le pasa el Numero de Cliente de T24\n\n\n  async getCorporateExhibition(transactId) {\n    const currencyData = new Currency();\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors === null || debtors === undefined) {\n      return undefined;\n    }\n\n    var dataResult = [];\n    var longTerm = {\n      name: \"Facilidades Largo Plazo\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var shortTerm = {\n      name: \"Facilidades Corto Plazo\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var totalTerm = {\n      name: \"Total de Facilidades\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var pledged = {\n      name: \"Monto Pignorado\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var netExposition = {\n      name: \"Exposicion Neta\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    }; ////// Credit - Cortos Plazos\n\n    for (var i = 0; i < debtors.length; i++) {\n      var partyId = debtors[i].customerNumberT24;\n\n      if (partyId.length > 0) {\n        try {\n          var params = {\n            PartyId: partyId\n          };\n          var data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \n          //servicio retorna las cuentas del cliente\n\n          var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\n\n          if (result.error !== undefined) {\n            return result;\n          } //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\n\n\n          if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\n            result.Party.PartyInfo.CreditLine.forEach(item => {\n              try {\n                /*\r\n                {\r\n                \"AvailableAmt\": {\r\n                \"Amt\": \"75,000.00\"\r\n                },\r\n                \"CreditLineId\": \"800048231.0010000.01\",\r\n                \"CreditLineNum\": \"01\",\r\n                \"CreditType\": {\r\n                \"Desc\": \"LÃ­mite Global - rotativo\"\r\n                },\r\n                \"CurCode\": \"USD\",\r\n                \"IntRateType\": {\r\n                \"Desc\": \"Fixed\"\r\n                },\r\n                \"OnlineAmt\": {\r\n                \"Amt\": \"125000.00\"\r\n                },\r\n                \"PendingAmt\": {\r\n                \"Amt\": \"50,000.00\"\r\n                },\r\n                \"Rating\": \"01\",\r\n                \"SecuredAmt\": {\r\n                \"Amt\": \"0.00\"\r\n                }\r\n                }\r\n                */\n                if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n                  var deudas = {\n                    debtype: \"short\",\n                    facilityType: item.CreditType.Desc,\n                    bank: \"Banesco\",\n                    balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                    approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                    variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                    startDate: moment().format(\"YYYY-MM-DD\"),\n                    endDate: moment().format(\"YYYY-MM-DD\")\n                  }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n                  if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                    //deudas.debtype=\"long\";     \n                    longTerm.approved += Number(deudas.approved);\n                    longTerm.balance += Number(deudas.variation);\n                  } else {\n                    shortTerm.approved += Number(deudas.approved);\n                    shortTerm.balance += Number(deudas.variation);\n                  }\n                }\n              } catch (err) {}\n            });\n          } else {\n            // myVarToTest is not an array\n            //Armamos la data a mostrar en pantalla\n            var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n            try {\n              if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n                var deudas = {\n                  debtype: \"short\",\n                  facilityType: item.CreditType.Desc,\n                  bank: \"Banesco\",\n                  balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                  approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                  variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                  startDate: moment().format(\"YYYY-MM-DD\"),\n                  endDate: moment().format(\"YYYY-MM-DD\")\n                }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n                if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                  //deudas.debtype=\"long\";     \n                  longTerm.approved += Number(deudas.approved);\n                  longTerm.balance += Number(deudas.variation);\n                } else {\n                  shortTerm.approved += Number(deudas.approved);\n                  shortTerm.balance += Number(deudas.variation);\n                }\n              }\n            } catch (err) {}\n          }\n        } catch (err) {}\n      }\n    } ////// Tarjeta de Creditos - Cortos Plazos\n\n\n    for (var i = 0; i < debtors.length; i++) {\n      try {\n        var result = await this.getCreditCard(debtors[i].customerNumberT24);\n\n        if (result.error !== undefined) {\n          return result;\n        }\n        /*{\r\n            \"facilityType\": item.CardInfo.Desc, \r\n            \"approvedAmount\": approvedAmt?.CurAmt??0,\r\n            \"approvedDate\": item.CardInfo.EndDt!==undefined?item.CardInfo.EndDt:moment().format(\"YYYY-MM-DD\"), \r\n            \"actualBalance\":  balanceAmt?.CurAmt??0,\r\n            \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n            \"AcctId\": \"\",\r\n        } */\n\n\n        result.forEach(item => {\n          shortTerm.approved += Number(item.approvedAmount);\n          shortTerm.balance += Number(item.actualBalance);\n        });\n      } catch (err) {}\n    } ////// loands - Cortos y Largos Plazos\n\n\n    for (var i = 0; i < debtors.length; i++) {\n      var partyId = debtors[i].customerNumberT24;\n\n      if (partyId.length > 0) {\n        try {\n          let params = {\n            PartyId: partyId\n          };\n          let data = qs.stringify(params);\n          var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\n\n          if (result.error !== undefined) {\n            return result;\n          }\n\n          if (Array.isArray(result.AcctLoans.AcctLoan)) {\n            result.AcctLoans.AcctLoan.forEach(item => {\n              if (item.AcctKey !== null) {\n                try {\n                  /*\r\n                  {\r\n                  \"Category\": \"01\",\r\n                  \"Desc\": \"340000071156\",\r\n                  \"ProductDesc\": \"Prestamo Comercia\",\r\n                  \"AcctOpeningInfo\": {\r\n                  \"InitialAmt\": {\r\n                  \"Amt\": \"120000.00\",\r\n                  \"CurCode\": \"USD\"\r\n                  },\r\n                  \"OpenDt\": \"2019-08-02\"\r\n                  },\r\n                  \"CreditAcctData\": {\r\n                  \"DueDt\": \"2028-07-05\",\r\n                  \"CreditAcctPmtInfo\": null\r\n                  },\r\n                  \"AcctKey\": {\r\n                  \"AcctId\": \"1020243542\"\r\n                  },\r\n                  \"AcctBal\": [\r\n                  {\r\n                  \"BalType\": \"Balance\",\r\n                  \"CurAmt\": {\r\n                      \"Amt\": \"87245.92\"\r\n                  }\r\n                  }\r\n                  ],\r\n                  \"AcctMember\": [\r\n                  {\r\n                  \"PartyRole\": {\r\n                      \"Cod\": \"TITULAR/DEUDOR\"\r\n                  },\r\n                  \"PartyName\": {\r\n                      \"ShortName\": \"ASI DEVELOPMENT\"\r\n                  },\r\n                  \"PartyKey\": null\r\n                  }\r\n                  ]\r\n                  }\r\n                  */\n                  var deudas = {\n                    debtype: \"short\",\n                    facilityType: item.ProductDesc,\n                    bank: \"Banesco\",\n                    balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n                    approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n                    variation: 0,\n                    startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n                    endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n                  };\n                  deudas.variation = deudas.approved - deudas.balance;\n\n                  if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                    //deudas.debtype=\"long\";     \n                    longTerm.approved += Number(deudas.approved);\n                    longTerm.balance += Number(deudas.balance);\n                  } else {\n                    shortTerm.approved += Number(deudas.approved);\n                    shortTerm.balance += Number(deudas.balance);\n                  }\n                } catch (err) {}\n              }\n            });\n          } else {\n            // myVarToTest is not an array\n            //Armamos la data a mostrar en pantalla\n            var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n            if (item.AcctKey !== null) {\n              try {\n                var deudas = {\n                  debtype: \"short\",\n                  facilityType: item.ProductDesc,\n                  bank: \"Banesco\",\n                  balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n                  approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n                  variation: 0,\n                  startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n                  endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n                };\n                deudas.variation = deudas.approved - deudas.balance;\n\n                if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                  //deudas.debtype=\"long\";     \n                  longTerm.approved += Number(deudas.approved);\n                  longTerm.balance += Number(deudas.balance);\n                } else {\n                  shortTerm.approved += Number(deudas.approved);\n                  shortTerm.balance += Number(deudas.balance);\n                }\n              } catch (err) {}\n            }\n          }\n        } catch (err) {}\n      }\n    }\n\n    longTerm.variation = Number(longTerm.approved) - Number(longTerm.balance);\n    shortTerm.variation = Number(shortTerm.approved) - Number(shortTerm.balance);\n    dataResult.push(longTerm);\n    dataResult.push(shortTerm);\n    totalTerm.approved = Number(shortTerm.approved) + Number(longTerm.approved);\n    totalTerm.balance = Number(shortTerm.balance) + Number(longTerm.balance);\n    totalTerm.variation = Number(totalTerm.approved) - Number(totalTerm.balance);\n    dataResult.push(totalTerm); //servicio retorna Pignorados\n\n    for (var i = 0; i < debtors.length; i++) {\n      var partyId = debtors[i].customerNumberT24;\n\n      if (partyId.length > 0) {\n        let params = {\n          PartyId: partyId\n        };\n        let data = qs.stringify(params);\n\n        try {\n          var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data);\n\n          if (result.error !== undefined) {\n            return result;\n          } //Armamos la data a mostrar en pantalla\n\n\n          result.Collaterals.CollateralInfo.map(function (item, i) {\n            if (item.AcctKey.AcctReference !== null && item.Collateral.InsuranceInfo.Status === \"CUR\") {\n              pledged.approved += Number(item.Collateral.CollateralAmt.Amt);\n              pledged.balance = pledged.approved;\n            }\n          });\n          pledged.variation = Number(pledged.approved) - Number(pledged.balance);\n        } catch (err) {\n          console.error(\"URL_CORE_PIGNORADO\", err);\n        }\n      }\n    }\n\n    dataResult.push(pledged);\n\n    if (dataResult.length > 0) {\n      netExposition.approved = Number(totalTerm.approved) - Number(pledged.approved);\n      netExposition.proposal = Number(totalTerm.proposal) - Number(pledged.proposal);\n      netExposition.variation = Number(totalTerm.variation) - Number(pledged.variation);\n      dataResult.push(netExposition);\n    }\n\n    return dataResult;\n  } //ExposicionCorporativa se le pasa el Numero de Cliente de T24\n\n\n  async getCorporateExhibitionByClients(partyId) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let clients = await this.getRelatedClients(partyId);\n\n    if (clients.error !== undefined) {\n      return clients;\n    }\n\n    var dataResult = [];\n\n    for (var i = 0; i < clients.length; i++) {\n      let result = await this.getCorporateExhibition(clients[i]);\n\n      if (result.error !== undefined) {\n        return result;\n      }\n\n      if (result !== null && result.length > 0) {\n        dataResult.push({\n          clientId: \"Cliente: \" + clients[i],\n          data: result\n        });\n      }\n    }\n\n    return dataResult;\n  } //Deudas a Corto y Largo Plazo --- APC, Credit, Loand del Tramite Completo    \n\n\n  async getAllTermDebtsByTransaction(transactId) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = {\n        longTermresult: [],\n        shortTermresult: []\n      };\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getAllTermDebts(debtors[i].customerNumberT24, debtors[i].clientDocId, debtors[i].idType);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            dataResult.longTermresult.forEach(function (item) {\n              result.longTermresult.push(item);\n            });\n            dataResult.shortTermresult.forEach(function (item) {\n              result.shortTermresult.push(item);\n            });\n          }\n        } catch (err) {}\n      }\n\n      return result;\n    }\n\n    return undefined;\n  } //Deudas a Corto y Largo Plazo --- APC, Credit, Loand\n\n\n  async getAllTermDebts(partyId, identification, idType) {\n    const currencyData = new Currency();\n\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    if (identification.length <= 0) {\n      return undefined;\n    }\n\n    var dataResult = {\n      longTermresult: [],\n      shortTermresult: []\n    }; ////// APC\n\n    try {\n      let typeofId = \"Cedula\";\n\n      switch (idType) {\n        case \"CED\":\n          {\n            typeofId = \"Cedula\";\n            break;\n          }\n\n        case \"RUC\":\n          {\n            typeofId = \"RUC\";\n            break;\n          }\n\n        case \"PAS\":\n          {\n            typeofId = \"Pasaporte\";\n            break;\n          }\n      }\n\n      var tmpidentification = \"\";\n      identification.split('-').map(str => {\n        if (str.startsWith(\"0\")) {\n          tmpidentification += str.replace(/^0+/, '') + \"-\";\n        } else {\n          tmpidentification += str + \"-\";\n        }\n      });\n\n      if (tmpidentification.startsWith(\"-\")) {\n        tmpidentification = tmpidentification.substring(1);\n      }\n\n      identification = tmpidentification.substring(0, tmpidentification.length - 1);\n      var params = {\n        \"ConsultarAPC\": {\n          \"Model\": {\n            \"EsPrueba\": 0,\n            \"ForzarBusqueda\": 0,\n            \"IdentificacionConsulta\": identification,\n            //\"8-773-1899\",\n            \"PasswordAPC\": \"Banesco19.\",\n            \"TipoCliente\": typeofId,\n            \"UltimusProcess\": 7,\n            \"UsuarioAPC\": \"WTIBANESCO001\"\n          }\n        }\n      }; //servicio retorna la info de APC del cliente\n\n      const result = await this.post(url.URL_CORE_APCINFO, params);\n\n      if (Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)) {\n        // myVatToTest is an array\n        //Armamos la data a mostrar en pantalla\n        result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\n          try {\n            if (item.dc_nom_asoc.toUpperCase().indexOf('BANESCO') < 0 && item.dc_descr_corta_rela.toUpperCase().indexOf('SERVICIOS') < 0) {\n              console.log(\"ServicioAPC\", item.dc_nom_asoc);\n              var deudas = {\n                paymentHistory: item.dc_historia,\n                debtype: \"short\",\n                facilityType: item.dc_descr_corta_rela,\n                bank: item.dc_nom_asoc,\n                balance: Number(currencyData.getRealValue(item.dc_saldo_actual)),\n                approvedAmount: Number(currencyData.getRealValue(item.dc_monto_original)),\n                variation: 0,\n                startDate: item.dc_fec_inicio_rel,\n                endDate: item.dc_fec_fin_rel\n              };\n              deudas.variation = deudas.approvedAmount - deudas.balance;\n\n              if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                deudas.debtype = \"long\";\n                dataResult.longTermresult.push(deudas);\n              } else {\n                dataResult.shortTermresult.push(deudas);\n              }\n\n              deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n              deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n            }\n          } catch (err) {}\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        try {\n          if (item.dc_nom_asoc.toUpperCase().indexOf('BANESCO') < 0 && item.dc_descr_corta_rela.toUpperCase().indexOf('SERVICIOS') < 0) {\n            var deudas = {\n              paymentHistory: item.dc_historia,\n              debtype: \"short\",\n              facilityType: item.dc_descr_corta_rela,\n              bank: item.dc_nom_asoc,\n              balance: Number(currencyData.getRealValue(item.dc_saldo_actual)),\n              approvedAmount: Number(currencyData.getRealValue(item.dc_monto_original)),\n              variation: 0,\n              startDate: item.dc_fec_inicio_rel,\n              endDate: item.dc_fec_fin_rel\n            };\n            deudas.variation = deudas.approvedAmount - deudas.balance;\n\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              deudas.debtype = \"long\";\n              dataResult.longTermresult.push(deudas);\n            } else {\n              dataResult.shortTermresult.push(deudas);\n            }\n\n            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n          }\n        } catch (err) {}\n      }\n    } catch (err) {} ////// Credit - Cortos Plazos\n\n\n    try {\n      var params = {\n        PartyId: partyId\n      };\n      var data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \n      //servicio retorna las cuentas del cliente\n\n      var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\n\n      if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\n        result.Party.PartyInfo.CreditLine.forEach(item => {\n          try {\n            /*\r\n            {\r\n            \"AvailableAmt\": {\r\n            \"Amt\": \"75,000.00\"\r\n            },\r\n            \"CreditLineId\": \"800048231.0010000.01\",\r\n            \"CreditLineNum\": \"01\",\r\n            \"CreditType\": {\r\n            \"Desc\": \"LÃ­mite Global - rotativo\"\r\n            },\r\n            \"CurCode\": \"USD\",\r\n            \"IntRateType\": {\r\n            \"Desc\": \"Fixed\"\r\n            },\r\n            \"OnlineAmt\": {\r\n            \"Amt\": \"125000.00\"\r\n            },\r\n            \"PendingAmt\": {\r\n            \"Amt\": \"50,000.00\"\r\n            },\r\n            \"Rating\": \"01\",\r\n            \"SecuredAmt\": {\r\n            \"Amt\": \"0.00\"\r\n            }\r\n            }\r\n            */\n            var deudas = {\n              paymentHistory: \"\",\n              debtype: \"short\",\n              facilityType: item.CreditType.Desc,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n              approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n              variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n              startDate: moment().format(\"YYYY-MM-DD\"),\n              endDate: moment().format(\"YYYY-MM-DD\")\n            }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n            if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n              if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                deudas.debtype = \"long\";\n                dataResult.longTermresult.push(deudas);\n              } else {\n                dataResult.shortTermresult.push(deudas);\n              }\n\n              deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n              deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n            }\n          } catch (err) {}\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        try {\n          var deudas = {\n            paymentHistory: \"\",\n            debtype: \"short\",\n            facilityType: item.CreditType.Desc,\n            bank: \"Banesco\",\n            balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n            approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n            variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n            startDate: moment().format(\"YYYY-MM-DD\"),\n            endDate: moment().format(\"YYYY-MM-DD\")\n          }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n          if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              deudas.debtype = \"long\";\n              dataResult.longTermresult.push(deudas);\n            } else {\n              dataResult.shortTermresult.push(deudas);\n            }\n\n            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n          }\n        } catch (err) {}\n      }\n    } catch (err) {} /// Tarjetas de Creditos\n\n\n    try {\n      var result = await this.getCreditCard(partyId);\n\n      if (Array.isArray(result)) {\n        /*{\r\n                                \"facilityType\": item.CardInfo.Desc, \r\n                                \"approvedAmount\": approvedAmt?.CurAmt??0,\r\n                                \"approvedDate\": item.CardInfo.EndDt!==undefined?item.CardInfo.EndDt:moment().format(\"YYYY-MM-DD\"), \r\n                                \"actualBalance\":  balanceAmt?.CurAmt??0,\r\n                                \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n                                \"AcctId\": \"\",\r\n                            } */\n        result.forEach(item => {\n          try {\n            var deudas = {\n              paymentHistory: \"\",\n              debtype: \"short\",\n              facilityType: item.facilityType,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.actualBalance)),\n              approvedAmount: Number(currencyData.getRealValue(item.approvedAmount)),\n              variation: Number(currencyData.getRealValue(0)),\n              startDate: moment().format(\"YYYY-MM-DD\"),\n              endDate: moment().format(\"YYYY-MM-DD\")\n            }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n            dataResult.shortTermresult.push(deudas);\n            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n            deudas.startDate = moment(item.approvedDate).format(\"YYYY-MM-DD\");\n          } catch (err) {}\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result;\n\n        try {\n          var deudas = {\n            paymentHistory: \"\",\n            debtype: \"short\",\n            facilityType: item.facilityType,\n            bank: \"Banesco\",\n            balance: Number(currencyData.getRealValue(item.actualBalance)),\n            approvedAmount: Number(currencyData.getRealValue(item.approvedAmount)),\n            variation: Number(currencyData.getRealValue(0)),\n            startDate: moment().format(\"YYYY-MM-DD\"),\n            endDate: moment().format(\"YYYY-MM-DD\")\n          }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n          dataResult.shortTermresult.push(deudas);\n          deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n          deudas.startDate = moment(item.approvedDate).format(\"YYYY-MM-DD\");\n        } catch (err) {}\n      }\n    } catch (err) {} ////// loands - Cortos y Largos Plazos\n\n\n    try {\n      let params = {\n        PartyId: partyId\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\n      console.log(\"shortTermresultLoands\", result);\n\n      if (Array.isArray(result.AcctLoans.AcctLoan)) {\n        result.AcctLoans.AcctLoan.forEach(item => {\n          if (item.AcctKey !== null) {\n            try {\n              /*\r\n              {\r\n              \"Category\": \"01\",\r\n              \"Desc\": \"340000071156\",\r\n              \"ProductDesc\": \"Prestamo Comercia\",\r\n              \"AcctOpeningInfo\": {\r\n              \"InitialAmt\": {\r\n              \"Amt\": \"120000.00\",\r\n              \"CurCode\": \"USD\"\r\n              },\r\n              \"OpenDt\": \"2019-08-02\"\r\n              },\r\n              \"CreditAcctData\": {\r\n              \"DueDt\": \"2028-07-05\",\r\n              \"CreditAcctPmtInfo\": null\r\n              },\r\n              \"AcctKey\": {\r\n              \"AcctId\": \"1020243542\"\r\n              },\r\n              \"AcctBal\": [\r\n              {\r\n              \"BalType\": \"Balance\",\r\n              \"CurAmt\": {\r\n                  \"Amt\": \"87245.92\"\r\n              }\r\n              }\r\n              ],\r\n              \"AcctMember\": [\r\n              {\r\n              \"PartyRole\": {\r\n                  \"Cod\": \"TITULAR/DEUDOR\"\r\n              },\r\n              \"PartyName\": {\r\n                  \"ShortName\": \"ASI DEVELOPMENT\"\r\n              },\r\n              \"PartyKey\": null\r\n              }\r\n              ]\r\n              }\r\n              */\n              var deudas = {\n                paymentHistory: \"\",\n                debtype: \"short\",\n                facilityType: item.ProductDesc,\n                bank: \"Banesco\",\n                balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n                approvedAmount: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n                variation: 0,\n                startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n                endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n              };\n              deudas.variation = deudas.approvedAmount - deudas.balance;\n\n              if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                deudas.debtype = \"long\";\n                dataResult.longTermresult.push(deudas);\n              } else {// dataResult.shortTermresult.push(deudas)                    \n              }\n\n              deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n              deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n            } catch (err) {}\n          }\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        if (item.AcctKey !== null) {\n          try {\n            var deudas = {\n              paymentHistory: \"\",\n              debtype: \"short\",\n              facilityType: item.ProductDesc,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n              approvedAmount: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n              variation: 0,\n              startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n              endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n            };\n            deudas.variation = deudas.approvedAmount - deudas.balance;\n\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              deudas.debtype = \"long\";\n              dataResult.longTermresult.push(deudas);\n            } else {//dataResult.shortTermresult.push(deudas)                    \n            }\n\n            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n          } catch (err) {}\n        }\n      }\n    } catch (err) {}\n\n    return dataResult;\n  } //Tarjetas de Credito\n\n\n  async getCreditCardByTransaction(transactId) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = [];\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getCreditCard(debtors[i].customerNumberT24);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            dataResult.forEach(function (item) {\n              result.push(item);\n            });\n          }\n        } catch (err) {}\n      }\n\n      console.log(\"getCreditCardByTransaction\", result);\n      return result;\n    }\n\n    return undefined;\n  }\n\n  async getCreditCard(partyId) {\n    const currencyData = new Currency();\n\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    var data = {\n      \"readCardTDC_Rq\": {\n        \"MsgHdr\": {\n          \"TransactionInfo\": {\n            \"MsgUID\": \"F01F1A70-30E0-4478-B95F-987D78A10037\",\n            \"ChannelId\": \"CC\",\n            \"AgencyCode\": 5808,\n            \"OrderDprt\": \"5808-001\",\n            \"TransactionDate\": moment().format(\"YYYY-MM-DD\"),\n            //\"2021-12-12\",\n            \"TransactionTime\": \"12:12:12\"\n          },\n          \"ApplicationInfo\": {\n            \"SourceApp\": \"ESB\",\n            \"Channel\": \"WAY4\"\n          }\n        },\n        \"Customer\": {\n          \"Type\": \"Personal\",\n          \"PersonInfo\": {\n            \"Type\": \"Personal\",\n            \"CustId\": partyId\n          }\n        }\n      }\n    };\n    var dataResult = []; ////// Tarjeta de Creditos\n\n    try {\n      var result = await this.post(url.URL_CORE_CreditCard, data);\n      console.log(\"shortTermresultCredit\", result);\n\n      if (Array.isArray(result.readCardTDC_Rs.Customer.Product)) {\n        result.readCardTDC_Rs.Customer.Product.forEach(item => {\n          try {\n            if (item.CardInfo.Type === \"E\" && item.CardInfo.RelationType === \"Y\" || item.CardInfo.Type === \"I\" && item.CardInfo.RelationType === \"Y\" || item.CardInfo.Type === \"Y\" && item.CardInfo.RelationType === \"Y\") {\n              var _approvedAmt$CurAmt, _balanceAmt$CurAmt;\n\n              var approvedAmt = item.Statement.StatementInfo.find(x => x.Type === \"CR_LIMIT\");\n              var balanceAmt = item.Statement.StatementInfo.find(x => x.Type === \"TOTAL_BALANCE\");\n              dataResult.push({\n                \"facilityType\": item.CardInfo.Desc,\n                \"approvedAmount\": (_approvedAmt$CurAmt = approvedAmt === null || approvedAmt === void 0 ? void 0 : approvedAmt.CurAmt) !== null && _approvedAmt$CurAmt !== void 0 ? _approvedAmt$CurAmt : 0,\n                \"approvedDate\": item.CardInfo.EndDt !== undefined ? item.CardInfo.EndDt : moment().format(\"YYYY-MM-DD\"),\n                \"actualBalance\": (_balanceAmt$CurAmt = balanceAmt === null || balanceAmt === void 0 ? void 0 : balanceAmt.CurAmt) !== null && _balanceAmt$CurAmt !== void 0 ? _balanceAmt$CurAmt : 0,\n                \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\n                \"AcctId\": \"\"\n              });\n            }\n            /* if(item.CardInfo.Desc.toUpperCase().indexOf('CREDITO') > 0){\r\n                 dataResult.push({\r\n                     \"facilityType\": item.CardInfo.Desc, \"approvedAmount\": approvedAmt?.CurAmt??0,\r\n                     \"approvedDate\": item.CardInfo.EndDt!==undefined?item.CardInfo.EndDt:moment().format(\"YYYY-MM-DD\"), \"actualBalance\":  balanceAmt?.CurAmt??0,\r\n                     \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n                     \"AcctId\": \"\",\r\n                 });   \r\n             } */\n\n          } catch (err) {\n            console.log(\"getCreditCard\", err);\n          }\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.readCardTDC_Rs.Customer.Product;\n\n        try {\n          var approvedAmt = item.Statement.StatementInfo.find(x => x.Type === \"AVAILABLE\");\n          var balanceAmt = item.Statement.StatementInfo.find(x => x.Type === \"TOTAL_BALANCE\");\n\n          if (item.CardInfo.Desc.toUpperCase().indexOf('CREDITO') > 0) {\n            var _approvedAmt$CurAmt2, _balanceAmt$CurAmt2;\n\n            dataResult.push({\n              \"facilityType\": item.CardInfo.Desc,\n              \"approvedAmount\": (_approvedAmt$CurAmt2 = approvedAmt === null || approvedAmt === void 0 ? void 0 : approvedAmt.CurAmt) !== null && _approvedAmt$CurAmt2 !== void 0 ? _approvedAmt$CurAmt2 : 0,\n              \"approvedDate\": item.CardInfo.EndDt !== undefined ? item.CardInfo.EndDt : moment().format(\"YYYY-MM-DD\"),\n              \"actualBalance\": (_balanceAmt$CurAmt2 = balanceAmt === null || balanceAmt === void 0 ? void 0 : balanceAmt.CurAmt) !== null && _balanceAmt$CurAmt2 !== void 0 ? _balanceAmt$CurAmt2 : 0,\n              \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\n              \"AcctId\": \"\"\n            });\n          }\n        } catch (err) {}\n      }\n    } catch (err) {}\n\n    return dataResult;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                                 Retorna los balances por meses                                 */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getAverages(AcctReference) {\n    if (AcctReference.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      AcctReference: AcctReference\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     Obtenemos una lista de las importaciones que se generen                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getListaImportaciones(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_IMPORTACIONES + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                 Obtenemos una lista de las exportaciones que se hayan generado                 */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getListaExportaciones(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_EXPORTACIONES + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                          Obtenemos los prestamos entrantes existentes                          */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPrestamosEntrantes(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_INGOING + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                    Obtenemos una lista de todos los presstamos que ya salen                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPrestamosSalientes(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_OUTOGOING + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*               Obtenemos la lista de creditos que existen en la actualidad activos              */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCreditosExistentes(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_CREDITOS + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                                        Creditos en linea                                       */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCreditosLine(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*     Nos devuelve todas las transacciones que ha realizado el usuario por un rango de fechas    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getTransactions(AcctId, EndDt, StartDt) {\n    if (AcctId.length <= 0 || EndDt.length <= 0 || StartDt.length <= 0) {\n      return undefined;\n    } // ejemplo del dataField\n    // AcctId=1001553287&EndDt=2021-10-16T09:32:51&StartDt=2021-09-16T00:00:00\n\n\n    let params = {\n      AcctId: AcctId,\n      EndDt: EndDt,\n      StartDt: StartDt\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                                  Obtenemos todos los prestamos                                 */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPrestamos(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_PRESTAMOS + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*               Obtenemos toda la informacion del prestamos dentro de una actividad              */\n\n  /* ---------------------------------------------------------------------------------------------- */\n  //Detalle Facilidad\n\n\n  async getFacilityInfo(AcctId) {\n    try {\n      if (AcctId.length <= 0) {\n        return null;\n      }\n\n      let params = {\n        AcctId: AcctId\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_PRESTAMOS_INFORMATION + \"?\" + data);\n      /*\r\n      {\r\n      \"AcctLoan\": {\r\n      \"AcctSubtype\": {\r\n          \"Cod\": \"3200\"\r\n      },\r\n      \"AutonomyCode\": \"0201\",\r\n      \"AutonomyUser\": \"38\",\r\n      \"Category\": \"COMMERCIAL.CHILD\",\r\n      \"ClosedDt\": \"2022-05-30\",\r\n      \"CurCode\": \"USD\",\r\n      \"FIData\": {\r\n          \"Agency\": {\r\n              \"AgencyIdent\": \"PA0010062\"\r\n          }\r\n      },\r\n      \"PrinProperty\": \"PRINCIPALINT\",\r\n      \"SubCategory\": \"1614\",\r\n      \"AcctKey\": {\r\n          \"AcctId\": \"AA19214M07G3\"\r\n      },\r\n      \"IntRateData\": {\r\n          \"IntDayBasis\": \"B\",\r\n          \"IntRate\": 6.75\r\n      },\r\n      \"AcctBal\": [\r\n          {\r\n              \"BalType\": \"FECIBalance\",\r\n              \"CurAmt\": {\r\n                  \"Amt\": \"1009.71\"\r\n              }\r\n          },\r\n          {\r\n              \"BalType\": \"PrincipalBalance\",\r\n              \"CurAmt\": {\r\n                  \"Amt\": \"44113.66\"\r\n              }\r\n          },\r\n          {\r\n              \"BalType\": \"InterestBalance\",\r\n              \"CurAmt\": {\r\n                  \"Amt\": \"6807.90\"\r\n              }\r\n          }\r\n      ],\r\n      \"CreditAcctData\": {\r\n          \"AuthType\": \"13\",\r\n          \"CodeDestination\": \"PA08\",\r\n          \"CountryDestination\": \"PA\",\r\n          \"CreditDestination\": \"LOCAL\",\r\n          \"FeciProperty\": true,\r\n          \"FundsPurpose\": \"3228\",\r\n          \"IntFeci\": 1,\r\n          \"LatePenalty\": true,\r\n          \"OriginationDt\": \"2019-08-02\",\r\n          \"RefinanceDate\": \"2021-04-29\",\r\n          \"RefinanceNum\": \"1020096515\",\r\n          \"SourceSales\": {\r\n              \"Cod\": \"16\"\r\n          },\r\n          \"Charge\": [\r\n              {\r\n                  \"ChargeType\": \"FIXED\",\r\n                  \"CurAmt\": {\r\n                      \"Amt\": \"0.00\",\r\n                      \"CurCode\": \"USD\"\r\n                  }\r\n              }\r\n          ],\r\n          \"Term\": {\r\n              \"ProposedTerm\": \"1031D\"\r\n          },\r\n          \"CreditAcctPmtInfo\": {\r\n              \"NextPmtDt\": \"2022-05-30\",\r\n              \"PmtMethod\": \"DC\"\r\n          },\r\n          \"CreditRegularPmt\": [\r\n              {\r\n                  \"PmtClass\": \"DUE DUE DUE\",\r\n                  \"PmtType\": \"INTEREST INTEREST LINEAR\"\r\n              }\r\n          ],\r\n          \"SettleInstruction\": {\r\n              \"PayIn\": {\r\n                  \"PayInAcctRef\": [\r\n                      {\r\n                          \"PayInAcct\": {\r\n                              \"AcctId\": \"1000141368\"\r\n                          }\r\n                      }\r\n                  ]\r\n              }\r\n          }\r\n      },\r\n      \"AcctOpeningInfo\": {\r\n          \"EffDt\": \"2019-08-02\",\r\n          \"InitialAmt\": {\r\n              \"Amt\": \"44113.66\"\r\n          },\r\n          \"SaleOfficer\": \"0630\"\r\n      }\r\n      },\r\n      \"Party\": {\r\n      \"PartyKey\": [\r\n          {\r\n              \"PartyId\": \"600088018\"\r\n          }\r\n      ]\r\n      },\r\n      \"Status\": {\r\n      \"StatusCode\": \"M0000\",\r\n      \"StatusDesc\": \"OK\"\r\n      }\r\n      }\r\n      */\n\n      return result === null || result === void 0 ? void 0 : result.AcctLoan;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*               Obtenemos toda la informacion del Reporting Services                            */\n\n  /* ---------------------------------------------------------------------------------------------- */\n  //https://qa.api.ob.banesco.com.pa/APIUtil/v1/reports/atoms?FECHA=20210930&CLIENTE=600167424\n\n\n  async getReportingServices(partyId) {\n    //partyId -> numero del cliente en T24\n    if (partyId === undefined || partyId === null || partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      FECHA: moment().add(-1, 'months').format(\"YYYYMM\") + \"01\",\n      //preguntar pq la fecha no se puede cambiar\n      CLIENTE: partyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_REPORTINGSERVICES + \"?\" + data);\n    return result;\n    /*{\r\n    \"records\": [\r\n    {\r\n        \"FECHA\": \"20210930\",\r\n        \"T_CREDITO\": \"002\",\r\n        \"T_FACILIDAD\": \"05\",\r\n        \"CLASIFICACION\": \"02\",\r\n        \"LOC_EXT\": \"L\",\r\n        \"REGION\": \"014\",\r\n        \"CLIENTE_RUC\": \"8-805-442\",\r\n        \"TNO_EMPRESA\": \"06\",\r\n        \"NOMBRE_CLIENTE\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n        \"GRUPO_ECON\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n        \"GRUPO_RUC\": \"8-805-442\",\r\n        \"T_RELACION\": \"P999\",\r\n        \"ACT_ECON\": \"2103\",\r\n        \"TASA_INT\": \"10.5\",\r\n        \"MONTO_IN\": 5400,\r\n        \"INT_PC\": 0,\r\n        \"FECHA_INI\": \"20150616\",\r\n        \"FECHA_FIN\": \"20230116\",\r\n        \"FECHA_REFIN\": \"NA\",\r\n        \"FECHA_RENEG\": \"20200817\",\r\n        \"G1\": \"0701\",\r\n        \"MONTO_G1\": 0,\r\n        \"G2\": \"NA\",\r\n        \"MONTO_G2\": 0,\r\n        \"G3\": \"NA\",\r\n        \"MONTO_G3\": 0,\r\n        \"G4\": \"NA\",\r\n        \"MONTO_G4\": 0,\r\n        \"G5\": \"NA\",\r\n        \"MONTO_G5\": 0,\r\n        \"PROV_REG\": 0,\r\n        \"PROV_NIIF\": 119.05,\r\n        \"PROV_PAIS\": 0,\r\n        \"SALDO\": 6401.61,\r\n        \"N_CUOTAS_VENCER\": \"7\",\r\n        \"X_VENCER30\": \"100.86\",\r\n        \"X_VENCER60\": \"100.86\",\r\n        \"X_VENCER90\": \"100.86\",\r\n        \"X_VENCER120\": \"100.86\",\r\n        \"X_VENCER180\": \"100.86\",\r\n        \"X_VENCER1A\": \"100.86\",\r\n        \"X_VENCER5A\": \"5796.45\",\r\n        \"X_VENCER10A\": \"0.00\",\r\n        \"X_VENCERM10A\": \"0.00\",\r\n        \"N_CUOTA_VENCIDAS\": \"0\",\r\n        \"VENCIDOS30\": \"0.00\",\r\n        \"VENCIDOS60\": \"0.00\",\r\n        \"VENCIDOS90\": \"0.00\",\r\n        \"VENCIDOS120\": \"0.00\",\r\n        \"VENCIDOS180\": \"0.00\",\r\n        \"VENCIDOS1A\": \"0.00\",\r\n        \"VENCIDOSM1A\": \"0.00\",\r\n        \"RANGO_MORA\": \"1. Al dÃ­a\",\r\n        \"DIAS_MORA\": 0,\r\n        \"PROX_CAP\": \"20211016\",\r\n        \"PER_CAP\": \"01\",\r\n        \"PROX_INT\": \"20211016\",\r\n        \"PER_INT\": \"01\",\r\n        \"CUOTA_XPAGAR\": \"100.86\",\r\n        \"SUCURSAL\": \"201\",\r\n        \"MONEDA\": \"USD\",\r\n        \"CUENTA_CONTABLE\": \"\",\r\n        \"PRODUCTO\": \"TDC\",\r\n        \"BANCA\": \"\",\r\n        \"SECTOR1\": \"PRESTACARD\",\r\n        \"SECTOR2\": \"\",\r\n        \"SECTOR3\": \"\",\r\n        \"SECTOR4\": \"PRESTACARD\",\r\n        \"PRODUCTO1\": \"TARJETA DE CREDITO CONSUMO\",\r\n        \"PRODUCTO2\": \"TDC\",\r\n        \"PRODUCTO3\": \"Prestacard Visa\",\r\n        \"NUM_OPS\": \"4466840182907004\",\r\n        \"NUM_CLIENTE\": \"600167424\",\r\n        \"CENTRO_COSTO\": \"\",\r\n        \"NUM_LINEA\": \"\",\r\n        \"COD_OFIC\": \"\",\r\n        \"COD_OFIC2\": \"\",\r\n        \"INGRESO\": 0,\r\n        \"SEGMENTO\": \"\",\r\n        \"TIPO_PAGO\": \"\",\r\n        \"PUNTAJE\": 0,\r\n        \"FECHA_ULT_PAGO_CAPITAL\": \"20200304\",\r\n        \"CATEGORIA_CAMBIO\": \"03\",\r\n        \"MONTO_ULT_PAGO_CAPITAL\": 69.2,\r\n        \"FECHA_ULT_PAGO_INTERES\": \"20200304\",\r\n        \"MONTO_ULT_PAGO_INTERES\": 82.8,\r\n        \"STAGE\": 2,\r\n        \"PROXIMO_CAP_HIST\": \"20211016\",\r\n        \"PROXIMO_INT_HIS\": \"20211016\"\r\n    }\r\n    ],\r\n    \"Status\": {\r\n    \"StatusCode\": \"M0000\",\r\n    \"StatusDesc\": \"SUCCESS\"\r\n    }\r\n    }*/\n  } //Retorna todos los colateralsId por numero de cliente\n\n\n  async getColaterals(partyId) {\n    //Numero del cliente en T24\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params);\n    var dataResult = [];\n\n    try {\n      console.log(\"plage\"); //servicio retorna Pignorados\n\n      var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data); //Armamos la data a mostrar en pantalla\n\n      result.Collaterals.CollateralInfo.map(function (item, i) {\n        if (item.Collateral.CollateralKey.CollateralId !== null) {\n          dataResult.push({\n            collateralId: item.Collateral.CollateralKey.CollateralId,\n            facilityAmt: item.Collateral.CollateralAmt.Amt\n          });\n        }\n      });\n    } catch (err) {\n      console.error(\"URL_CORE_PIGNORADO\", err);\n    }\n\n    console.log(\"dataResult\", dataResult);\n    return dataResult;\n  } // retorna Detalle de Garantias\n\n\n  async getWarrantyDetails(collateralId, warrantyType) {\n    //Numero del id colateral ... warrytype = Muebles, Inmuebles, Otros, Depositos\n    if (collateralId.length <= 0 || warrantyType.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      CollateralId: collateralId,\n      InqType: warrantyType\n    };\n    let data = qs.stringify(params);\n\n    try {\n      //servicio retorna Pignorados\n      const result = await this.get(url.URL_CORE_COLLATERALS + \"?\" + data);\n      return result; //Armamos la data a mostrar en pantalla\n\n      /*result.Collaterals.CollateralInfo.map(function(item, i){\r\n          if(item.Collateral.CollateralKey.CollateralId!==null){\r\n              dataResult.push({collateralId: item.Collateral.CollateralKey.CollateralId,facilityAmt: item.Collateral.CollateralAmt.Amt});\r\n          }                                \r\n      })*/\n    } catch (err) {\n      console.error(\"URL_CORE_PIGNORADO\", err);\n      return undefined;\n    }\n  }\n\n  async getAccountMovementsByTransaction(transactId) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = [];\n      let flagAcctId = [];\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getAccountMovements(debtors[i].customerNumberT24);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            // dataResult.forEach(function (item) {\n            //     result.push(item);\n            // });\n            for (let item of dataResult) {\n              if (flagAcctId.includes(item.AcctId)) continue;\n              flagAcctId.push(item.AcctId);\n              result.push(item);\n            }\n\n            ;\n          }\n        } catch (err) {}\n      }\n\n      console.log(\"getAccountMovementsByTransaction\", result);\n      return result;\n    }\n\n    return undefined;\n  } //retorna movimientos de cuentas\n\n\n  async getAccountMovements(partyId) {\n    //Numero de Cliente de T24\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\n      return;\n    }\n\n    var dataResult = [];\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n\n      if (item.AcctPartyType !== result.PartyKey.PartyType && item.AcctPartyType === \"2\") {} else {\n        params = {\n          AcctReference: item.AcctKey.AcctReference\n        };\n        data = qs.stringify(params);\n\n        try {\n          var year = 0;\n          var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n\n          if (dtResult.Acct.AcctBal.length > 0) {\n            // queda pendiente el tema de los depositos con el servicio de banesco  \n            var dt = {\n              AcctId: item.AcctKey.AcctId,\n              dataByYear: []\n            };\n\n            for (var accItem of dtResult.Acct.AcctBal) {\n              if (year !== Number(accItem.AverageBalanceDt.split(' ')[1])) {\n                year = Number(accItem.AverageBalanceDt.split(' ')[1]);\n                dt.dataByYear.push({\n                  year,\n                  dataresult: []\n                });\n              }\n\n              var dtr = {\n                \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]),\n                \"month\": accItem.AverageBalanceDt.split(' ')[0],\n                \"amount\": accItem.CurAmt.Amt,\n                \"deposits\": 0\n              };\n              dt.dataByYear[dt.dataByYear.length - 1].dataresult.push(dtr);\n            }\n            /*dtResult.Acct.AcctBal.map(function (accItem, i) {  \r\n                if(year !== Number(accItem.AverageBalanceDt.split(' ')[1])){\r\n                    year = Number(accItem.AverageBalanceDt.split(' ')[1]);\r\n                    dt.dataByYear.push({year,dataresult:[]})\r\n                }                                                \r\n                dt.dataByYear[dt.dataByYear.length-1].dataresult.push({\r\n                    \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]), \r\n                    \"month\": accItem.AverageBalanceDt.split(' ')[0],\r\n                    \"amount\": accItem.CurAmt.Amt\r\n                }); \r\n            }) */\n\n\n            dataResult.push(dt);\n          }\n        } catch (err) {\n          console.error(\"getAccountMovementsByTransaction\", err);\n        }\n      }\n    } //Para sacar los depositos\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\n    //servicio retorna los movimientos de cuentas del cliente                        \n\n    /*try{\r\n        for (var i = 0; i < dataResult.length; ++i) {\r\n            var dtResult = dataResult[i];\r\n            for (var p = 0; p < dtResult.dataByYear.length; ++p) {\r\n                var dtYear = dtResult.dataByYear[p];\r\n                var currentYear =dtYear.year;\r\n                params = null; //dtResult.AcctId\r\n                if(currentYear === Number(moment().format(\"YYYY\"))){\r\n                    params = { AcctId: dtResult.AcctId, EndDt:moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"), StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                }\r\n                else{\r\n                    params = { AcctId: dtResult.AcctId, EndDt:currentYear+\"-12-31T23:59:59\", StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                }\r\n                data = qs.stringify(params);\r\n                try{\r\n                    var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data); \r\n                    for (var depo of deposits.Trn) {\r\n                        if(depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0){\r\n                            var monthName = GetMontNameByNumber(moment(depo.EffDt).format('M'));\r\n                            var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                                if(dataByMonth!==undefined){\r\n                    \r\n                                    dataByMonth.deposits= (Number(dataByMonth.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);\r\n                                }\r\n                        }                    \r\n                    }        \r\n                }\r\n                catch(err){}\r\n            }\r\n        }\r\n    }\r\n    catch(err){}\r\n    */\n    //Para sacar los depositos\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals?CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\n\n\n    try {\n      for (var i = 0; i < dataResult.length; ++i) {\n        var dtResult = dataResult[i];\n\n        for (var p = 0; p < dtResult.dataByYear.length; ++p) {\n          var dtYear = dtResult.dataByYear[p];\n          var currentYear = dtYear.year;\n          params = null; //dtResult.AcctId\n\n          if (currentYear === Number(moment().format(\"YYYY\"))) {\n            params = {\n              CUENTA: dtResult.AcctId,\n              FECHA_INI: currentYear + \"0101\",\n              FECHA_FIN: moment().format(\"YYYYMMDD\"),\n              PROMEDIO: \"S\"\n            }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n          } else {\n            params = {\n              CUENTA: dtResult.AcctId,\n              FECHA_INI: currentYear + \"0101\",\n              FECHA_FIN: currentYear + \"1231\",\n              PROMEDIO: \"S\"\n            }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n          }\n\n          data = qs.stringify(params);\n\n          try {\n            var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data); //console.log(\"getAccountMovementsByTransactionDeposits\",deposits);\n\n            for (var record of deposits.records) {\n              //console.log(\"depositsMonth\", record.FECHA.toString().substring(4, 6));\n              var monthName = GetMontNameByNumber(record.FECHA.toString().substring(4, 6));\n              var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName) >= 0);\n\n              if (dataByMonth !== undefined) {\n                dataByMonth.deposits = Number(record.MONTO).toFixed(2);\n              }\n            }\n          } catch (err) {}\n        }\n      }\n    } catch (err) {}\n\n    return dataResult;\n  }\n\n  async getAccountDepositsByTransaction(transactId, year, month) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = [];\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getAccountDeposits(debtors[i].customerNumberT24, year, month);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            dataResult.forEach(function (item) {\n              result.push(item);\n            });\n          }\n        } catch (err) {}\n      }\n\n      console.log(\"getAccountMovementsByTransaction\", result);\n      return result;\n    }\n\n    return undefined;\n  }\n\n  async getAccountDeposits(partyId, year, month) {\n    //Numero de Cliente de T24\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\n      return;\n    }\n\n    var dataResult = [];\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n\n      try {\n        year = Number(year).toString(\"00\");\n        month = Number(month).toString(\"00\");\n        var endDate = moment(year + \"-\" + month + \"-01\").endOf('month').format('DD');\n        params = {\n          AcctId: item.AcctKey.AcctId,\n          EndDt: year + \"-\" + month + \"-\" + endDate + \"T23:59:59\",\n          StartDt: year + \"-\" + month + \"-01T00:00:00\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n\n        try {\n          var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\n\n          for (var depo of deposits.Trn) {\n            if (depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0) {\n              dataResult.push({\n                deposits: Number(depo.TotalCurAmt.Amt)\n              });\n            }\n          }\n        } catch (err) {}\n      } catch (err) {}\n    } //Para sacar los depositos\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\n\n\n    return dataResult;\n  } //retorna movimientos de cuentas\n\n\n  async getApcInfo(identification, idType) {\n    //Numero de identificacion del cliente\n    if (identification.length <= 0) {\n      return undefined;\n    }\n\n    let typeofId = \"Cedula\";\n\n    switch (idType) {\n      case \"CED\":\n        {\n          typeofId = \"Cedula\";\n          break;\n        }\n\n      case \"RUC\":\n        {\n          typeofId = \"RUC\";\n          break;\n        }\n\n      case \"PAS\":\n        {\n          typeofId = \"Pasaporte\";\n          break;\n        }\n    }\n\n    var tmpidentification = \"\";\n    identification.split('-').map(str => {\n      if (str.startsWith(\"0\")) {\n        tmpidentification += str.replace(/^0+/, '') + \"-\";\n      } else {\n        tmpidentification += str + \"-\";\n      }\n    });\n\n    if (tmpidentification.startsWith(\"-\")) {\n      tmpidentification = tmpidentification.substring(1);\n    }\n\n    identification = tmpidentification.substring(0, tmpidentification.length - 1);\n    var params = {\n      \"ConsultarAPC\": {\n        \"Model\": {\n          \"EsPrueba\": 0,\n          \"ForzarBusqueda\": 0,\n          \"IdentificacionConsulta\": identification,\n          //\"8-773-1899\",\n          \"PasswordAPC\": \"Banesco19.\",\n          \"TipoCliente\": typeofId,\n          \"UltimusProcess\": 7,\n          \"UsuarioAPC\": \"WTIBANESCO001\"\n        }\n      }\n    }; //servicio retorna la info de APC del cliente\n\n    const result = await this.post(url.URL_CORE_APCINFO, params);\n    var dataResult = [];\n\n    try {\n      if (Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)) {\n        //Armamos la data a mostrar en pantalla\n        result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\n          try {\n            dataResult.push({\n              \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"),\n              \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\n              \"initialAmount\": item.dc_monto_original,\n              \"actualAmount\": item.dc_saldo_actual,\n              \"asociation\": item.dc_nom_asoc,\n              \"source\": item.dc_descr_corta_rela\n            });\n          } catch (err) {}\n        });\n      } else {\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        try {\n          dataResult.push({\n            \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"),\n            \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\n            \"initialAmount\": item.dc_monto_original,\n            \"actualAmount\": item.dc_saldo_actual,\n            \"asociation\": item.dc_nom_asoc,\n            \"source\": item.dc_descr_corta_rela\n          });\n        } catch (err) {}\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    return dataResult;\n  }\n\n  async getEconomicGroup(partyId) {\n    //partyId -> numero del cliente en T24\n    try {\n      let params = {\n        PartyId: partyId\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\n      console.log(\"getEconomicGroup\", result);\n      return result.PartyPartyRels.PartyPartyRel[0].PartyPartyRelInfo.PartyRelName[0];\n    } catch (err) {}\n\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    return null;\n  }\n\n  async getReciprocityByTransaction(transactId, year, month) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = {\n        averageAmt: 0,\n        deposits: 0\n      };\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getReciprocity(debtors[i].customerNumberT24, year, month);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            result.averageAmt += dataResult.averageAmt;\n            result.deposits += dataResult.deposits;\n          }\n        } catch (err) {}\n      }\n\n      console.log(\"getAccountMovementsByTransaction\", result);\n      return result;\n    }\n\n    return undefined;\n  }\n\n  async getReciprocity(partyId, year, month) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    year = Number(year);\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return undefined;\n    }\n\n    var resultToReturn = {\n      averageAmt: 0,\n      deposits: 0\n    };\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n      params = {\n        AcctReference: item.AcctKey.AcctReference\n      };\n      data = qs.stringify(params);\n\n      try {\n        var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n\n        if (dtResult.Acct.AcctBal.length > 0) {\n          // queda pendiente el tema de los depositos con el servicio de banesco  \n          for (var accItem of dtResult.Acct.AcctBal) {\n            var dMonth = accItem.AverageBalanceDt.split(' ')[0];\n\n            if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year && dMonth.indexOf(month) >= 0) {\n              resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\n            }\n          }\n        }\n      } catch (err) {} //Para sacar los depositos\n\n\n      try {\n        var currentYear = year;\n        var monthNum = GetMontNumberByName(month);\n        var endDate = moment(year + \"-\" + monthNum + \"-01\").endOf('month').format('DD');\n        params = null; //dtResult.AcctId\n\n        params = {\n          CUENTA: item.AcctKey.AcctId,\n          FECHA_INI: currentYear + monthNum + \"01\",\n          FECHA_FIN: currentYear + monthNum + endDate,\n          PROMEDIO: \"S\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n\n        try {\n          var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\n\n          for (var record of deposits.records) {\n            //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\n            //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\n            //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\n            //if(dataByMonth!==undefined){                        \n            resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2); //  }                    \n          }\n        } catch (err) {}\n      } catch (err) {}\n    }\n\n    return resultToReturn;\n  }\n\n  async getReciprocityByYearByTransaction(transactId, year) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = {\n        averageAmt: 0,\n        deposits: 0\n      };\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getReciprocityByYear(debtors[i].customerNumberT24, year);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            result.averageAmt += dataResult.averageAmt;\n            result.deposits += dataResult.deposits;\n          }\n        } catch (err) {}\n      }\n\n      console.log(\"getAccountMovementsByTransaction\", result);\n      return result;\n    }\n\n    return undefined;\n  }\n\n  async getReciprocityByYear(partyId, year) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    year = Number(year);\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return undefined;\n    }\n\n    var resultToReturn = {\n      averageAmt: 0,\n      deposits: 0\n    };\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n      params = {\n        AcctReference: item.AcctKey.AcctReference\n      };\n      data = qs.stringify(params);\n\n      try {\n        var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n\n        if (dtResult.Acct.AcctBal.length > 0) {\n          // queda pendiente el tema de los depositos con el servicio de banesco  \n          for (var accItem of dtResult.Acct.AcctBal) {\n            //var dMonth = accItem.AverageBalanceDt.split(' ')[0]\n            if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year) {\n              resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\n            }\n          }\n        }\n      } catch (err) {} //Para sacar los depositos\n\n\n      try {\n        var currentYear = year;\n        var monthNum = year === Number(moment().format(\"YYYY\")) ? moment().format(\"MM\") : \"12\";\n        var endDate = moment(year + \"-\" + monthNum + \"-01\").endOf('month').format('DD');\n        params = null; //dtResult.AcctId\n\n        params = {\n          CUENTA: item.AcctKey.AcctId,\n          FECHA_INI: currentYear + \"0101\",\n          FECHA_FIN: currentYear + monthNum + endDate,\n          PROMEDIO: \"S\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n\n        try {\n          var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\n\n          for (var record of deposits.records) {\n            //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\n            //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\n            //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\n            //if(dataByMonth!==undefined){                        \n            resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2); //  }                    \n          }\n        } catch (err) {}\n      } catch (err) {}\n    }\n\n    return resultToReturn;\n  }\n\n  async getDepositsByTransaction(transactId, year, month) {\n    var debtors = await this.backendServices.consultarDeudores(transactId);\n\n    if (debtors !== null && debtors !== undefined) {\n      var result = {\n        averageAmt: 0,\n        deposits: 0\n      };\n\n      for (var i = 0; i < debtors.length; i++) {\n        try {\n          var dataResult = await this.getDeposits(debtors[i].customerNumberT24, year, month);\n\n          if (dataResult !== null && dataResult !== undefined) {\n            result.averageAmt += dataResult.averageAmt;\n            result.deposits += dataResult.deposits;\n          }\n        } catch (err) {}\n      }\n\n      console.log(\"getAccountMovementsByTransaction\", result);\n      return result;\n    }\n\n    return undefined;\n  }\n\n  async getDeposits(partyId, year, month) {\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    year = Number(year);\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return undefined;\n    }\n\n    var resultToReturn = {\n      averageAmt: 0,\n      deposits: 0\n    };\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i]; //CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\n\n      var endDate = moment(year + \"-12-01\").endOf('month').format('DD');\n      params = {\n        CUENTA: item.AcctKey.AcctId,\n        FECHA_INI: year + \"0101\",\n        FECHA_FIN: year + \"12\" + endDate\n      };\n      data = qs.stringify(params);\n\n      try {\n        var dtResult = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\n\n        if (dtResult.Acct.AcctBal.length > 0) {\n          // queda pendiente el tema de los depositos con el servicio de banesco  \n          for (var accItem of dtResult.Acct.AcctBal) {\n            if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year) {\n              resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\n            }\n          }\n        }\n      } catch (err) {} //Para sacar los depositos\n      //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\n      //servicio retorna los movimientos de cuentas del cliente                        \n\n\n      try {\n        //var monthN=GetMontNumberByName(month);\n        var endDate = moment(year + \"-12-01\").endOf('month').format('DD');\n        params = {\n          AcctId: item.AcctKey.AcctId,\n          EndDt: year + \"-12-\" + endDate + \"T23:59:59\",\n          StartDt: year + \"-01-01T00:00:00\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n        var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\n        console.log(\"getReciprocityByYear\", deposits);\n\n        for (var depo of deposits.Trn) {\n          if (depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0) {\n            resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);\n          }\n        }\n      } catch (err) {}\n    }\n\n    return resultToReturn;\n  } /// Obtener el serial de la linea -- Parametros: NumeroT24 y Codigo Facilidad\n\n\n  async getLineSerial(partyId, lineTypeCode) {\n    try {\n      //var errorDispacher = new errorDispacherHelper(); \n      console.log(\"getLineSerial\", partyId, lineTypeCode); //partyId=\"800048231\"; facilityTypeCode=\"10000\"\n\n      if (partyId.length <= 0) {\n        return undefined;\n      }\n\n      let params = {\n        PartyId: partyId\n      };\n      let data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018\n      //servicio retorna las cuentas del cliente\n\n      var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data); // if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK && result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK1) {\n      //     errorDispacherHelper.dispatch({ status: result.Status.StatusCode, error: result.Status.StatusDesc });\n      //     return;\n      // }            \n\n      var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(lineTypeCode) >= 0);\n      var lineNumber = 1;\n      dataResults.forEach(dt => {\n        lineNumber = Number(dt.CreditLineId.split(\".\")[2]) > lineNumber ? Number(dt.CreditLineId.split(\".\")[2]) : lineNumber;\n      });\n\n      while (lineTypeCode.length < 7) {\n        lineTypeCode = \"0\" + lineTypeCode;\n      }\n\n      if (lineNumber.toString().length < 2) {\n        lineNumber = (\"0\" + (lineNumber + 1).toString()).slice(-2);\n      } else {\n        lineNumber = lineNumber.toString();\n      }\n\n      var lineserial = partyId + \".\" + lineTypeCode + \".\" + lineNumber;\n      console.log(\"lineas\", lineserial);\n      return lineserial;\n    } catch (err) {// errorDispacherHelper.dispatch({status: \"500\",data: result, error: err.message});\n    }\n\n    return null;\n  } ///Creacion de Linea para desembolso\n  //numero de linea = numero de cliente + tipo de linea + serial === EJ: 600197109.0011000.01\n  //https://qa.api.ob.banesco.com.pa/APIUtil/v1/catalogs?catalog_name=LIMIT REFERENCE&parent_catalog_name=&keyword=  \n  //===> Catalogo de Tipo de Lineas\n  //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018  \n  //===> Obtenemos todas las lineas y tomamos el total + 1 => Mas serial\n\n\n  async newline(data) {\n    try {\n      /*\r\n      {\r\n      \"CreditLine\":{\r\n      \"Activity\":{\r\n      \"Cod\":\"2103\"\r\n      },\r\n      \"AuthType\":\"01\",\r\n      \"AutonomyCode\":{\r\n      \"Cod\":\"0100\",\r\n      \"Desc\":\"JUNTA DIRECTIVA\"\r\n      },\r\n      \"AutonomyUser\":\"02\",\r\n      \"CreditLimit\":{\r\n      \"AdviseAmt\":{\r\n      \"Amt\":\"2000\",\r\n      \"CurCode\":\"USD\"\r\n      },\r\n      \"Allow\":{\r\n      \"CurrencyData\":{\r\n         \"CurAmt\":{\r\n            \"Amt\":{\r\n               \"-self-closing\":\"true\"\r\n            },\r\n            \"CurCode\":{\r\n               \"-self-closing\":\"true\"\r\n            }\r\n         }\r\n      },\r\n      \"Party\":{\r\n         \"PartyId\":{\r\n            \"-self-closing\":\"true\"\r\n         }\r\n      },\r\n      \"ProductData\":[\r\n         {\r\n            \"Product\":{\r\n               \"Cod\":\"1000\"\r\n            }\r\n         }\r\n      ]\r\n      },\r\n      \"AllowNetting\":\"N\",\r\n      \"ApprovalDt\":\"2022-05-11\",\r\n      \"AvailDt\":\"2022-05-11\",\r\n      \"AvailMarker\":\"Y\",\r\n      \"CountryRisk\":{\r\n      \"Country\":{\r\n         \"CountryCode\":\"PA\",\r\n         \"CountryName\":{\r\n            \"-self-closing\":\"true\"\r\n         }\r\n      },\r\n      \"Percent\":\"100\"\r\n      },\r\n      \"CreditLimitKey\":{\r\n      \"CreditLimitId\":\"990001176.0010000.09\"\r\n      },\r\n      \"CurCode\":\"USD\",\r\n      \"DeadLineDt\":\"2022-05-11\",\r\n      \"DueDt\":\"2023-05-11\",\r\n      \"LimitAmt\":{\r\n      \"Amt\":\"2000\",\r\n      \"CurCode\":\"USD\"\r\n      },\r\n      \"LimitAmtType\":\"FIXED\",\r\n      \"LimitReject\":\"Y\",\r\n      \"MaxCurAmt\":{\r\n      \"Amt\":\"2000\",\r\n      \"CurCode\":\"USD\"\r\n      },\r\n      \"ProposalDt\":\"2022-05-11\",\r\n      \"ReviewFreq\":{\r\n      \"FreqValue\":\"20230430M1230\"\r\n      },\r\n      \"Signatories\":{\r\n      \"Signatory\":{\r\n         \"PartyKey\":{\r\n            \"PartyId\":\"990001176\"\r\n         }\r\n      }\r\n      }\r\n      }\r\n      }\r\n      }\r\n      */\n      // var data =\n      // {\n      //     \"CreditLine\": {\n      //         \"Activity\": {\n      //             \"Cod\": \"1413\"  //-> Cod. Sub Actividad Economica\n      //         },\n      //         \"AuthType\": \"99\", //-> Tipo de Autorizacion\n      //         \"AutonomyCode\": {\n      //             \"Cod\": \"9999\" //-> Codigo de la Autonomia No lo tenemos\n      //         },\n      //         \"AutonomyUser\": \"1\", //-> Usuario de Autonomia que esta login\n      //         \"CreditLimit\": {\n      //             \"AdviseAmt\": {\n      //                 \"Amt\": \"25,000.00\", //-> Monto de La Linea\n      //                 \"CurCode\": \"USD\" //-> Codigo Moneda\n      //             },\n      //             \"Allow\": {\n      //                 \"ProductData\": {\n      //                     \"Product\": {\n      //                         \"Cod\": \"1000\", // -> Tipo de Facilidad\n      //                     }\n      //                 }\n      //             },\n      //             \"AllowNetting\": \"N\", // -> ?? FIJO\n      //             \"ApprovalDt\": \"2022-02-02\", // -> Fecha de Aprobacion\n      //             \"AvailDt\": \"2022-02-02\",    // -> Fecha de Propuesta\n      //             \"AvailMarker\": \"Y\", // -> ?? FIJO\n      //             \"CountryRisk\": [ // -> Pais de riesgo\n      //                 {\n      //                     \"Country\": {\n      //                         \"CountryCode\": \"PA\" // -> Codigo Pais de riesgo\n      //                     },\n      //                     \"Percent\": \"100\" // -> ??\n      //                 }\n      //             ],\n      //             \"CreditLimitKey\": {\n      //                 \"CreditLimitId\": \"600197109.0011000.01\" // -> numero de cliente + tipo de linea + mas serial\n      //             },\n      //             \"CurCode\": \"USD\", //-> Tipo de Moneda\n      //             \"DeadLineDt\": \"2022-02-02\",  //Fecha del dia\n      //             \"DueDt\": \"2023-02-02\",     //Fecha de expiracion\n      //             \"LimitAmt\": {\n      //                 \"Amt\": \"25,000.00\" //-> Monto de La Linea\n      //             },\n      //             \"LimitAmtType\": \"FIXED\", //-> FIXED/VARIABLE\n      //             \"LimitReject\": \"Y\", // -> YES/NO ??\n      //             \"MaxCurAmt\": {\n      //                 \"Amt\": \"25,000.00\" //-> Monto de La Linea\n      //             },\n      //             \"ProposalDt\": \"2022-02-02\", //Fecha Propuesta\n      //             \"ReviewDt\": \"2023-02-02\", //Fecha Revision\n      //             \"ReviewFreq\": {\n      //                 \"FreqValue\": \"20230330M1230\" // YYYY MM DD ... codigo A/M/D ... cantidad de meses, el dia especifico\n      //             },\n      //             \"Signatories\": {\n      //                 \"Signatory\": [\n      //                     {\n      //                         \"PartyKey\": {\n      //                             \"PartyId\": \"45469\" //Numero del Cliente T24\n      //                         }\n      //                     }\n      //                 ]\n      //             }\n      //         }\n      //     }\n      // }\n      //console.log(\"NewLine\",data);\n      return;\n      var result = await this.post(url.URL_CORE_LINES, data);\n      console.log(\"newline\", result);\n\n      if (result.Status.StatusCode === OPTs.ResponseT24_STATUSOK) {\n        return await this.newlineChild(data);\n      }\n    } catch (err) {\n      errorDispacherHelper.dispatch({\n        status: \"500\",\n        data: result,\n        error: err.message\n      });\n    }\n\n    return undefined;\n  }\n\n  async newlineChild(data) {\n    try {\n      //data.CreditLine.Allow.ProductData            \n      for (var i = 0; i < data.CreditLine.CreditLimit.Allow.ProductData.length; i++) {\n        try {\n          var dataProd = data.CreditLine.CreditLimit.Allow.ProductData[i];\n          var CreditLimitId = data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId;\n          var CreditLimitIdNum = CreditLimitId.split(\".\")[1].replace(/0/g, '');\n          CreditLimitIdNum = CreditLimitIdNum + \"0\";\n          var ToReplaceIdNum = (Number(CreditLimitIdNum) + i + 1).toString();\n          data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId = data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId.split(\".\")[0] + \".\" + data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId.split(\".\")[1].replace(CreditLimitIdNum, ToReplaceIdNum) + \".\" + data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId.split(\".\")[2];\n          var tmpdata = JSON.parse(JSON.stringify(data));\n          delete tmpdata.CreditLine.CreditLimit.Allow;\n          console.log(\"NewLineChild\", tmpdata, data);\n          var result = await this.post(url.URL_CORE_LINES, tmpdata);\n\n          if (result.Status.StatusCode === OPTs.ResponseT24_STATUSOK) {//return result;\n          }\n        } catch (err) {\n          errorDispacherHelper.dispatch({\n            status: \"500\",\n            data: result,\n            error: err.message\n          });\n        }\n      }\n    } catch (err) {}\n\n    return undefined;\n  } // Garantia loans/Colateral\n  //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/collaterals\n  // Desembolso\n  //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans\n  //lineas\n  //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/credits/lines/limits\n\n\n  async DesembolsoBajoLinea(data) {\n    data = {\n      AcctLoan: {\n        AcctSubtype: {\n          Cod: \"AL.COMPANY.PRIVATE\" // Subproducto\n\n        },\n        AutonomyCode: \"0523\",\n        // ******** Codigo de la autonomia\n        AutonomyUser: \"134\",\n        //La autonomia o usuario que esta logueado\n        //ClosedDt:\"2029-10-03\", //\n        //ClubBanesco:\"false\",\n        CurCode: \"USD\",\n        //codigo de Moneda\n        SubCategory: \"1623\",\n        //Codigo de Subcategoria??\n        Variation: {\n          //variacion -> Puede ir vacÃ­a\n          \"Cod\": \"CLIENTE\"\n        },\n        \"AcctOpeningInfo\": {\n          BusinessUnit: \"SUCURSAL\",\n          // Banca viene de IGR\n          \"InitialAmt\": {\n            \"Amt\": \"5950\" //monto\n\n          },\n          OpenDt: \"2022-02-07\",\n          // Fecha de Inicio del desembolso\n          SaleOfficer: \"3766\" //Canal de venta .... ****** no estÃ¡ en pantalla\n\n        },\n        CreditAcctData: {\n          AuthType: \"06\",\n          //-> ?? ************ no esta en pantalla\n          BillsCombined: \"true\",\n          // Capital de Interes ... ********** no esta en pantalla\n          CodeDestination: \"PA10\",\n          // codigo de Destino ... Provincia de Destino\n          CollOfficer: \"9999\",\n          /// campo fijo siempre\n          CountryDestination: \"PA\",\n          // codigo Pais de Destino\n          CreditDestination: \"LOCAL\",\n          // ********* Destino del Credito : LOCAL 1 /EXTRANJERO 2\n          FundsDestination: \"1\",\n          // ********* Destino de los Fondos: LOCAL 1 / EXTRANJERO 2\n          FundsPurpose: \"2103\",\n          // ********** Proposito de los Fondos viene de un catalogo\n          OriginationRef: \"99986\",\n          // ********** referencia de Orientacion , viene de un catalodo\n          RefinanceNum: {\n            // QUEDA FIJO\n            \"self-closing\": \"true\"\n          },\n          SourceSales: {\n            // ********* Viene de Catalogo\n            \"Cod\": \"14\",\n            \"Desc\": \"REFERIDO POR EMPLEADO\"\n          },\n          WritingType: \"PAG\",\n          // *********** Tipo de Escritura .. PAG/WRT .. PagarÃ© o Escritura\n          Charge: [//cargos \n          {\n            ChargeType: \"LENDCOMMISSION\",\n            //Instrucciones Operativas -> Monto por Comision\n            \"CurAmt\": {\n              \"Amt\": \"392.7\"\n            }\n          }, {\n            \"ChargeType\": \"TAX\",\n            //Instrucciones Operativas -> ITBMs\n            \"CurAmt\": {\n              \"Amt\": \"2.18\"\n            }\n          }, {\n            \"ChargeType\": \"ALLEGALFEE\",\n            //Instrucciones Operativas -> NotarÃ­a\n            \"CurAmt\": {\n              \"Amt\": \"4.36\"\n            }\n          }, {\n            \"ChargeType\": \"TFISCAL\",\n            //Instrucciones Operativas -> Timbre Fisical\n            \"CurAmt\": {\n              \"Amt\": \"3\"\n            }\n          }],\n          \"CreditRegularPmt\": {\n            // La podemos Omitir no es obligatorio\n            \"BillType\": \"INSTALLMENT\",\n            \"Freq\": {\n              \"NoPaymentMonth\": \"1\",\n              \"OnDayNumber\": \"3\"\n            },\n            \"PmtClass\": \"DUE\",\n            \"PmtType\": \"CONSTANT\",\n            \"PmtTargetDetail\": {\n              \"ActualAmt\": {\n                \"Amt\": \"114.9\"\n              },\n              \"StartDate\": \"2022-04-03\"\n            }\n          },\n          Term: {\n            //*********** Termino o Plazo de desembolso ... + Tipo de Termino D/M/A\n            ProposedTerm: \"91M\"\n          },\n          SettleInstruction: {\n            PayIn: [{\n              ACDBRule: \"PARTIAL\",\n              //Constante\n              PmtType: \"CONSTANT\",\n              //Constante\n              SettleActivity: {\n                //Constante\n                Cod: \"LENDING-APPLYPAYMENT-PR.REPAYMENT\"\n              },\n              Settlement: \"false\",\n              //************* desembolso en cuenta TRUE/FALSE\n              PayInAcctRef: {\n                Activity: {\n                  //Constante\n                  Cod: \"ACCOUNTS-DEBIT-ARRANGEMENT\"\n                },\n                PayInAcct: {\n                  // NÃºmero de LÃ­nea de CrÃ©dito\n                  \"AcctReference\": \"USD1273300020014\"\n                }\n              }\n            }],\n            PayOut: {\n              PayOutAcct: {\n                // NÃºmero de LÃ­nea de CrÃ©dito, el numero de la cuenta\n                \"AcctReference\": \"USD1273300020014\"\n              },\n              Property: \"ACCOUNT\",\n              // Si es una cuenta \"ACCOUNT\"\n              SettleActivity: {\n                //Constante\n                Cod: \"LENDING-APPLYPAYMENT-PR.REPAYMENT\"\n              },\n              Settlement: \"true\" //Constante\n\n            }\n          },\n          CreditAcctPmtInfo: {\n            PmtMethod: \"DD\" // ******** Metodo de Pago ... DC/PV  Descuento Directo - Pago Voluntario\n\n          }\n        },\n        IntRateData: [{\n          IntRate: \"11.50\",\n          // Tasa de Interes\n          IntRateType: \"PRINCIPALINT\"\n        }, {\n          \"IntRate\": \"12.50\",\n          \"IntRateType\": \"LT.DPF.BASE\"\n        }, {\n          \"IntRate\": \"13.50\",\n          \"IntRateType\": \"LT.SPREAD.POINT\"\n        }],\n        AcctMember: {\n          \"PartyKey\": {\n            \"PartyId\": \"990091561\" //Numero de Cliente T24\n\n          },\n          \"PartyRole\": {\n            \"Cod\": \"OWNER\"\n          }\n        }\n      }\n    };\n    var result = await this.put(url.URL_CORE_PRESTAMOS, data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return result;\n    }\n\n    return result;\n  }\n  /*\r\n    \r\n  */\n\n\n  async test() {\n    try {\n      let data = {\n        \"Acct\": {\n          \"Activity\": 3201,\n          \"Category\": 28212,\n          \"CurCode\": \"USD\",\n          \"CreditAcctData\": {\n            \"CountryDestination\": \"PA\",\n            \"PromiseLetter\": {\n              \"AdvExpiryDt\": \"2022-12-31\",\n              \"AutoExpiry\": true,\n              \"BeneficiaryCust\": {\n                \"PartyId\": \"\",\n                \"PartyType\": \"\"\n              },\n              \"BeneficiaryName\": \"AUTO TUNNIG CA\",\n              \"ContractType\": \"CA\",\n              \"CustomerReferenceId\": \"MP2022154001\",\n              \"DealSubType\": \"CMTA\",\n              \"EffDt\": \"2022-06-03\",\n              \"EventsProcessing\": \"ONLINE\",\n              \"LimitRef\": \"\",\n              \"LiquidationMode\": \"Automatic\",\n              \"MaturityDt\": \"2022-12-31\",\n              \"OpenDt\": \"2022-06-03\",\n              \"PrincipalAmt\": {\n                \"Amt\": 15000,\n                \"CurCode\": \"USD\"\n              }\n            }\n          },\n          \"AcctMember\": {\n            \"PartyKey\": {\n              \"PartyId\": 600072721,\n              \"PartyType\": 2\n            }\n          }\n        }\n      };\n      var result = await this.get(url.URL_CORE_TEST);\n      console.log(\"getLineSerial\", result);\n      return result;\n    } catch (err) {}\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/CoreServices/Services.js"],"names":["WatchListModel","DocumentModel","ClientInfoModel","PartiesStaffModel","ApiServiceCore","url","qs","ACT_FACILIDADACTIVOSFIJOS","OPTs","ResponseModel","moment","part","GetMontNumberByName","GetMontNameByNumber","ResourceStore","Currency","convertToUpperCasesData","BackendServices","errorDispacherHelper","Services","backendServices","postWhatchList","params","result","post","URL_CORE_WATCHLIST","status","fromJson","results","err","response","error","data","postDocument","config","headers","URL_CORE_DOCUMENTS","console","log","Status","StatusCode","dataresult","docName","Result","documentId","formType","undefined","postViewDocument","docId","DocumentHandle","ReturnBase64","URL_CORE_DOCUMENTSVIEW","Documents","DocPop","e","getPartiesInformation","stringify","get","URL_CORE_PARTIEINFO","getPartiesInformationExtra","typePerson","customerNumberT24","PartyType","Number","PartyId","length","extraInfo","activity","address","Country","CountryCode","Province","Cod","CountyDistrict","Jurisdiction","City","Desc","AddrDesc","Building","HouseNumber","Street","getPartiesStaff","URL_CORE_PARTIESTAFF","putPartiesStaff","put","getCompaniesRelations","URL_CORE_COMPANIESRELATIONS","getPaisesCatalogo","catalog_name","parent_catalog_name","keyword","URL_CORE_CATALOGO","catalog","sessionStorage","setItem","JSON","ex","getProvinciasCatalogo","pais","getDistritoCatalogo","provincia","getCorregimientoCatalogo","distrito","getCiudadCatalogo","getGrupoEconomicoCatalogo","Records","unshift","Description","Code","getBancaCatalogo","getCargosCatalogo","getBancosCatalogo","getActividadEconomicaCatalogo","getSubActividadEconomicaCatalogo","codeActividad","getSectorEconomicoCatalogo","getRelacionCatalogo","getTipoGarantiaCatalogo","getSubTipoGarantiaCatalogo","codGarantia","getMonedaCatalogo","getSucursalesCatalogo","getTypeOfCreditLimitsCatalog","getInsurersCatalog","getCarBrandCatalog","getCarModelCatalog","getBrokersCatalog","getTrusteeCatalog","getProductCatalog","getSubProductCatalog","getCategoriesCatalog","getPolicyTypeCatalog","getSubTypeWarrantyCatalog","getAutoClassCatalog","getAppraiserCatalog","getTipoDesembolsoCatalogo","getSourceSalesCatalogo","getAutonomiaCatalogo","getAuthorityTypeCatalogo","getFacilitiesByTransaction","transactId","debtors","consultarDeudores","i","dataResult","getFacilities","forEach","item","name","name2","lastName","lastName2","personId","push","getCreditCard","partyId","currencyData","URL_CORE_CREDITOS_LINE","Array","isArray","Party","PartyInfo","CreditLine","CreditLineId","split","replace","deudas","debtype","facilityType","CreditType","bank","balance","getRealValue","PendingAmt","Amt","approved","OnlineAmt","variation","startDate","format","endDate","ConsultarAPCResponse","ConsultarAPCResult","DetCompromisoAPC","URL_CORE_FACILIDADES","AcctLoans","AcctLoan","AcctKey","ProductDesc","AcctBal","CurAmt","AcctOpeningInfo","InitialAmt","OpenDt","CreditAcctData","DueDt","AcctId","getRelatedClients","PartyPartyRels","PartyPartyRel","client","partyNumber","PartyPartyRelInfo","PartyRef","RelPartyRef","PartyKey","getCorporateExhibition","longTerm","proposal","shortTerm","totalTerm","pledged","netExposition","diff","approvedAmount","actualBalance","URL_CORE_PIGNORADO","Collaterals","CollateralInfo","map","AcctReference","Collateral","InsuranceInfo","CollateralAmt","getCorporateExhibitionByClients","clients","clientId","getAllTermDebtsByTransaction","longTermresult","shortTermresult","getAllTermDebts","clientDocId","idType","identification","typeofId","tmpidentification","str","startsWith","substring","URL_CORE_APCINFO","dc_nom_asoc","toUpperCase","indexOf","dc_descr_corta_rela","paymentHistory","dc_historia","dc_saldo_actual","dc_monto_original","dc_fec_inicio_rel","dc_fec_fin_rel","approvedDate","getCreditCardByTransaction","URL_CORE_CreditCard","readCardTDC_Rs","Customer","Product","CardInfo","Type","RelationType","approvedAmt","Statement","StatementInfo","find","x","balanceAmt","EndDt","EmbossInfo","FirstName","LastName","getAverages","URL_CORE_AVERAGES","getListaImportaciones","URL_CORE_IMPORTACIONES","getListaExportaciones","URL_CORE_EXPORTACIONES","getPrestamosEntrantes","URL_CORE_INGOING","getPrestamosSalientes","URL_CORE_OUTOGOING","getCreditosExistentes","URL_CORE_CREDITOS","getCreditosLine","getTransactions","StartDt","URL_CORE_TRANSACCTIONS","getPrestamos","URL_CORE_PRESTAMOS","getFacilityInfo","URL_CORE_PRESTAMOS_INFORMATION","getReportingServices","FECHA","add","CLIENTE","URL_CORE_REPORTINGSERVICES","getColaterals","CollateralKey","CollateralId","collateralId","facilityAmt","getWarrantyDetails","warrantyType","InqType","URL_CORE_COLLATERALS","getAccountMovementsByTransaction","flagAcctId","getAccountMovements","includes","URL_CORE_ACCOUNTSPARTIES","ResponseT24_STATUSOK","Error","StatusDesc","Accounts","Acct","AcctPartyType","year","dtResult","dt","dataByYear","accItem","AverageBalanceDt","dtr","p","dtYear","currentYear","CUENTA","FECHA_INI","FECHA_FIN","PROMEDIO","deposits","URL_CORE_BALANCETOTALS","record","records","monthName","toString","dataByMonth","month","MONTO","toFixed","getAccountDepositsByTransaction","getAccountDeposits","endOf","depo","Trn","TotalCurAmt","getApcInfo","getEconomicGroup","PartyRelName","getReciprocityByTransaction","averageAmt","getReciprocity","resultToReturn","dMonth","monthNum","monto","getReciprocityByYearByTransaction","getReciprocityByYear","getDepositsByTransaction","getDeposits","getLineSerial","lineTypeCode","dataResults","filter","lineNumber","slice","lineserial","newline","URL_CORE_LINES","newlineChild","dispatch","message","CreditLimit","Allow","ProductData","dataProd","CreditLimitId","CreditLimitKey","CreditLimitIdNum","ToReplaceIdNum","tmpdata","parse","DesembolsoBajoLinea","AcctSubtype","AutonomyCode","AutonomyUser","CurCode","SubCategory","Variation","BusinessUnit","SaleOfficer","AuthType","BillsCombined","CodeDestination","CollOfficer","CountryDestination","CreditDestination","FundsDestination","FundsPurpose","OriginationRef","RefinanceNum","SourceSales","WritingType","Charge","ChargeType","Term","ProposedTerm","SettleInstruction","PayIn","ACDBRule","PmtType","SettleActivity","Settlement","PayInAcctRef","Activity","PayInAcct","PayOut","PayOutAcct","Property","CreditAcctPmtInfo","PmtMethod","IntRateData","IntRate","IntRateType","AcctMember","test","URL_CORE_TEST"],"mappings":"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","sourcesContent":["\r\nimport { WatchListModel, DocumentModel, ClientInfoModel, PartiesStaffModel } from \"../../models/Core\";\r\nimport ApiServiceCore from \"../ApiServiceCore\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport qs from \"qs\";\r\nimport { ACT_FACILIDADACTIVOSFIJOS } from \"../../helpers/options_helper\";\r\nimport * as OPTs from \"../../helpers/options_helper\"\r\nimport { ResponseModel } from '../../models/Common/ResponseModel';\r\nimport moment from \"moment\";\r\nimport { part } from \"core-js/core/function\";\r\n\r\nimport { GetMontNumberByName, GetMontNameByNumber } from '../../helpers/commons'\r\nimport { ResourceStore } from \"i18next\";\r\n\r\nimport Currency from \"../../helpers/currency\"\r\n\r\nimport { convertToUpperCasesData } from '../../helpers/commons'\r\n\r\nimport { BackendServices } from \"../../services\";\r\n\r\nimport errorDispacherHelper from \"../../helpers/errorDispacherHelper\";\r\n\r\nexport default class Services extends ApiServiceCore {\r\n\r\n    backendServices = new BackendServices();   \r\n\r\n    //analysis/customers -> retorna la info de lista de vigilancia\r\n    //ConsultarListaCriterioCORE    \r\n    async postWhatchList(params) {\r\n        try {\r\n            /*\r\n        {\r\n      \"pCustomerId\": \"06--00711-002304\",\r\n      \"pTypeId\": \"CEDULA_IDENTIDAD\",\r\n      \"pModelId\": \"LISTA_VIGILANCIA\",\r\n      \"pCustomerListParams\": {\r\n          \"KeyValueParam\": [\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"NOMBRE\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Librada\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_NOMBRE\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Emilio\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"PRIMER_APELLIDO\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Rivera\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_APELLIDO\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Gaviria\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"TIPO_ID\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"CEDULA_IDENTIDAD\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"CEDULA\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"06--00711-002304\"\r\n              }\r\n          ]\r\n      },\r\n      \"pUser\": \"wallytech_ws_user\",\r\n      \"pWaitingInterval\": 180000000,\r\n      \"pPriority\": 1\r\n  }\r\n        */\r\n            var result = await this.post(url.URL_CORE_WATCHLIST, params);\r\n\r\n            return { status: 200, result: WatchListModel.fromJson(result).results };\r\n\r\n        }\r\n        catch (err) {\r\n            return { status: err.response.status, error: err.response.data }; //errorMessage, //errorCode\r\n        }\r\n    }\r\n\r\n    //documents -> salva documento en gestor documental ONBASE\r\n    //GuardarDocumentoECM\r\n    async postDocument(data) {\r\n\r\n        var config = {\r\n            headers: {\r\n                //\"Accept\":\"*/*\",\r\n                //\"Accept-Encoding\":\"gzip, deflate, sdch, br\",\r\n                //\"Accept-Language\":\"fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4\",\r\n                //\"Access-Control-Request-Headers\":\"accept, content-type\",\r\n                //\"Content-Type\":\"text/plain\",\r\n                //\"Content-Length\":JSON.stringify(data).length.toString(),\r\n                //\"Host\":\"https://qa.api.ob.banesco.com.pa/\",\r\n                //Connection: \"keep-alive\",\r\n                //\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\r\n                \"userId\": \"mq3898\", //Usuario\r\n                \"clientDt\": \"clientDt\", //\"Fecha de ejecuciÃ³n del cliente.\"\r\n                \"appName\": \"ReactJs\",//\"Aplicacion que consume el servicio\"\r\n                \"requestId\": \"202112202\",//\"Identificador de la solicitud.\"\r\n                \"channelId\": \"channelID\", //\"Canal consumidor\",                \r\n            }\r\n        }\r\n\r\n        var result = await this.post(url.URL_CORE_DOCUMENTS, data, config);\r\n\r\n        console.log(\"Result Document: \", result);\r\n\r\n        /*\r\n        var result = {\r\n            \"Status\": {\r\n                \"StatusCode\": \"M0000\",\r\n                \"StatusDesc\": \"OK\"\r\n            },\r\n            \"Token\": \"e793-ddb2-ab0e-6626-5d3e-5f19-b79b-1f5d\",\r\n            \"Result\": {\r\n                \"DocName\": \"TDC - Contrato de TDC  (98765432)\",\r\n                \"DocumentID\": \"34589873\",\r\n                \"FormType\": \"HTML\"\r\n            }\r\n        }\r\n        */\r\n        //console.log(result);\r\n        if (result.Status.StatusCode === \"M0000\") {\r\n            var dataresult = { docName: result.Result['DocName'], documentId: result.Result['DocumentID'], formType: result.Result['FormType'] }\r\n            return dataresult;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    //documents -> Ver documento en gestor documental ONBASE\r\n    //VerDocumentoECM\r\n    async postViewDocument(docId) {\r\n\r\n        try {\r\n            console.log(docId);\r\n            var data = {\r\n                DocumentHandle: docId,\r\n                ReturnBase64: false\r\n            }\r\n\r\n            var result = await this.post(url.URL_CORE_DOCUMENTSVIEW, data);\r\n\r\n            console.log(\"Result Document: \", result);\r\n\r\n            return result.Documents[0].DocPop;\r\n        }\r\n        catch (e) { }\r\n        return null;\r\n\r\n\r\n\r\n    }\r\n\r\n    //v1/parties/information -> retorna la info del cliente\r\n    //BuscarClienteCORE\r\n    async getPartiesInformation(params) {\r\n\r\n        /*var item =[ {id:800120843,clientnumber:800120843,clientname:\"Israel Michel Gomez Alfonso\",firstname:\"Israel\",secondname:\"Michel\",\r\n        lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"CED\",idnumber:\"456123\"},\r\n        {id:800120845,clientnumber:800120845,clientname:\"Pancho Pedro Gomez Alfonso\",firstname:\"Pancho\",secondname:\"Pedro\",\r\n        lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"RUC\",idnumber:\"456456\"}];\r\n        return item;*/\r\n        //params = {PartyType:Juridico,PartyId:600088018}\r\n        var data = qs.stringify(params);\r\n        console.log(data);\r\n        //url.URL_CORSBYPASS +\r\n        var result = await this.get(url.URL_CORE_PARTIEINFO + \"?\" + data);\r\n        console.log(result);\r\n        if (result.Status.StatusCode === \"M0000\") {\r\n            return ClientInfoModel.fromJson(result);\r\n        }\r\n        else {\r\n            result[\"error\"] = \"Error de Servicio del Core\";//result.Status.StatusDesc;\r\n            result[\"errorCode\"] = result.Status.StatusCode;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    async getPartiesInformationExtra(typePerson, customerNumberT24) {\r\n        try {\r\n            var params = { PartyType: (Number(typePerson) === 1 ? \"Natural\" : \"Juridico\"), PartyId: customerNumberT24 }\r\n            var result = await this.getPartiesInformation(params);\r\n            if (result !== undefined && result.length > 0) {\r\n                var data = result[0];\r\n                console.log(\"getPartiesInformationExtra\", data);\r\n                var extraInfo = {\r\n                    activity: {\r\n                        \"EconomicActivity\": data[\"economicActivity\"]\r\n                    },\r\n                    address: {\r\n                        \"Country\": data[\"address\"]?.Country?.CountryCode ?? \"\",\r\n                        \"Province\": data[\"address\"]?.Province?.Cod ?? \"\",\r\n                        \"CountyDistrict\": data[\"address\"]?.CountyDistrict?.Cod ?? \"\",\r\n                        \"Jurisdiction\": data[\"address\"]?.Jurisdiction?.Cod ?? \"\",\r\n                        \"City\": data[\"address\"]?.City?.Desc ?? \"\",\r\n                        \"AddrDesc\": data[\"address\"]?.AddrDesc ?? \"\",\r\n                        \"Building\": data[\"address\"]?.Building?.Desc ?? \"\",\r\n                        \"HouseNumber\": data[\"address\"]?.HouseNumber ?? \"\",\r\n                        \"Street\": data[\"address\"]?.Street ?? \"\"\r\n                    },\r\n                    \"PhoneNumber\": data[\"phoneNumber\"],\r\n                    \"Email\": data[\"email\"]\r\n                }\r\n\r\n                return extraInfo;\r\n            }\r\n        }\r\n        catch (err) { }\r\n        return undefined\r\n    }\r\n\r\n    //Accionistas\r\n    async getPartiesStaff(PartyId) {\r\n\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var params = { PartyId: PartyId }//{PartyId:600235373}\r\n        params = qs.stringify(params);\r\n\r\n        var result = await this.get(url.URL_CORE_PARTIESTAFF + \"?\" + params);\r\n        return PartiesStaffModel.fromJson(result);\r\n\r\n    }\r\n\r\n    ///v1/parties/staff\r\n    async putPartiesStaff(data) {\r\n\r\n        var result = await this.put(url.URL_CORE_PARTIESTAFF, data);\r\n\r\n        return PartiesStaffModel.fromJson(result);\r\n    }\r\n\r\n    //ConsultarListaEmpresasRelacionadas\r\n    async getCompaniesRelations(params) {\r\n\r\n        //params = {PartyId:600012387}\r\n        var data = qs.stringify(params);\r\n\r\n        var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\r\n\r\n        return PartiesStaffModel.fromJson(result);\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                       Api para obtener todos los paises desde el catalogo                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPaisesCatalogo() {\r\n        try {\r\n            // var result = sessionStorage.getItem('catPaises');\r\n            // if (result !== undefined && result !== null) {\r\n            //     result = JSON.parse(result)\r\n            //     await convertToUpperCasesData(result)\r\n            //     return result;\r\n            // }\r\n            //sessionStorage.setItem('catPaises', JSON.stringify(result.roles));\r\n\r\n            let params = {\r\n                catalog_name: 'PAIS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n\r\n            await convertToUpperCasesData(result.catalog)\r\n\r\n            sessionStorage.setItem('catPaises', JSON.stringify(result.catalog));\r\n\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*       Api para obtener las provincias de un pais, pasandole como parametro el id del pais      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getProvinciasCatalogo(pais) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'PROVINCIA',\r\n                parent_catalog_name: pais,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*    API para obtener los distrito de cada provincia pasandole como parametro el id provincia    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getDistritoCatalogo(provincia) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'DISTRITO',\r\n                parent_catalog_name: provincia,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                      Api para obtener los corregimientos de cada distrito                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCorregimientoCatalogo(distrito) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'CORREGIMIENTO',\r\n                parent_catalog_name: distrito,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                         Api para obtener las ciudades de cada provincia                        */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCiudadCatalogo(provincia) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'CIUDAD',\r\n                parent_catalog_name: provincia,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                      Api para obtener el grupo economico de los catalogos                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getGrupoEconomicoCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'GRUPO ECONOMICO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            result.catalog.Records.unshift({ Description: \"N/A\", Code: \"N/A\" })\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                   Api para obtener las bancas esta api proviene de catalogos                   */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getBancaCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'BANCA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                   Api muestra todos los cargos que retorna desde el catalogo                   */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCargosCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'CARGO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     Api retorna todos los bancos exitentes para el catalogo                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getBancosCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'BANCOS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getActividadEconomicaCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'ACTIVIDAD ECONOMICA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSubActividadEconomicaCatalogo(codeActividad) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'SUB ACTIVIDAD ECONOMICA',\r\n                parent_catalog_name: codeActividad,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO DE SECTOR ECONOMICO                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSectorEconomicoCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'SECTOR ECONOMICO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO RELACION                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getRelacionCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'RELACION',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO TIPO DE GARANTIA                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getTipoGarantiaCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'TIPO DE GARANTIA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    async getSubTipoGarantiaCatalogo(codGarantia) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'SUB TIPO GARANTIA',\r\n                parent_catalog_name: codGarantia,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n    /*\r\n    \"catalog\": {\r\n        \"type\": \"TIPO DE GARANTIA\",\r\n        \"records\": [\r\n            {\r\n                \"CODIGO\": \"100\",\r\n                \"DESCRIPCION\": \"Garantia Hipotecaria Mueble\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"200\",\r\n                \"DESCRIPCION\": \"Garantia Hipotecaria Inmueble\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"300\",\r\n                \"DESCRIPCION\": \"Depositos Pignorados en el Banco\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"400\",\r\n                \"DESCRIPCION\": \"Depositos Pignorados en Otros Banco\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"500\",\r\n                \"DESCRIPCION\": \"Garantia Prendaria\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"600\",\r\n                \"DESCRIPCION\": \"Otras Garantias\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"700\",\r\n                \"DESCRIPCION\": \"SIN GARANTIAS\"\r\n            }\r\n        ]\r\n    }\r\n    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO MONEDAS                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getMonedaCatalogo() {\r\n\r\n        try {\r\n            let params = {\r\n                catalog_name: 'MONEDA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                       Api para obtener todos las sucursales o agencias catalogo                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSucursalesCatalogo() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SUCURSAL',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Tipo de Limites de Credito\r\n    async getTypeOfCreditLimitsCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'LIMIT REFERENCE',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Aseguradoras\r\n    async getInsurersCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'ASEGURADORAS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Marcas de Auto\r\n    async getCarBrandCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'MARCA DE AUTOS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Modelos de Auto\r\n    async getCarModelCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'MODELO DE AUTO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Corredoras\r\n    async getBrokersCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'BROKER',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Fiduciaria\r\n    async getTrusteeCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'FIDUCIARIAS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Producto\r\n    async getProductCatalog() {\r\n        try {\r\n            // return json;\r\n            /*let params = {\r\n                catalog_name: 'SUBPRODUCTO',\r\n                parent_catalog_name: \"3200\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            */\r\n\r\n            var result = {\r\n                \"catalog\": {\r\n                    \"type\": \"TIPO DE PRODUCTO\",\r\n                    \"records\": [\r\n                        {\r\n                            \"CODIGO\": \"3200\",\r\n                            \"DESCRIPCION\": \"Comercial\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - SubProducto\r\n    async getSubProductCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SUBPRODUCTO',\r\n                parent_catalog_name: \"3200\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Categorias\r\n    async getCategoriesCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'CATEGORIA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Tipo de poliza\r\n    async getPolicyTypeCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'TIPO POLIZA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Sub tipo de Garantia\r\n    async getSubTypeWarrantyCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SUB TIPO GARANTIA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Clases de Auto\r\n    async getAutoClassCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'CLASE AUTO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Avaluadora\r\n    async getAppraiserCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'AVALUADORA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Tipo de Desembolso\r\n    async getTipoDesembolsoCatalogo() {\r\n        try {\r\n            /*let params = {\r\n                catalog_name: 'CIUDAD',\r\n                parent_catalog_name: provincia,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)*/\r\n\r\n            var result = {\r\n                \"catalog\": {\r\n                    \"type\": \"Tipo Desembolso\",\r\n                    \"records\": [\r\n                        {\r\n                            \"CODIGO\": \"100\",\r\n                            \"DESCRIPCION\": \"Bajo Linea\"\r\n                        },\r\n                        {\r\n                            \"CODIGO\": \"200\",\r\n                            \"DESCRIPCION\": \"Comercial\"\r\n                        },\r\n                    ]\r\n                }\r\n            }\r\n\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    //CATALOGO - Fuentes de Ventas\r\n    async getSourceSalesCatalogo() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SALE INFORMATION',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    //CATALOGO - Autonomias\r\n    async getAutonomiaCatalogo() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'AUTONOMIAS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    //CATALOGO - Authority\r\n    async getAuthorityTypeCatalogo() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'AUTH TYPE',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            await convertToUpperCasesData(result.catalog)\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------*/\r\n    ///v1/loans/details/informations\r\n    //Retorna las facilidades de un cliente ... partyId -> numero del cliente en T24\r\n    //getFacilidades\r\n\r\n    async getFacilitiesByTransaction(transactId) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n\r\n            var result = [];\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getFacilities(debtors[i].customerNumberT24);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        dataResult.forEach(function (item) {\r\n                            item[\"debtorName\"] = debtors[i].typePerson === \"2\" ? debtors[i].name : (debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2)\r\n                            item[\"debtorId\"] = debtors[i].personId;\r\n                            result.push(item);\r\n                        });\r\n                    }\r\n                }\r\n                catch (err) { }\r\n                try {\r\n                    var dataResult = await this.getCreditCard(debtors[i].customerNumberT24);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        dataResult.forEach(function (item) {\r\n                            item[\"debtorName\"] = debtors[i].typePerson === \"2\" ? debtors[i].name : (debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2)\r\n                            item[\"debtorId\"] = debtors[i].personId;\r\n                            result.push(item);\r\n                        });\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            console.log(\"getAllTermDebtsByTransaction\", result);\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n    async getFacilities(partyId) {\r\n        try {\r\n\r\n            const currencyData = new Currency();\r\n\r\n            if (partyId.length <= 0) {\r\n                return undefined;\r\n            }\r\n\r\n            var dataResult = [];\r\n\r\n            ////// Credit - Cortos Plazos\r\n            try {\r\n                var params = { PartyId: partyId }\r\n                var data = qs.stringify(params);\r\n\r\n                //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \r\n                //servicio retorna las cuentas del cliente\r\n                var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\r\n\r\n                //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\r\n\r\n                if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\r\n\r\n                    result.Party.PartyInfo.CreditLine.forEach((item) => {\r\n                        try {\r\n                            /*\r\n                            {\r\n                        \"AvailableAmt\": {\r\n                            \"Amt\": \"75,000.00\"\r\n                        },\r\n                        \"CreditLineId\": \"800048231.0010000.01\",\r\n                        \"CreditLineNum\": \"01\",\r\n                        \"CreditType\": {\r\n                            \"Desc\": \"LÃ­mite Global - rotativo\"\r\n                        },\r\n                        \"CurCode\": \"USD\",\r\n                        \"IntRateType\": {\r\n                            \"Desc\": \"Fixed\"\r\n                        },\r\n                        \"OnlineAmt\": {\r\n                            \"Amt\": \"125000.00\"\r\n                        },\r\n                        \"PendingAmt\": {\r\n                            \"Amt\": \"50,000.00\"\r\n                        },\r\n                        \"Rating\": \"01\",\r\n                        \"SecuredAmt\": {\r\n                            \"Amt\": \"0.00\"\r\n                        }\r\n                    }\r\n                            */\r\n\r\n                            if ((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length < 2) {\r\n                                //item.AvailableAmt.Amt\r\n                                var deudas = { debtype: \"short\", facilityType: item.CreditType.Desc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)), approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)), variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                                //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                                dataResult.push({\r\n                                    \"facilityType\": deudas.facilityType,\r\n                                    \"approvedAmount\": deudas.approved,\r\n                                    \"approvedDate\": deudas.startDate,\r\n                                    \"actualBalance\": deudas.variation,\r\n                                    \"debtorName\": \"\",\r\n                                    \"AcctId\": \"\",\r\n                                });\r\n                            }\r\n                        }\r\n                        catch (err) { }\r\n                    })\r\n                }\r\n                else {\r\n                    // myVarToTest is not an array\r\n                    //Armamos la data a mostrar en pantalla\r\n                    var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                    try {\r\n                        if ((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length < 2) {\r\n                            var deudas = { debtype: \"short\", facilityType: item.CreditType.Desc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)), approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)), variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                            //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                            dataResult.push({\r\n                                \"facilityType\": deudas.facilityType, \"approvedAmount\": deudas.approved,\r\n                                \"approvedDate\": deudas.startDate, \"actualBalance\": deudas.balance,\r\n                                \"debtorName\": \"\",\r\n                                \"AcctId\": \"\",\r\n                            });\r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                }\r\n            }\r\n            catch (err) { }\r\n\r\n            ////// loands - Cortos y Largos Plazos\r\n            try {\r\n                let params = {\r\n                    PartyId: partyId\r\n                }\r\n                let data = qs.stringify(params);\r\n                var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\r\n\r\n                if (Array.isArray(result.AcctLoans.AcctLoan)) {\r\n\r\n                    result.AcctLoans.AcctLoan.forEach((item) => {\r\n                        if (item.AcctKey !== null) {\r\n                            try {\r\n                                /*\r\n                                {\r\n                        \"Category\": \"01\",\r\n                        \"Desc\": \"340000071156\",\r\n                        \"ProductDesc\": \"Prestamo Comercia\",\r\n                        \"AcctOpeningInfo\": {\r\n                            \"InitialAmt\": {\r\n                                \"Amt\": \"120000.00\",\r\n                                \"CurCode\": \"USD\"\r\n                            },\r\n                            \"OpenDt\": \"2019-08-02\"\r\n                        },\r\n                        \"CreditAcctData\": {\r\n                            \"DueDt\": \"2028-07-05\",\r\n                            \"CreditAcctPmtInfo\": null\r\n                        },\r\n                        \"AcctKey\": {\r\n                            \"AcctId\": \"1020243542\"\r\n                        },\r\n                        \"AcctBal\": [\r\n                            {\r\n                                \"BalType\": \"Balance\",\r\n                                \"CurAmt\": {\r\n                                    \"Amt\": \"87245.92\"\r\n                                }\r\n                            }\r\n                        ],\r\n                        \"AcctMember\": [\r\n                            {\r\n                                \"PartyRole\": {\r\n                                    \"Cod\": \"TITULAR/DEUDOR\"\r\n                                },\r\n                                \"PartyName\": {\r\n                                    \"ShortName\": \"ASI DEVELOPMENT\"\r\n                                },\r\n                                \"PartyKey\": null\r\n                            }\r\n                        ]\r\n                    }\r\n                                */\r\n\r\n                                var deudas = { debtype: \"short\", facilityType: item.ProductDesc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)), approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)), variation: 0, startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"), endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\") }\r\n                                deudas.variation = deudas.approved - deudas.balance;\r\n                                dataResult.push({\r\n                                    \"facilityType\": deudas.facilityType, \"approvedAmount\": deudas.approved,\r\n                                    \"approvedDate\": deudas.startDate, \"actualBalance\": deudas.balance,\r\n                                    \"debtorName\": \"\",\r\n                                    \"AcctId\": item.AcctKey.AcctId,\r\n                                });\r\n                            }\r\n                            catch (err) { }\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    // myVarToTest is not an array\r\n                    //Armamos la data a mostrar en pantalla\r\n                    var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                    if (item.AcctKey !== null) {\r\n                        try {\r\n                            var deudas = { debtype: \"short\", facilityType: item.ProductDesc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)), approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)), variation: 0, startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"), endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\") }\r\n                            deudas.variation = deudas.approved - deudas.balance;\r\n                            dataResult.push({\r\n                                \"facilityType\": deudas.facilityType, \"approvedAmount\": deudas.approved,\r\n                                \"approvedDate\": deudas.startDate, \"actualBalance\": deudas.balance,\r\n                                \"debtorName\": \"\",\r\n                                \"AcctId\": item.AcctKey.AcctId,\r\n                            });\r\n                        }\r\n                        catch (err) { }\r\n                    }\r\n\r\n                }\r\n            }\r\n            catch (err) { }\r\n\r\n\r\n            console.log(\"getFacilities\", dataResult)\r\n            return dataResult;\r\n        }\r\n        catch (err) { console.error(err) }\r\n        return undefined;\r\n    }\r\n\r\n    //retorna los Clientes Relacionados se le pasa el Numero de Cliente de T24\r\n    async getRelatedClients(partyId) {\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: partyId\r\n        }\r\n\r\n        let data = qs.stringify(params);\r\n\r\n        var dataResult = [];\r\n\r\n        try {\r\n\r\n            //servicio retorna clientes relacionados\r\n            var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\r\n            if (result.error !== undefined) {\r\n                return result;\r\n            }\r\n\r\n            //Armamos la data a mostrar en pantalla\r\n            result.PartyPartyRels.PartyPartyRel.forEach((client) => {\r\n                try {\r\n                    var partyNumber = client.PartyPartyRelInfo.PartyRef[0].RelPartyRef[0].PartyKey[0].PartyId;\r\n                    if (partyNumber !== undefined && partyNumber !== null && partyNumber.length > 0) {\r\n                        dataResult.push(partyNumber);\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            });\r\n        }\r\n        catch (err) { }\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    //ExposicionCorporativa se le pasa el Numero de Cliente de T24\r\n    async getCorporateExhibition(transactId) {\r\n\r\n        const currencyData = new Currency();\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors === null || debtors === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        var dataResult = [];\r\n        var longTerm = { name: \"Facilidades Largo Plazo\", approved: 0, balance: 0, proposal: 0, variation: 0 };\r\n        var shortTerm = { name: \"Facilidades Corto Plazo\", approved: 0, balance: 0, proposal: 0, variation: 0 };\r\n        var totalTerm = { name: \"Total de Facilidades\", approved: 0, balance: 0, proposal: 0, variation: 0 };\r\n        var pledged = { name: \"Monto Pignorado\", approved: 0, balance: 0, proposal: 0, variation: 0 };\r\n        var netExposition = { name: \"Exposicion Neta\", approved: 0, balance: 0, proposal: 0, variation: 0 };\r\n\r\n        ////// Credit - Cortos Plazos\r\n        for (var i = 0; i < debtors.length; i++) {\r\n            var partyId = debtors[i].customerNumberT24;\r\n            if (partyId.length > 0) {\r\n                try {\r\n                    var params = { PartyId: partyId }\r\n                    var data = qs.stringify(params);\r\n\r\n                    //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \r\n                    //servicio retorna las cuentas del cliente\r\n                    var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\r\n                    if (result.error !== undefined) {\r\n                        return result;\r\n                    }\r\n                    //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\r\n\r\n                    if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\r\n\r\n                        result.Party.PartyInfo.CreditLine.forEach((item) => {\r\n                            try {\r\n                                /*\r\n                                {\r\n                            \"AvailableAmt\": {\r\n                                \"Amt\": \"75,000.00\"\r\n                            },\r\n                            \"CreditLineId\": \"800048231.0010000.01\",\r\n                            \"CreditLineNum\": \"01\",\r\n                            \"CreditType\": {\r\n                                \"Desc\": \"LÃ­mite Global - rotativo\"\r\n                            },\r\n                            \"CurCode\": \"USD\",\r\n                            \"IntRateType\": {\r\n                                \"Desc\": \"Fixed\"\r\n                            },\r\n                            \"OnlineAmt\": {\r\n                                \"Amt\": \"125000.00\"\r\n                            },\r\n                            \"PendingAmt\": {\r\n                                \"Amt\": \"50,000.00\"\r\n                            },\r\n                            \"Rating\": \"01\",\r\n                            \"SecuredAmt\": {\r\n                                \"Amt\": \"0.00\"\r\n                            }\r\n                        }\r\n                                */\r\n\r\n                                if ((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length < 2) {\r\n                                    var deudas = { debtype: \"short\", facilityType: item.CreditType.Desc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)), approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)), variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                                    //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                                    if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                                        //deudas.debtype=\"long\";     \r\n                                        longTerm.approved += Number(deudas.approved);\r\n                                        longTerm.balance += Number(deudas.variation);\r\n                                    }\r\n                                    else {\r\n                                        shortTerm.approved += Number(deudas.approved);\r\n                                        shortTerm.balance += Number(deudas.variation);\r\n                                    }\r\n                                }\r\n                            }\r\n                            catch (err) { }\r\n                        })\r\n                    }\r\n                    else {\r\n                        // myVarToTest is not an array\r\n                        //Armamos la data a mostrar en pantalla\r\n                        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                        try {\r\n                            if ((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length < 2) {\r\n                                var deudas = { debtype: \"short\", facilityType: item.CreditType.Desc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)), approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)), variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                                //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                                if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                                    //deudas.debtype=\"long\";     \r\n                                    longTerm.approved += Number(deudas.approved);\r\n                                    longTerm.balance += Number(deudas.variation);\r\n                                }\r\n                                else {\r\n                                    shortTerm.approved += Number(deudas.approved);\r\n                                    shortTerm.balance += Number(deudas.variation);\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (err) { }\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n\r\n        ////// Tarjeta de Creditos - Cortos Plazos\r\n        for (var i = 0; i < debtors.length; i++) {\r\n            try {\r\n                var result = await this.getCreditCard(debtors[i].customerNumberT24);\r\n                if (result.error !== undefined) {\r\n                    return result;\r\n                }\r\n                /*{\r\n                    \"facilityType\": item.CardInfo.Desc, \r\n                    \"approvedAmount\": approvedAmt?.CurAmt??0,\r\n                    \"approvedDate\": item.CardInfo.EndDt!==undefined?item.CardInfo.EndDt:moment().format(\"YYYY-MM-DD\"), \r\n                    \"actualBalance\":  balanceAmt?.CurAmt??0,\r\n                    \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n                    \"AcctId\": \"\",\r\n                } */\r\n\r\n                result.forEach(item => {\r\n                    shortTerm.approved += Number(item.approvedAmount);\r\n                    shortTerm.balance += Number(item.actualBalance);\r\n                })\r\n            }\r\n            catch (err) { }\r\n        }\r\n\r\n        ////// loands - Cortos y Largos Plazos\r\n        for (var i = 0; i < debtors.length; i++) {\r\n            var partyId = debtors[i].customerNumberT24;\r\n            if (partyId.length > 0) {\r\n                try {\r\n                    let params = {\r\n                        PartyId: partyId\r\n                    }\r\n                    let data = qs.stringify(params);\r\n                    var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\r\n                    if (result.error !== undefined) {\r\n                        return result;\r\n                    }\r\n\r\n                    if (Array.isArray(result.AcctLoans.AcctLoan)) {\r\n\r\n                        result.AcctLoans.AcctLoan.forEach((item) => {\r\n                            if (item.AcctKey !== null) {\r\n                                try {\r\n                                    /*\r\n                                    {\r\n                            \"Category\": \"01\",\r\n                            \"Desc\": \"340000071156\",\r\n                            \"ProductDesc\": \"Prestamo Comercia\",\r\n                            \"AcctOpeningInfo\": {\r\n                                \"InitialAmt\": {\r\n                                    \"Amt\": \"120000.00\",\r\n                                    \"CurCode\": \"USD\"\r\n                                },\r\n                                \"OpenDt\": \"2019-08-02\"\r\n                            },\r\n                            \"CreditAcctData\": {\r\n                                \"DueDt\": \"2028-07-05\",\r\n                                \"CreditAcctPmtInfo\": null\r\n                            },\r\n                            \"AcctKey\": {\r\n                                \"AcctId\": \"1020243542\"\r\n                            },\r\n                            \"AcctBal\": [\r\n                                {\r\n                                    \"BalType\": \"Balance\",\r\n                                    \"CurAmt\": {\r\n                                        \"Amt\": \"87245.92\"\r\n                                    }\r\n                                }\r\n                            ],\r\n                            \"AcctMember\": [\r\n                                {\r\n                                    \"PartyRole\": {\r\n                                        \"Cod\": \"TITULAR/DEUDOR\"\r\n                                    },\r\n                                    \"PartyName\": {\r\n                                        \"ShortName\": \"ASI DEVELOPMENT\"\r\n                                    },\r\n                                    \"PartyKey\": null\r\n                                }\r\n                            ]\r\n                        }\r\n                                    */\r\n\r\n                                    var deudas = { debtype: \"short\", facilityType: item.ProductDesc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)), approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)), variation: 0, startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"), endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\") }\r\n                                    deudas.variation = deudas.approved - deudas.balance;\r\n                                    if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                                        //deudas.debtype=\"long\";     \r\n                                        longTerm.approved += Number(deudas.approved);\r\n                                        longTerm.balance += Number(deudas.balance);\r\n                                    }\r\n                                    else {\r\n                                        shortTerm.approved += Number(deudas.approved);\r\n                                        shortTerm.balance += Number(deudas.balance);\r\n                                    }\r\n                                }\r\n                                catch (err) { }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        // myVarToTest is not an array\r\n                        //Armamos la data a mostrar en pantalla\r\n                        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                        if (item.AcctKey !== null) {\r\n                            try {\r\n                                var deudas = { debtype: \"short\", facilityType: item.ProductDesc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)), approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)), variation: 0, startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"), endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\") }\r\n                                deudas.variation = deudas.approved - deudas.balance;\r\n                                if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                                    //deudas.debtype=\"long\";     \r\n                                    longTerm.approved += Number(deudas.approved);\r\n                                    longTerm.balance += Number(deudas.balance);\r\n                                }\r\n                                else {\r\n                                    shortTerm.approved += Number(deudas.approved);\r\n                                    shortTerm.balance += Number(deudas.balance);\r\n                                }\r\n                            }\r\n                            catch (err) { }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n\r\n        longTerm.variation = Number(longTerm.approved) - Number(longTerm.balance);\r\n        shortTerm.variation = Number(shortTerm.approved) - Number(shortTerm.balance);\r\n\r\n        dataResult.push(longTerm);\r\n        dataResult.push(shortTerm);\r\n\r\n        totalTerm.approved = Number(shortTerm.approved) + Number(longTerm.approved);\r\n        totalTerm.balance = Number(shortTerm.balance) + Number(longTerm.balance);\r\n        totalTerm.variation = Number(totalTerm.approved) - Number(totalTerm.balance);\r\n\r\n        dataResult.push(totalTerm);\r\n\r\n        //servicio retorna Pignorados\r\n        for (var i = 0; i < debtors.length; i++) {\r\n            var partyId = debtors[i].customerNumberT24;\r\n            if (partyId.length > 0) {\r\n                let params = {\r\n                    PartyId: partyId\r\n                }\r\n                let data = qs.stringify(params);\r\n                try {\r\n                    var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data);\r\n                    if (result.error !== undefined) {\r\n                        return result;\r\n                    }\r\n                    //Armamos la data a mostrar en pantalla\r\n                    result.Collaterals.CollateralInfo.map(function (item, i) {\r\n                        if (item.AcctKey.AcctReference !== null && item.Collateral.InsuranceInfo.Status === \"CUR\") {\r\n                            pledged.approved += Number(item.Collateral.CollateralAmt.Amt);\r\n                            pledged.balance = pledged.approved;\r\n                        }\r\n                    })\r\n                    pledged.variation = Number(pledged.approved) - Number(pledged.balance);\r\n\r\n                }\r\n                catch (err) {\r\n                    console.error(\"URL_CORE_PIGNORADO\", err);\r\n                }\r\n            }\r\n        }\r\n        dataResult.push(pledged);\r\n\r\n        if (dataResult.length > 0) {\r\n            netExposition.approved = Number(totalTerm.approved) - Number(pledged.approved);\r\n            netExposition.proposal = Number(totalTerm.proposal) - Number(pledged.proposal);\r\n            netExposition.variation = Number(totalTerm.variation) - Number(pledged.variation);\r\n\r\n            dataResult.push(netExposition);\r\n        }\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    //ExposicionCorporativa se le pasa el Numero de Cliente de T24\r\n    async getCorporateExhibitionByClients(partyId) {\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let clients = await this.getRelatedClients(partyId);\r\n        if (clients.error !== undefined) {\r\n            return clients;\r\n        }\r\n\r\n        var dataResult = [];\r\n        for (var i = 0; i < clients.length; i++) {\r\n            let result = await this.getCorporateExhibition(clients[i]);\r\n            if (result.error !== undefined) {\r\n                return result;\r\n            }\r\n\r\n            if (result !== null && result.length > 0) {\r\n                dataResult.push({ clientId: \"Cliente: \" + clients[i], data: result });\r\n            }\r\n        }\r\n        return dataResult;\r\n    }\r\n\r\n    //Deudas a Corto y Largo Plazo --- APC, Credit, Loand del Tramite Completo    \r\n    async getAllTermDebtsByTransaction(transactId) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n\r\n            var result = { longTermresult: [], shortTermresult: [] };\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getAllTermDebts(debtors[i].customerNumberT24, debtors[i].clientDocId, debtors[i].idType);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        dataResult.longTermresult.forEach(function (item) {\r\n                            result.longTermresult.push(item);\r\n                        });\r\n                        dataResult.shortTermresult.forEach(function (item) {\r\n                            result.shortTermresult.push(item);\r\n                        });\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    //Deudas a Corto y Largo Plazo --- APC, Credit, Loand\r\n    async getAllTermDebts(partyId, identification, idType) {\r\n\r\n        const currencyData = new Currency();\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        if (identification.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var dataResult = { longTermresult: [], shortTermresult: [] };\r\n\r\n        ////// APC\r\n        try {\r\n            let typeofId = \"Cedula\";\r\n            switch (idType) {\r\n                case \"CED\": {\r\n                    typeofId = \"Cedula\";\r\n                    break;\r\n                }\r\n                case \"RUC\": {\r\n                    typeofId = \"RUC\";\r\n                    break;\r\n                }\r\n                case \"PAS\": {\r\n                    typeofId = \"Pasaporte\";\r\n                    break;\r\n                }\r\n            }\r\n            var tmpidentification = \"\";\r\n            identification.split('-').map((str) => {\r\n                if (str.startsWith(\"0\")) {\r\n                    tmpidentification += str.replace(/^0+/, '') + \"-\";\r\n                }\r\n                else {\r\n                    tmpidentification += str + \"-\";\r\n                }\r\n            })\r\n            if (tmpidentification.startsWith(\"-\")) {\r\n                tmpidentification = tmpidentification.substring(1);\r\n            }\r\n\r\n            identification = tmpidentification.substring(0, tmpidentification.length - 1);\r\n            var params = {\r\n                \"ConsultarAPC\": {\r\n                    \"Model\": {\r\n                        \"EsPrueba\": 0,\r\n                        \"ForzarBusqueda\": 0,\r\n                        \"IdentificacionConsulta\": identification,//\"8-773-1899\",\r\n                        \"PasswordAPC\": \"Banesco19.\",\r\n                        \"TipoCliente\": typeofId,\r\n                        \"UltimusProcess\": 7,\r\n                        \"UsuarioAPC\": \"WTIBANESCO001\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            //servicio retorna la info de APC del cliente\r\n            const result = await this.post(url.URL_CORE_APCINFO, params);\r\n\r\n            if (Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)) {\r\n                // myVatToTest is an array\r\n                //Armamos la data a mostrar en pantalla\r\n                result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\r\n                    try {\r\n                        if (item.dc_nom_asoc.toUpperCase().indexOf('BANESCO') < 0 && item.dc_descr_corta_rela.toUpperCase().indexOf('SERVICIOS') < 0) {\r\n                            console.log(\"ServicioAPC\", item.dc_nom_asoc)\r\n                            var deudas = { paymentHistory: item.dc_historia, debtype: \"short\", facilityType: item.dc_descr_corta_rela, bank: item.dc_nom_asoc, balance: Number(currencyData.getRealValue(item.dc_saldo_actual)), approvedAmount: Number(currencyData.getRealValue(item.dc_monto_original)), variation: 0, startDate: item.dc_fec_inicio_rel, endDate: item.dc_fec_fin_rel }\r\n                            deudas.variation = deudas.approvedAmount - deudas.balance;\r\n                            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                                deudas.debtype = \"long\";\r\n                                dataResult.longTermresult.push(deudas)\r\n                            }\r\n                            else {\r\n                                dataResult.shortTermresult.push(deudas)\r\n                            }\r\n                            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {\r\n                    if (item.dc_nom_asoc.toUpperCase().indexOf('BANESCO') < 0 && item.dc_descr_corta_rela.toUpperCase().indexOf('SERVICIOS') < 0) {\r\n                        var deudas = { paymentHistory: item.dc_historia, debtype: \"short\", facilityType: item.dc_descr_corta_rela, bank: item.dc_nom_asoc, balance: Number(currencyData.getRealValue(item.dc_saldo_actual)), approvedAmount: Number(currencyData.getRealValue(item.dc_monto_original)), variation: 0, startDate: item.dc_fec_inicio_rel, endDate: item.dc_fec_fin_rel }\r\n                        deudas.variation = deudas.approvedAmount - deudas.balance;\r\n                        if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                            deudas.debtype = \"long\";\r\n                            dataResult.longTermresult.push(deudas)\r\n                        }\r\n                        else {\r\n                            dataResult.shortTermresult.push(deudas)\r\n                        }\r\n                        deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                        deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        ////// Credit - Cortos Plazos\r\n        try {\r\n            var params = { PartyId: partyId }\r\n            var data = qs.stringify(params);\r\n\r\n            //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \r\n            //servicio retorna las cuentas del cliente\r\n            var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\r\n\r\n            if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\r\n\r\n                result.Party.PartyInfo.CreditLine.forEach((item) => {\r\n                    try {\r\n                        /*\r\n                        {\r\n                    \"AvailableAmt\": {\r\n                        \"Amt\": \"75,000.00\"\r\n                    },\r\n                    \"CreditLineId\": \"800048231.0010000.01\",\r\n                    \"CreditLineNum\": \"01\",\r\n                    \"CreditType\": {\r\n                        \"Desc\": \"LÃ­mite Global - rotativo\"\r\n                    },\r\n                    \"CurCode\": \"USD\",\r\n                    \"IntRateType\": {\r\n                        \"Desc\": \"Fixed\"\r\n                    },\r\n                    \"OnlineAmt\": {\r\n                        \"Amt\": \"125000.00\"\r\n                    },\r\n                    \"PendingAmt\": {\r\n                        \"Amt\": \"50,000.00\"\r\n                    },\r\n                    \"Rating\": \"01\",\r\n                    \"SecuredAmt\": {\r\n                        \"Amt\": \"0.00\"\r\n                    }\r\n                }\r\n                        */\r\n                        var deudas = { paymentHistory: \"\", debtype: \"short\", facilityType: item.CreditType.Desc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)), approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)), variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                        //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n\r\n                        if ((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length < 2) {\r\n                            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                                deudas.debtype = \"long\";\r\n                                dataResult.longTermresult.push(deudas)\r\n                            }\r\n                            else {\r\n                                dataResult.shortTermresult.push(deudas)\r\n                            }\r\n\r\n                            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {\r\n\r\n                    var deudas = { paymentHistory: \"\", debtype: \"short\", facilityType: item.CreditType.Desc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.PendingAmt.Amt)), approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)), variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                    //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                    if ((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length < 2) {\r\n                        if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                            deudas.debtype = \"long\";\r\n                            dataResult.longTermresult.push(deudas)\r\n                        }\r\n                        else {\r\n                            dataResult.shortTermresult.push(deudas)\r\n                        }\r\n\r\n                        deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                        deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        /// Tarjetas de Creditos\r\n        try {\r\n            var result = await this.getCreditCard(partyId);\r\n            if (Array.isArray(result)) {\r\n\r\n                /*{\r\n                                        \"facilityType\": item.CardInfo.Desc, \r\n                                        \"approvedAmount\": approvedAmt?.CurAmt??0,\r\n                                        \"approvedDate\": item.CardInfo.EndDt!==undefined?item.CardInfo.EndDt:moment().format(\"YYYY-MM-DD\"), \r\n                                        \"actualBalance\":  balanceAmt?.CurAmt??0,\r\n                                        \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n                                        \"AcctId\": \"\",\r\n                                    } */\r\n                result.forEach((item) => {\r\n                    try {\r\n                        var deudas = { paymentHistory: \"\", debtype: \"short\", facilityType: item.facilityType, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.actualBalance)), approvedAmount: Number(currencyData.getRealValue(item.approvedAmount)), variation: Number(currencyData.getRealValue(0)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                        //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n\r\n                        dataResult.shortTermresult.push(deudas)\r\n                        deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                        deudas.startDate = moment(item.approvedDate).format(\"YYYY-MM-DD\")\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result;\r\n                try {\r\n\r\n                    var deudas = { paymentHistory: \"\", debtype: \"short\", facilityType: item.facilityType, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.actualBalance)), approvedAmount: Number(currencyData.getRealValue(item.approvedAmount)), variation: Number(currencyData.getRealValue(0)), startDate: moment().format(\"YYYY-MM-DD\"), endDate: moment().format(\"YYYY-MM-DD\") }\r\n                    //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n\r\n                    dataResult.shortTermresult.push(deudas)\r\n                    deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                    deudas.startDate = moment(item.approvedDate).format(\"YYYY-MM-DD\")\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        ////// loands - Cortos y Largos Plazos\r\n        try {\r\n            let params = {\r\n                PartyId: partyId\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\r\n            console.log(\"shortTermresultLoands\", result);\r\n\r\n            if (Array.isArray(result.AcctLoans.AcctLoan)) {\r\n\r\n                result.AcctLoans.AcctLoan.forEach((item) => {\r\n                    if (item.AcctKey !== null) {\r\n                        try {\r\n                            /*\r\n                            {\r\n                    \"Category\": \"01\",\r\n                    \"Desc\": \"340000071156\",\r\n                    \"ProductDesc\": \"Prestamo Comercia\",\r\n                    \"AcctOpeningInfo\": {\r\n                        \"InitialAmt\": {\r\n                            \"Amt\": \"120000.00\",\r\n                            \"CurCode\": \"USD\"\r\n                        },\r\n                        \"OpenDt\": \"2019-08-02\"\r\n                    },\r\n                    \"CreditAcctData\": {\r\n                        \"DueDt\": \"2028-07-05\",\r\n                        \"CreditAcctPmtInfo\": null\r\n                    },\r\n                    \"AcctKey\": {\r\n                        \"AcctId\": \"1020243542\"\r\n                    },\r\n                    \"AcctBal\": [\r\n                        {\r\n                            \"BalType\": \"Balance\",\r\n                            \"CurAmt\": {\r\n                                \"Amt\": \"87245.92\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"AcctMember\": [\r\n                        {\r\n                            \"PartyRole\": {\r\n                                \"Cod\": \"TITULAR/DEUDOR\"\r\n                            },\r\n                            \"PartyName\": {\r\n                                \"ShortName\": \"ASI DEVELOPMENT\"\r\n                            },\r\n                            \"PartyKey\": null\r\n                        }\r\n                    ]\r\n                }\r\n                            */\r\n\r\n                            var deudas = { paymentHistory: \"\", debtype: \"short\", facilityType: item.ProductDesc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)), approvedAmount: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)), variation: 0, startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"), endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\") }\r\n                            deudas.variation = deudas.approvedAmount - deudas.balance;\r\n                            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                                deudas.debtype = \"long\";\r\n                                dataResult.longTermresult.push(deudas)\r\n                            }\r\n                            else {\r\n                                // dataResult.shortTermresult.push(deudas)                    \r\n                            }\r\n\r\n                            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                        }\r\n                        catch (err) { }\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                if (item.AcctKey !== null) {\r\n                    try {\r\n\r\n                        var deudas = { paymentHistory: \"\", debtype: \"short\", facilityType: item.ProductDesc, bank: \"Banesco\", balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)), approvedAmount: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)), variation: 0, startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"), endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\") }\r\n                        deudas.variation = deudas.approvedAmount - deudas.balance;\r\n                        if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\r\n                            deudas.debtype = \"long\";\r\n                            dataResult.longTermresult.push(deudas)\r\n                        }\r\n                        else {\r\n                            //dataResult.shortTermresult.push(deudas)                    \r\n                        }\r\n\r\n                        deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                        deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                    }\r\n                    catch (err) { }\r\n                }\r\n\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    //Tarjetas de Credito\r\n    async getCreditCardByTransaction(transactId) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n\r\n            var result = [];\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getCreditCard(debtors[i].customerNumberT24);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        dataResult.forEach(function (item) {\r\n                            result.push(item);\r\n                        });\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            console.log(\"getCreditCardByTransaction\", result);\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n    async getCreditCard(partyId) {\r\n\r\n        const currencyData = new Currency();\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var data = {\r\n            \"readCardTDC_Rq\": {\r\n                \"MsgHdr\": {\r\n                    \"TransactionInfo\": {\r\n                        \"MsgUID\": \"F01F1A70-30E0-4478-B95F-987D78A10037\",\r\n                        \"ChannelId\": \"CC\",\r\n                        \"AgencyCode\": 5808,\r\n                        \"OrderDprt\": \"5808-001\",\r\n                        \"TransactionDate\": moment().format(\"YYYY-MM-DD\"),//\"2021-12-12\",\r\n                        \"TransactionTime\": \"12:12:12\"\r\n                    },\r\n                    \"ApplicationInfo\": {\r\n                        \"SourceApp\": \"ESB\",\r\n                        \"Channel\": \"WAY4\"\r\n                    }\r\n                },\r\n                \"Customer\": {\r\n                    \"Type\": \"Personal\",\r\n                    \"PersonInfo\": {\r\n                        \"Type\": \"Personal\",\r\n                        \"CustId\": partyId\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var dataResult = [];\r\n\r\n        ////// Tarjeta de Creditos\r\n        try {\r\n\r\n            var result = await this.post(url.URL_CORE_CreditCard, data);\r\n            console.log(\"shortTermresultCredit\", result);\r\n\r\n            if (Array.isArray(result.readCardTDC_Rs.Customer.Product)) {\r\n\r\n                result.readCardTDC_Rs.Customer.Product.forEach((item) => {\r\n                    try {\r\n\r\n                        if ((item.CardInfo.Type === \"E\" && item.CardInfo.RelationType === \"Y\") || (item.CardInfo.Type === \"I\" && item.CardInfo.RelationType === \"Y\") || (item.CardInfo.Type === \"Y\" && item.CardInfo.RelationType === \"Y\")) {\r\n                            var approvedAmt = item.Statement.StatementInfo.find(x => x.Type === \"CR_LIMIT\");\r\n                            var balanceAmt = item.Statement.StatementInfo.find(x => x.Type === \"TOTAL_BALANCE\");\r\n\r\n                            dataResult.push({\r\n                                \"facilityType\": item.CardInfo.Desc,\r\n                                \"approvedAmount\": approvedAmt?.CurAmt ?? 0,\r\n                                \"approvedDate\": item.CardInfo.EndDt !== undefined ? item.CardInfo.EndDt : moment().format(\"YYYY-MM-DD\"),\r\n                                \"actualBalance\": balanceAmt?.CurAmt ?? 0,\r\n                                \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n                                \"AcctId\": \"\",\r\n                            });\r\n                        }\r\n\r\n                        /* if(item.CardInfo.Desc.toUpperCase().indexOf('CREDITO') > 0){\r\n                             dataResult.push({\r\n                                 \"facilityType\": item.CardInfo.Desc, \"approvedAmount\": approvedAmt?.CurAmt??0,\r\n                                 \"approvedDate\": item.CardInfo.EndDt!==undefined?item.CardInfo.EndDt:moment().format(\"YYYY-MM-DD\"), \"actualBalance\":  balanceAmt?.CurAmt??0,\r\n                                 \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n                                 \"AcctId\": \"\",\r\n                             });   \r\n                         } */\r\n\r\n                    }\r\n                    catch (err) { console.log(\"getCreditCard\", err); }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.readCardTDC_Rs.Customer.Product;\r\n                try {\r\n\r\n                    var approvedAmt = item.Statement.StatementInfo.find(x => x.Type === \"AVAILABLE\");\r\n                    var balanceAmt = item.Statement.StatementInfo.find(x => x.Type === \"TOTAL_BALANCE\");\r\n\r\n                    if (item.CardInfo.Desc.toUpperCase().indexOf('CREDITO') > 0) {\r\n                        dataResult.push({\r\n                            \"facilityType\": item.CardInfo.Desc,\r\n                            \"approvedAmount\": approvedAmt?.CurAmt ?? 0,\r\n                            \"approvedDate\": item.CardInfo.EndDt !== undefined ? item.CardInfo.EndDt : moment().format(\"YYYY-MM-DD\"),\r\n                            \"actualBalance\": balanceAmt?.CurAmt ?? 0,\r\n                            \"debtorName\": item.CardInfo.EmbossInfo.FirstName + \" \" + item.CardInfo.EmbossInfo.LastName,\r\n                            \"AcctId\": \"\",\r\n                        });\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        return dataResult;\r\n    }\r\n\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                                 Retorna los balances por meses                                 */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getAverages(AcctReference) {\r\n        if (AcctReference.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            AcctReference: AcctReference\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     Obtenemos una lista de las importaciones que se generen                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getListaImportaciones(PartyId) {\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_IMPORTACIONES + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                 Obtenemos una lista de las exportaciones que se hayan generado                 */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getListaExportaciones(PartyId) {\r\n\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_EXPORTACIONES + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                          Obtenemos los prestamos entrantes existentes                          */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPrestamosEntrantes(PartyId) {\r\n\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_INGOING + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                    Obtenemos una lista de todos los presstamos que ya salen                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPrestamosSalientes(PartyId) {\r\n\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_OUTOGOING + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*               Obtenemos la lista de creditos que existen en la actualidad activos              */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCreditosExistentes(PartyId) {\r\n\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_CREDITOS + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                                        Creditos en linea                                       */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCreditosLine(PartyId) {\r\n\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*     Nos devuelve todas las transacciones que ha realizado el usuario por un rango de fechas    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getTransactions(AcctId, EndDt, StartDt) {\r\n\r\n        if (AcctId.length <= 0 || EndDt.length <= 0 || StartDt.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        // ejemplo del dataField\r\n        // AcctId=1001553287&EndDt=2021-10-16T09:32:51&StartDt=2021-09-16T00:00:00\r\n        let params = {\r\n            AcctId: AcctId,\r\n            EndDt: EndDt,\r\n            StartDt: StartDt,\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                                  Obtenemos todos los prestamos                                 */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPrestamos(PartyId) {\r\n\r\n        if (PartyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_PRESTAMOS + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*               Obtenemos toda la informacion del prestamos dentro de una actividad              */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    //Detalle Facilidad\r\n    async getFacilityInfo(AcctId) {\r\n        try {\r\n\r\n            if (AcctId.length <= 0) {\r\n                return null;\r\n            }\r\n\r\n            let params = {\r\n                AcctId: AcctId\r\n            }\r\n            let data = qs.stringify(params);\r\n\r\n            var result = await this.get(url.URL_CORE_PRESTAMOS_INFORMATION + \"?\" + data);\r\n\r\n            /*\r\n            {\r\n        \"AcctLoan\": {\r\n            \"AcctSubtype\": {\r\n                \"Cod\": \"3200\"\r\n            },\r\n            \"AutonomyCode\": \"0201\",\r\n            \"AutonomyUser\": \"38\",\r\n            \"Category\": \"COMMERCIAL.CHILD\",\r\n            \"ClosedDt\": \"2022-05-30\",\r\n            \"CurCode\": \"USD\",\r\n            \"FIData\": {\r\n                \"Agency\": {\r\n                    \"AgencyIdent\": \"PA0010062\"\r\n                }\r\n            },\r\n            \"PrinProperty\": \"PRINCIPALINT\",\r\n            \"SubCategory\": \"1614\",\r\n            \"AcctKey\": {\r\n                \"AcctId\": \"AA19214M07G3\"\r\n            },\r\n            \"IntRateData\": {\r\n                \"IntDayBasis\": \"B\",\r\n                \"IntRate\": 6.75\r\n            },\r\n            \"AcctBal\": [\r\n                {\r\n                    \"BalType\": \"FECIBalance\",\r\n                    \"CurAmt\": {\r\n                        \"Amt\": \"1009.71\"\r\n                    }\r\n                },\r\n                {\r\n                    \"BalType\": \"PrincipalBalance\",\r\n                    \"CurAmt\": {\r\n                        \"Amt\": \"44113.66\"\r\n                    }\r\n                },\r\n                {\r\n                    \"BalType\": \"InterestBalance\",\r\n                    \"CurAmt\": {\r\n                        \"Amt\": \"6807.90\"\r\n                    }\r\n                }\r\n            ],\r\n            \"CreditAcctData\": {\r\n                \"AuthType\": \"13\",\r\n                \"CodeDestination\": \"PA08\",\r\n                \"CountryDestination\": \"PA\",\r\n                \"CreditDestination\": \"LOCAL\",\r\n                \"FeciProperty\": true,\r\n                \"FundsPurpose\": \"3228\",\r\n                \"IntFeci\": 1,\r\n                \"LatePenalty\": true,\r\n                \"OriginationDt\": \"2019-08-02\",\r\n                \"RefinanceDate\": \"2021-04-29\",\r\n                \"RefinanceNum\": \"1020096515\",\r\n                \"SourceSales\": {\r\n                    \"Cod\": \"16\"\r\n                },\r\n                \"Charge\": [\r\n                    {\r\n                        \"ChargeType\": \"FIXED\",\r\n                        \"CurAmt\": {\r\n                            \"Amt\": \"0.00\",\r\n                            \"CurCode\": \"USD\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"Term\": {\r\n                    \"ProposedTerm\": \"1031D\"\r\n                },\r\n                \"CreditAcctPmtInfo\": {\r\n                    \"NextPmtDt\": \"2022-05-30\",\r\n                    \"PmtMethod\": \"DC\"\r\n                },\r\n                \"CreditRegularPmt\": [\r\n                    {\r\n                        \"PmtClass\": \"DUE DUE DUE\",\r\n                        \"PmtType\": \"INTEREST INTEREST LINEAR\"\r\n                    }\r\n                ],\r\n                \"SettleInstruction\": {\r\n                    \"PayIn\": {\r\n                        \"PayInAcctRef\": [\r\n                            {\r\n                                \"PayInAcct\": {\r\n                                    \"AcctId\": \"1000141368\"\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            \"AcctOpeningInfo\": {\r\n                \"EffDt\": \"2019-08-02\",\r\n                \"InitialAmt\": {\r\n                    \"Amt\": \"44113.66\"\r\n                },\r\n                \"SaleOfficer\": \"0630\"\r\n            }\r\n        },\r\n        \"Party\": {\r\n            \"PartyKey\": [\r\n                {\r\n                    \"PartyId\": \"600088018\"\r\n                }\r\n            ]\r\n        },\r\n        \"Status\": {\r\n            \"StatusCode\": \"M0000\",\r\n            \"StatusDesc\": \"OK\"\r\n        }\r\n    }\r\n            */\r\n\r\n            return result?.AcctLoan;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*               Obtenemos toda la informacion del Reporting Services                            */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n\r\n    //https://qa.api.ob.banesco.com.pa/APIUtil/v1/reports/atoms?FECHA=20210930&CLIENTE=600167424\r\n\r\n    async getReportingServices(partyId) { //partyId -> numero del cliente en T24\r\n\r\n        if (partyId === undefined || partyId === null || partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            FECHA: moment().add(-1, 'months').format(\"YYYYMM\") + \"01\", //preguntar pq la fecha no se puede cambiar\r\n            CLIENTE: partyId\r\n        }\r\n        let data = qs.stringify(params);\r\n\r\n        var result = await this.get(url.URL_CORE_REPORTINGSERVICES + \"?\" + data);\r\n\r\n\r\n        return result;\r\n\r\n        /*{\r\n    \"records\": [\r\n        {\r\n            \"FECHA\": \"20210930\",\r\n            \"T_CREDITO\": \"002\",\r\n            \"T_FACILIDAD\": \"05\",\r\n            \"CLASIFICACION\": \"02\",\r\n            \"LOC_EXT\": \"L\",\r\n            \"REGION\": \"014\",\r\n            \"CLIENTE_RUC\": \"8-805-442\",\r\n            \"TNO_EMPRESA\": \"06\",\r\n            \"NOMBRE_CLIENTE\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n            \"GRUPO_ECON\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n            \"GRUPO_RUC\": \"8-805-442\",\r\n            \"T_RELACION\": \"P999\",\r\n            \"ACT_ECON\": \"2103\",\r\n            \"TASA_INT\": \"10.5\",\r\n            \"MONTO_IN\": 5400,\r\n            \"INT_PC\": 0,\r\n            \"FECHA_INI\": \"20150616\",\r\n            \"FECHA_FIN\": \"20230116\",\r\n            \"FECHA_REFIN\": \"NA\",\r\n            \"FECHA_RENEG\": \"20200817\",\r\n            \"G1\": \"0701\",\r\n            \"MONTO_G1\": 0,\r\n            \"G2\": \"NA\",\r\n            \"MONTO_G2\": 0,\r\n            \"G3\": \"NA\",\r\n            \"MONTO_G3\": 0,\r\n            \"G4\": \"NA\",\r\n            \"MONTO_G4\": 0,\r\n            \"G5\": \"NA\",\r\n            \"MONTO_G5\": 0,\r\n            \"PROV_REG\": 0,\r\n            \"PROV_NIIF\": 119.05,\r\n            \"PROV_PAIS\": 0,\r\n            \"SALDO\": 6401.61,\r\n            \"N_CUOTAS_VENCER\": \"7\",\r\n            \"X_VENCER30\": \"100.86\",\r\n            \"X_VENCER60\": \"100.86\",\r\n            \"X_VENCER90\": \"100.86\",\r\n            \"X_VENCER120\": \"100.86\",\r\n            \"X_VENCER180\": \"100.86\",\r\n            \"X_VENCER1A\": \"100.86\",\r\n            \"X_VENCER5A\": \"5796.45\",\r\n            \"X_VENCER10A\": \"0.00\",\r\n            \"X_VENCERM10A\": \"0.00\",\r\n            \"N_CUOTA_VENCIDAS\": \"0\",\r\n            \"VENCIDOS30\": \"0.00\",\r\n            \"VENCIDOS60\": \"0.00\",\r\n            \"VENCIDOS90\": \"0.00\",\r\n            \"VENCIDOS120\": \"0.00\",\r\n            \"VENCIDOS180\": \"0.00\",\r\n            \"VENCIDOS1A\": \"0.00\",\r\n            \"VENCIDOSM1A\": \"0.00\",\r\n            \"RANGO_MORA\": \"1. Al dÃ­a\",\r\n            \"DIAS_MORA\": 0,\r\n            \"PROX_CAP\": \"20211016\",\r\n            \"PER_CAP\": \"01\",\r\n            \"PROX_INT\": \"20211016\",\r\n            \"PER_INT\": \"01\",\r\n            \"CUOTA_XPAGAR\": \"100.86\",\r\n            \"SUCURSAL\": \"201\",\r\n            \"MONEDA\": \"USD\",\r\n            \"CUENTA_CONTABLE\": \"\",\r\n            \"PRODUCTO\": \"TDC\",\r\n            \"BANCA\": \"\",\r\n            \"SECTOR1\": \"PRESTACARD\",\r\n            \"SECTOR2\": \"\",\r\n            \"SECTOR3\": \"\",\r\n            \"SECTOR4\": \"PRESTACARD\",\r\n            \"PRODUCTO1\": \"TARJETA DE CREDITO CONSUMO\",\r\n            \"PRODUCTO2\": \"TDC\",\r\n            \"PRODUCTO3\": \"Prestacard Visa\",\r\n            \"NUM_OPS\": \"4466840182907004\",\r\n            \"NUM_CLIENTE\": \"600167424\",\r\n            \"CENTRO_COSTO\": \"\",\r\n            \"NUM_LINEA\": \"\",\r\n            \"COD_OFIC\": \"\",\r\n            \"COD_OFIC2\": \"\",\r\n            \"INGRESO\": 0,\r\n            \"SEGMENTO\": \"\",\r\n            \"TIPO_PAGO\": \"\",\r\n            \"PUNTAJE\": 0,\r\n            \"FECHA_ULT_PAGO_CAPITAL\": \"20200304\",\r\n            \"CATEGORIA_CAMBIO\": \"03\",\r\n            \"MONTO_ULT_PAGO_CAPITAL\": 69.2,\r\n            \"FECHA_ULT_PAGO_INTERES\": \"20200304\",\r\n            \"MONTO_ULT_PAGO_INTERES\": 82.8,\r\n            \"STAGE\": 2,\r\n            \"PROXIMO_CAP_HIST\": \"20211016\",\r\n            \"PROXIMO_INT_HIS\": \"20211016\"\r\n        }\r\n    ],\r\n    \"Status\": {\r\n        \"StatusCode\": \"M0000\",\r\n        \"StatusDesc\": \"SUCCESS\"\r\n    }\r\n}*/\r\n    }\r\n\r\n\r\n    //Retorna todos los colateralsId por numero de cliente\r\n    async getColaterals(partyId) { //Numero del cliente en T24\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: partyId\r\n        }\r\n\r\n        let data = qs.stringify(params);\r\n\r\n        var dataResult = [];\r\n        try {\r\n\r\n            console.log(\"plage\");\r\n\r\n            //servicio retorna Pignorados\r\n            var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data);\r\n\r\n            //Armamos la data a mostrar en pantalla\r\n            result.Collaterals.CollateralInfo.map(function (item, i) {\r\n                if (item.Collateral.CollateralKey.CollateralId !== null) {\r\n                    dataResult.push({ collateralId: item.Collateral.CollateralKey.CollateralId, facilityAmt: item.Collateral.CollateralAmt.Amt });\r\n                }\r\n\r\n            })\r\n        }\r\n        catch (err) {\r\n            console.error(\"URL_CORE_PIGNORADO\", err);\r\n        }\r\n\r\n        console.log(\"dataResult\", dataResult);\r\n        return dataResult;\r\n    }\r\n\r\n    // retorna Detalle de Garantias\r\n    async getWarrantyDetails(collateralId, warrantyType) { //Numero del id colateral ... warrytype = Muebles, Inmuebles, Otros, Depositos\r\n\r\n        if (collateralId.length <= 0 || warrantyType.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            CollateralId: collateralId,\r\n            InqType: warrantyType\r\n        }\r\n\r\n        let data = qs.stringify(params);\r\n\r\n        try {\r\n            //servicio retorna Pignorados\r\n            const result = await this.get(url.URL_CORE_COLLATERALS + \"?\" + data);\r\n            return result\r\n            //Armamos la data a mostrar en pantalla\r\n            /*result.Collaterals.CollateralInfo.map(function(item, i){\r\n                if(item.Collateral.CollateralKey.CollateralId!==null){\r\n                    dataResult.push({collateralId: item.Collateral.CollateralKey.CollateralId,facilityAmt: item.Collateral.CollateralAmt.Amt});\r\n                }                                \r\n            })*/\r\n        }\r\n        catch (err) {\r\n            console.error(\"URL_CORE_PIGNORADO\", err);\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getAccountMovementsByTransaction(transactId) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n            var result = [];\r\n            let flagAcctId = [];\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getAccountMovements(debtors[i].customerNumberT24);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        // dataResult.forEach(function (item) {\r\n                        //     result.push(item);\r\n                        // });\r\n                        for (let item of dataResult) {\r\n                            if (flagAcctId.includes(item.AcctId))\r\n                                continue;\r\n                            flagAcctId.push(item.AcctId)\r\n                            result.push(item);\r\n                        };\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            console.log(\"getAccountMovementsByTransaction\", result);\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    //retorna movimientos de cuentas\r\n    async getAccountMovements(partyId) { //Numero de Cliente de T24\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n\r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\r\n            return;\r\n        }\r\n\r\n        var dataResult = [];\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n\r\n            if (item.AcctPartyType !== result.PartyKey.PartyType && item.AcctPartyType === \"2\") { }\r\n            else {\r\n                params = { AcctReference: item.AcctKey.AcctReference }\r\n                data = qs.stringify(params);\r\n                try {\r\n                    var year = 0;\r\n                    var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n                    if (dtResult.Acct.AcctBal.length > 0) {\r\n                        // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                        var dt = { AcctId: item.AcctKey.AcctId, dataByYear: [] }\r\n                        for (var accItem of dtResult.Acct.AcctBal) {\r\n                            if (year !== Number(accItem.AverageBalanceDt.split(' ')[1])) {\r\n                                year = Number(accItem.AverageBalanceDt.split(' ')[1]);\r\n                                dt.dataByYear.push({ year, dataresult: [] })\r\n                            }\r\n\r\n                            var dtr = {\r\n                                \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]),\r\n                                \"month\": accItem.AverageBalanceDt.split(' ')[0],\r\n                                \"amount\": accItem.CurAmt.Amt,\r\n                                \"deposits\": 0\r\n                            }\r\n                            dt.dataByYear[dt.dataByYear.length - 1].dataresult.push(dtr);\r\n                        }\r\n                        /*dtResult.Acct.AcctBal.map(function (accItem, i) {  \r\n                            if(year !== Number(accItem.AverageBalanceDt.split(' ')[1])){\r\n                                year = Number(accItem.AverageBalanceDt.split(' ')[1]);\r\n                                dt.dataByYear.push({year,dataresult:[]})\r\n                            }                                                \r\n                            dt.dataByYear[dt.dataByYear.length-1].dataresult.push({\r\n                                \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]), \r\n                                \"month\": accItem.AverageBalanceDt.split(' ')[0],\r\n                                \"amount\": accItem.CurAmt.Amt\r\n                            }); \r\n                        }) */\r\n                        dataResult.push(dt);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error(\"getAccountMovementsByTransaction\", err);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        //Para sacar los depositos\r\n        //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\r\n        //servicio retorna los movimientos de cuentas del cliente                        \r\n        /*try{\r\n            for (var i = 0; i < dataResult.length; ++i) {\r\n                var dtResult = dataResult[i];\r\n                for (var p = 0; p < dtResult.dataByYear.length; ++p) {\r\n                    var dtYear = dtResult.dataByYear[p];\r\n                    var currentYear =dtYear.year;\r\n                    params = null; //dtResult.AcctId\r\n                    if(currentYear === Number(moment().format(\"YYYY\"))){\r\n                        params = { AcctId: dtResult.AcctId, EndDt:moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"), StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    else{\r\n                        params = { AcctId: dtResult.AcctId, EndDt:currentYear+\"-12-31T23:59:59\", StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    data = qs.stringify(params);\r\n                    try{\r\n                        var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data); \r\n                        for (var depo of deposits.Trn) {\r\n                            if(depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0){\r\n                                var monthName = GetMontNameByNumber(moment(depo.EffDt).format('M'));\r\n                                var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                                    if(dataByMonth!==undefined){\r\n                        \r\n                                        dataByMonth.deposits= (Number(dataByMonth.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);\r\n                                    }\r\n                            }                    \r\n                        }        \r\n                    }\r\n                    catch(err){}\r\n                }\r\n            }\r\n        }\r\n        catch(err){}\r\n        */\r\n        //Para sacar los depositos\r\n        //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals?CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\r\n\r\n        try {\r\n            for (var i = 0; i < dataResult.length; ++i) {\r\n                var dtResult = dataResult[i];\r\n                for (var p = 0; p < dtResult.dataByYear.length; ++p) {\r\n                    var dtYear = dtResult.dataByYear[p];\r\n                    var currentYear = dtYear.year;\r\n                    params = null; //dtResult.AcctId\r\n                    if (currentYear === Number(moment().format(\"YYYY\"))) {\r\n                        params = { CUENTA: dtResult.AcctId, FECHA_INI: currentYear + \"0101\", FECHA_FIN: moment().format(\"YYYYMMDD\"), PROMEDIO: \"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    else {\r\n                        params = { CUENTA: dtResult.AcctId, FECHA_INI: currentYear + \"0101\", FECHA_FIN: currentYear + \"1231\", PROMEDIO: \"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    data = qs.stringify(params);\r\n                    try {\r\n                        var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\r\n                        //console.log(\"getAccountMovementsByTransactionDeposits\",deposits);\r\n\r\n                        for (var record of deposits.records) {\r\n                            //console.log(\"depositsMonth\", record.FECHA.toString().substring(4, 6));\r\n                            var monthName = GetMontNameByNumber(record.FECHA.toString().substring(4, 6));\r\n                            var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName) >= 0);\r\n                            if (dataByMonth !== undefined) {\r\n                                dataByMonth.deposits = (Number(record.MONTO)).toFixed(2);\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                }\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    async getAccountDepositsByTransaction(transactId, year, month) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n\r\n            var result = [];\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getAccountDeposits(debtors[i].customerNumberT24, year, month);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        dataResult.forEach(function (item) {\r\n                            result.push(item);\r\n                        });\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            console.log(\"getAccountMovementsByTransaction\", result);\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    async getAccountDeposits(partyId, year, month) { //Numero de Cliente de T24\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n\r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\r\n            return;\r\n        }\r\n\r\n        var dataResult = [];\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n            try {\r\n                year = Number(year).toString(\"00\");\r\n                month = Number(month).toString(\"00\");\r\n                var endDate = moment(year + \"-\" + month + \"-01\").endOf('month').format('DD');\r\n\r\n                params = { AcctId: item.AcctKey.AcctId, EndDt: year + \"-\" + month + \"-\" + endDate + \"T23:59:59\", StartDt: year + \"-\" + month + \"-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n\r\n                data = qs.stringify(params);\r\n                try {\r\n                    var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\r\n                    for (var depo of deposits.Trn) {\r\n                        if (depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0) {\r\n                            dataResult.push({ deposits: Number(depo.TotalCurAmt.Amt) })\r\n                        }\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            catch (err) { }\r\n        }\r\n        //Para sacar los depositos\r\n        //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    //retorna movimientos de cuentas\r\n    async getApcInfo(identification, idType) { //Numero de identificacion del cliente\r\n\r\n        if (identification.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let typeofId = \"Cedula\";\r\n        switch (idType) {\r\n            case \"CED\": {\r\n                typeofId = \"Cedula\";\r\n                break;\r\n            }\r\n            case \"RUC\": {\r\n                typeofId = \"RUC\";\r\n                break;\r\n            }\r\n            case \"PAS\": {\r\n                typeofId = \"Pasaporte\";\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n        var tmpidentification = \"\";\r\n        identification.split('-').map((str) => {\r\n            if (str.startsWith(\"0\")) {\r\n                tmpidentification += str.replace(/^0+/, '') + \"-\";\r\n            }\r\n            else {\r\n                tmpidentification += str + \"-\";\r\n            }\r\n        })\r\n        if (tmpidentification.startsWith(\"-\")) {\r\n            tmpidentification = tmpidentification.substring(1);\r\n        }\r\n        identification = tmpidentification.substring(0, tmpidentification.length - 1);\r\n        var params = {\r\n            \"ConsultarAPC\": {\r\n                \"Model\": {\r\n                    \"EsPrueba\": 0,\r\n                    \"ForzarBusqueda\": 0,\r\n                    \"IdentificacionConsulta\": identification,//\"8-773-1899\",\r\n                    \"PasswordAPC\": \"Banesco19.\",\r\n                    \"TipoCliente\": typeofId,\r\n                    \"UltimusProcess\": 7,\r\n                    \"UsuarioAPC\": \"WTIBANESCO001\"\r\n                }\r\n            }\r\n        }\r\n\r\n        //servicio retorna la info de APC del cliente\r\n        const result = await this.post(url.URL_CORE_APCINFO, params);\r\n\r\n        var dataResult = [];\r\n        try {\r\n            if (Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)) {\r\n                //Armamos la data a mostrar en pantalla\r\n                result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\r\n                    try {\r\n                        dataResult.push({\r\n                            \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"), \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\r\n                            \"initialAmount\": item.dc_monto_original, \"actualAmount\": item.dc_saldo_actual, \"asociation\": item.dc_nom_asoc, \"source\": item.dc_descr_corta_rela\r\n                        });\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else {\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {\r\n                    dataResult.push({\r\n                        \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"), \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\r\n                        \"initialAmount\": item.dc_monto_original, \"actualAmount\": item.dc_saldo_actual, \"asociation\": item.dc_nom_asoc, \"source\": item.dc_descr_corta_rela\r\n                    });\r\n                }\r\n                catch (err) { }\r\n            }\r\n\r\n        }\r\n        catch (err) { console.error(err); }\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    async getEconomicGroup(partyId) { //partyId -> numero del cliente en T24\r\n        try {\r\n            let params = { PartyId: partyId }\r\n            let data = qs.stringify(params);\r\n\r\n            var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\r\n\r\n            console.log(\"getEconomicGroup\", result);\r\n\r\n            return result.PartyPartyRels.PartyPartyRel[0].PartyPartyRelInfo.PartyRelName[0];\r\n        }\r\n        catch (err) { }\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    async getReciprocityByTransaction(transactId, year, month) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n\r\n            var result = { averageAmt: 0, deposits: 0 }\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getReciprocity(debtors[i].customerNumberT24, year, month);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        result.averageAmt += dataResult.averageAmt;\r\n                        result.deposits += dataResult.deposits;\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            console.log(\"getAccountMovementsByTransaction\", result);\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    async getReciprocity(partyId, year, month) {\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        year = Number(year);\r\n\r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n\r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            return undefined;\r\n        }\r\n\r\n        var resultToReturn = { averageAmt: 0, deposits: 0 }\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n            params = { AcctReference: item.AcctKey.AcctReference }\r\n            data = qs.stringify(params);\r\n            try {\r\n                var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n                if (dtResult.Acct.AcctBal.length > 0) {\r\n                    // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                    for (var accItem of dtResult.Acct.AcctBal) {\r\n                        var dMonth = accItem.AverageBalanceDt.split(' ')[0]\r\n                        if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year && dMonth.indexOf(month) >= 0) {\r\n                            resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (err) { }\r\n\r\n            //Para sacar los depositos\r\n            try {\r\n                var currentYear = year;\r\n                var monthNum = GetMontNumberByName(month);\r\n                var endDate = moment(year + \"-\" + monthNum + \"-01\").endOf('month').format('DD'); params = null; //dtResult.AcctId\r\n                params = { CUENTA: item.AcctKey.AcctId, FECHA_INI: currentYear + monthNum + \"01\", FECHA_FIN: currentYear + monthNum + endDate, PROMEDIO: \"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n\r\n                data = qs.stringify(params);\r\n                try {\r\n                    var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\r\n                    for (var record of deposits.records) {\r\n                        //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\r\n\r\n                        //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\r\n                        //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                        //if(dataByMonth!==undefined){                        \r\n                        resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2);\r\n                        //  }                    \r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            catch (err) { }\r\n\r\n        }\r\n        return resultToReturn;\r\n    }\r\n\r\n    async getReciprocityByYearByTransaction(transactId, year) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n\r\n            var result = { averageAmt: 0, deposits: 0 }\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getReciprocityByYear(debtors[i].customerNumberT24, year);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        result.averageAmt += dataResult.averageAmt;\r\n                        result.deposits += dataResult.deposits;\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            console.log(\"getAccountMovementsByTransaction\", result);\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    async getReciprocityByYear(partyId, year) {\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        year = Number(year);\r\n\r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n\r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            return undefined;\r\n        }\r\n\r\n        var resultToReturn = { averageAmt: 0, deposits: 0 }\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n            params = { AcctReference: item.AcctKey.AcctReference }\r\n            data = qs.stringify(params);\r\n            try {\r\n                var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n                if (dtResult.Acct.AcctBal.length > 0) {\r\n                    // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                    for (var accItem of dtResult.Acct.AcctBal) {\r\n                        //var dMonth = accItem.AverageBalanceDt.split(' ')[0]\r\n                        if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year) {\r\n                            resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (err) { }\r\n\r\n            //Para sacar los depositos\r\n            try {\r\n                var currentYear = year;\r\n                var monthNum = year === Number(moment().format(\"YYYY\")) ? moment().format(\"MM\") : \"12\";\r\n                var endDate = moment(year + \"-\" + monthNum + \"-01\").endOf('month').format('DD'); params = null; //dtResult.AcctId\r\n                params = { CUENTA: item.AcctKey.AcctId, FECHA_INI: currentYear + \"0101\", FECHA_FIN: currentYear + monthNum + endDate, PROMEDIO: \"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n\r\n                data = qs.stringify(params);\r\n                try {\r\n                    var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\r\n                    for (var record of deposits.records) {\r\n                        //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\r\n\r\n                        //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\r\n                        //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                        //if(dataByMonth!==undefined){                        \r\n                        resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2);\r\n                        //  }                    \r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            catch (err) { }\r\n\r\n        }\r\n        return resultToReturn;\r\n    }\r\n\r\n    async getDepositsByTransaction(transactId, year, month) {\r\n\r\n        var debtors = await this.backendServices.consultarDeudores(transactId);\r\n        if (debtors !== null && debtors !== undefined) {\r\n\r\n            var result = { averageAmt: 0, deposits: 0 }\r\n            for (var i = 0; i < debtors.length; i++) {\r\n                try {\r\n                    var dataResult = await this.getDeposits(debtors[i].customerNumberT24, year, month);\r\n                    if (dataResult !== null && dataResult !== undefined) {\r\n                        result.averageAmt += dataResult.averageAmt;\r\n                        result.deposits += dataResult.deposits;\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n            console.log(\"getAccountMovementsByTransaction\", result);\r\n\r\n            return result;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    async getDeposits(partyId, year, month) {\r\n\r\n        //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals\r\n\r\n        if (partyId.length <= 0) {\r\n            return undefined;\r\n        }\r\n\r\n        year = Number(year);\r\n\r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n\r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            return undefined;\r\n        }\r\n\r\n        var resultToReturn = { averageAmt: 0, deposits: 0 }\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n\r\n            //CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\r\n            var endDate = moment(year + \"-12-01\").endOf('month').format('DD');\r\n            params = { CUENTA: item.AcctKey.AcctId, FECHA_INI: year + \"0101\", FECHA_FIN: year + \"12\" + endDate }\r\n            data = qs.stringify(params);\r\n            try {\r\n                var dtResult = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\r\n                if (dtResult.Acct.AcctBal.length > 0) {\r\n                    // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                    for (var accItem of dtResult.Acct.AcctBal) {\r\n                        if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year) {\r\n                            resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (err) { }\r\n\r\n            //Para sacar los depositos\r\n            //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\r\n            //servicio retorna los movimientos de cuentas del cliente                        \r\n            try {\r\n                //var monthN=GetMontNumberByName(month);\r\n                var endDate = moment(year + \"-12-01\").endOf('month').format('DD');\r\n                params = { AcctId: item.AcctKey.AcctId, EndDt: year + \"-12-\" + endDate + \"T23:59:59\", StartDt: year + \"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                data = qs.stringify(params);\r\n                var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\r\n                console.log(\"getReciprocityByYear\", deposits);\r\n                for (var depo of deposits.Trn) {\r\n                    if (depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0) {\r\n                        resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);\r\n                    }\r\n                }\r\n            }\r\n            catch (err) { }\r\n        }\r\n        return resultToReturn;\r\n\r\n    }\r\n\r\n    /// Obtener el serial de la linea -- Parametros: NumeroT24 y Codigo Facilidad\r\n    async getLineSerial(partyId, lineTypeCode) {\r\n        try {\r\n            \r\n            //var errorDispacher = new errorDispacherHelper(); \r\n            console.log(\"getLineSerial\", partyId, lineTypeCode)\r\n            //partyId=\"800048231\"; facilityTypeCode=\"10000\"\r\n\r\n            if (partyId.length <= 0) {\r\n                return undefined;\r\n            }\r\n\r\n            let params = { PartyId: partyId }\r\n            let data = qs.stringify(params);\r\n\r\n            //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018\r\n\r\n            //servicio retorna las cuentas del cliente\r\n            var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\r\n            \r\n            // if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK && result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK1) {\r\n            //     errorDispacherHelper.dispatch({ status: result.Status.StatusCode, error: result.Status.StatusDesc });\r\n            //     return;\r\n            // }            \r\n                \r\n            var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(lineTypeCode) >= 0)\r\n\r\n            var lineNumber = 1;\r\n            dataResults.forEach((dt) => {\r\n                lineNumber = Number(dt.CreditLineId.split(\".\")[2]) > lineNumber ? Number(dt.CreditLineId.split(\".\")[2]) : lineNumber;\r\n            })\r\n\r\n            while (lineTypeCode.length < 7) {\r\n                lineTypeCode = \"0\" + lineTypeCode;\r\n            }\r\n\r\n            if (lineNumber.toString().length < 2) {\r\n                lineNumber = (\"0\" + (lineNumber + 1).toString()).slice(-2);\r\n            }\r\n            else {\r\n                lineNumber = lineNumber.toString();\r\n            }\r\n\r\n            var lineserial = partyId + \".\" + lineTypeCode + \".\" + lineNumber;\r\n            console.log(\"lineas\", lineserial);\r\n\r\n            return lineserial;\r\n        }\r\n        catch (err) \r\n        { \r\n            // errorDispacherHelper.dispatch({status: \"500\",data: result, error: err.message});\r\n        }\r\n\r\n        return null;\r\n    }\r\n    ///Creacion de Linea para desembolso\r\n    //numero de linea = numero de cliente + tipo de linea + serial === EJ: 600197109.0011000.01\r\n\r\n    //https://qa.api.ob.banesco.com.pa/APIUtil/v1/catalogs?catalog_name=LIMIT REFERENCE&parent_catalog_name=&keyword=  \r\n    //===> Catalogo de Tipo de Lineas\r\n\r\n    //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018  \r\n    //===> Obtenemos todas las lineas y tomamos el total + 1 => Mas serial\r\n    async newline(data) {\r\n\r\n        try {\r\n            /*\r\n        {\r\n   \"CreditLine\":{\r\n      \"Activity\":{\r\n         \"Cod\":\"2103\"\r\n      },\r\n      \"AuthType\":\"01\",\r\n      \"AutonomyCode\":{\r\n         \"Cod\":\"0100\",\r\n         \"Desc\":\"JUNTA DIRECTIVA\"\r\n      },\r\n      \"AutonomyUser\":\"02\",\r\n      \"CreditLimit\":{\r\n         \"AdviseAmt\":{\r\n            \"Amt\":\"2000\",\r\n            \"CurCode\":\"USD\"\r\n         },\r\n         \"Allow\":{\r\n            \"CurrencyData\":{\r\n               \"CurAmt\":{\r\n                  \"Amt\":{\r\n                     \"-self-closing\":\"true\"\r\n                  },\r\n                  \"CurCode\":{\r\n                     \"-self-closing\":\"true\"\r\n                  }\r\n               }\r\n            },\r\n            \"Party\":{\r\n               \"PartyId\":{\r\n                  \"-self-closing\":\"true\"\r\n               }\r\n            },\r\n            \"ProductData\":[\r\n               {\r\n                  \"Product\":{\r\n                     \"Cod\":\"1000\"\r\n                  }\r\n               }\r\n            ]\r\n         },\r\n         \"AllowNetting\":\"N\",\r\n         \"ApprovalDt\":\"2022-05-11\",\r\n         \"AvailDt\":\"2022-05-11\",\r\n         \"AvailMarker\":\"Y\",\r\n         \"CountryRisk\":{\r\n            \"Country\":{\r\n               \"CountryCode\":\"PA\",\r\n               \"CountryName\":{\r\n                  \"-self-closing\":\"true\"\r\n               }\r\n            },\r\n            \"Percent\":\"100\"\r\n         },\r\n         \"CreditLimitKey\":{\r\n            \"CreditLimitId\":\"990001176.0010000.09\"\r\n         },\r\n         \"CurCode\":\"USD\",\r\n         \"DeadLineDt\":\"2022-05-11\",\r\n         \"DueDt\":\"2023-05-11\",\r\n         \"LimitAmt\":{\r\n            \"Amt\":\"2000\",\r\n            \"CurCode\":\"USD\"\r\n         },\r\n         \"LimitAmtType\":\"FIXED\",\r\n         \"LimitReject\":\"Y\",\r\n         \"MaxCurAmt\":{\r\n            \"Amt\":\"2000\",\r\n            \"CurCode\":\"USD\"\r\n         },\r\n         \"ProposalDt\":\"2022-05-11\",\r\n         \"ReviewFreq\":{\r\n            \"FreqValue\":\"20230430M1230\"\r\n         },\r\n         \"Signatories\":{\r\n            \"Signatory\":{\r\n               \"PartyKey\":{\r\n                  \"PartyId\":\"990001176\"\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n        */\r\n            // var data =\r\n            // {\r\n            //     \"CreditLine\": {\r\n            //         \"Activity\": {\r\n            //             \"Cod\": \"1413\"  //-> Cod. Sub Actividad Economica\r\n            //         },\r\n            //         \"AuthType\": \"99\", //-> Tipo de Autorizacion\r\n            //         \"AutonomyCode\": {\r\n            //             \"Cod\": \"9999\" //-> Codigo de la Autonomia No lo tenemos\r\n            //         },\r\n            //         \"AutonomyUser\": \"1\", //-> Usuario de Autonomia que esta login\r\n            //         \"CreditLimit\": {\r\n            //             \"AdviseAmt\": {\r\n            //                 \"Amt\": \"25,000.00\", //-> Monto de La Linea\r\n            //                 \"CurCode\": \"USD\" //-> Codigo Moneda\r\n            //             },\r\n            //             \"Allow\": {\r\n            //                 \"ProductData\": {\r\n            //                     \"Product\": {\r\n            //                         \"Cod\": \"1000\", // -> Tipo de Facilidad\r\n            //                     }\r\n            //                 }\r\n            //             },\r\n            //             \"AllowNetting\": \"N\", // -> ?? FIJO\r\n            //             \"ApprovalDt\": \"2022-02-02\", // -> Fecha de Aprobacion\r\n            //             \"AvailDt\": \"2022-02-02\",    // -> Fecha de Propuesta\r\n            //             \"AvailMarker\": \"Y\", // -> ?? FIJO\r\n            //             \"CountryRisk\": [ // -> Pais de riesgo\r\n            //                 {\r\n            //                     \"Country\": {\r\n            //                         \"CountryCode\": \"PA\" // -> Codigo Pais de riesgo\r\n            //                     },\r\n            //                     \"Percent\": \"100\" // -> ??\r\n            //                 }\r\n            //             ],\r\n            //             \"CreditLimitKey\": {\r\n            //                 \"CreditLimitId\": \"600197109.0011000.01\" // -> numero de cliente + tipo de linea + mas serial\r\n            //             },\r\n            //             \"CurCode\": \"USD\", //-> Tipo de Moneda\r\n            //             \"DeadLineDt\": \"2022-02-02\",  //Fecha del dia\r\n            //             \"DueDt\": \"2023-02-02\",     //Fecha de expiracion\r\n            //             \"LimitAmt\": {\r\n            //                 \"Amt\": \"25,000.00\" //-> Monto de La Linea\r\n            //             },\r\n            //             \"LimitAmtType\": \"FIXED\", //-> FIXED/VARIABLE\r\n            //             \"LimitReject\": \"Y\", // -> YES/NO ??\r\n            //             \"MaxCurAmt\": {\r\n            //                 \"Amt\": \"25,000.00\" //-> Monto de La Linea\r\n            //             },\r\n            //             \"ProposalDt\": \"2022-02-02\", //Fecha Propuesta\r\n            //             \"ReviewDt\": \"2023-02-02\", //Fecha Revision\r\n            //             \"ReviewFreq\": {\r\n            //                 \"FreqValue\": \"20230330M1230\" // YYYY MM DD ... codigo A/M/D ... cantidad de meses, el dia especifico\r\n            //             },\r\n            //             \"Signatories\": {\r\n            //                 \"Signatory\": [\r\n            //                     {\r\n            //                         \"PartyKey\": {\r\n            //                             \"PartyId\": \"45469\" //Numero del Cliente T24\r\n            //                         }\r\n            //                     }\r\n            //                 ]\r\n            //             }\r\n            //         }\r\n            //     }\r\n            // }\r\n\r\n            //console.log(\"NewLine\",data);\r\n             return;\r\n\r\n            var result = await this.post(url.URL_CORE_LINES, data);\r\n            console.log(\"newline\", result);\r\n            if (result.Status.StatusCode === OPTs.ResponseT24_STATUSOK) {\r\n                return (await this.newlineChild(data));\r\n            }\r\n        }\r\n        catch (err) \r\n        { \r\n            errorDispacherHelper.dispatch({status: \"500\",data: result, error: err.message});\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n    async newlineChild(data) {\r\n        try {\r\n                   \r\n            //data.CreditLine.Allow.ProductData            \r\n            for (var i = 0; i < data.CreditLine.CreditLimit.Allow.ProductData.length; i++) {\r\n                try {\r\n                    var dataProd = data.CreditLine.CreditLimit.Allow.ProductData[i];\r\n                    \r\n                    var CreditLimitId = data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId;\r\n                    var CreditLimitIdNum = CreditLimitId.split(\".\")[1].replace(/0/g, '');\r\n                    CreditLimitIdNum = CreditLimitIdNum + \"0\";\r\n\r\n                    var ToReplaceIdNum = (Number(CreditLimitIdNum) + i + 1).toString();\r\n\r\n                    data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId =\r\n                    data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId.split(\".\")[0] + \".\" +\r\n                    data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId.split(\".\")[1].replace(CreditLimitIdNum, ToReplaceIdNum) + \".\" +\r\n                    data.CreditLine.CreditLimit.CreditLimitKey.CreditLimitId.split(\".\")[2];\r\n                                        \r\n                    var tmpdata = JSON.parse(JSON.stringify(data))\r\n                    delete  tmpdata.CreditLine.CreditLimit.Allow\r\n                    console.log(\"NewLineChild\", tmpdata, data);\r\n            \r\n                    var result = await this.post(url.URL_CORE_LINES, tmpdata);\r\n                    if (result.Status.StatusCode === OPTs.ResponseT24_STATUSOK) {\r\n                            //return result;\r\n                        }\r\n                    }\r\n                    catch (err) \r\n                    { \r\n                        errorDispacherHelper.dispatch({status: \"500\",data: result, error: err.message});\r\n                    }\r\n                }\r\n            }\r\n        catch (err) { }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    // Garantia loans/Colateral\r\n    //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/collaterals\r\n\r\n    // Desembolso\r\n    //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans\r\n\r\n    //lineas\r\n    //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/credits/lines/limits\r\n\r\n\r\n    async DesembolsoBajoLinea(data) {\r\n\r\n        data =\r\n        {\r\n            AcctLoan: {\r\n                AcctSubtype: {\r\n                    Cod: \"AL.COMPANY.PRIVATE\"  // Subproducto\r\n                },\r\n                AutonomyCode: \"0523\", // ******** Codigo de la autonomia\r\n                AutonomyUser: \"134\", //La autonomia o usuario que esta logueado\r\n                //ClosedDt:\"2029-10-03\", //\r\n                //ClubBanesco:\"false\",\r\n                CurCode: \"USD\", //codigo de Moneda\r\n                SubCategory: \"1623\", //Codigo de Subcategoria??\r\n                Variation: { //variacion -> Puede ir vacÃ­a\r\n                    \"Cod\": \"CLIENTE\"\r\n                },\r\n                \"AcctOpeningInfo\": {\r\n                    BusinessUnit: \"SUCURSAL\", // Banca viene de IGR\r\n                    \"InitialAmt\": {\r\n                        \"Amt\": \"5950\" //monto\r\n                    },\r\n                    OpenDt: \"2022-02-07\",// Fecha de Inicio del desembolso\r\n                    SaleOfficer: \"3766\" //Canal de venta .... ****** no estÃ¡ en pantalla\r\n                },\r\n                CreditAcctData: {\r\n                    AuthType: \"06\", //-> ?? ************ no esta en pantalla\r\n                    BillsCombined: \"true\", // Capital de Interes ... ********** no esta en pantalla\r\n                    CodeDestination: \"PA10\", // codigo de Destino ... Provincia de Destino\r\n                    CollOfficer: \"9999\", /// campo fijo siempre\r\n                    CountryDestination: \"PA\", // codigo Pais de Destino\r\n                    CreditDestination: \"LOCAL\", // ********* Destino del Credito : LOCAL 1 /EXTRANJERO 2\r\n                    FundsDestination: \"1\", // ********* Destino de los Fondos: LOCAL 1 / EXTRANJERO 2\r\n                    FundsPurpose: \"2103\", // ********** Proposito de los Fondos viene de un catalogo\r\n                    OriginationRef: \"99986\",// ********** referencia de Orientacion , viene de un catalodo\r\n                    RefinanceNum: { // QUEDA FIJO\r\n                        \"self-closing\": \"true\"\r\n                    },\r\n                    SourceSales: { // ********* Viene de Catalogo\r\n                        \"Cod\": \"14\",\r\n                        \"Desc\": \"REFERIDO POR EMPLEADO\"\r\n                    },\r\n                    WritingType: \"PAG\", // *********** Tipo de Escritura .. PAG/WRT .. PagarÃ© o Escritura\r\n                    Charge: [ //cargos \r\n                        {\r\n                            ChargeType: \"LENDCOMMISSION\", //Instrucciones Operativas -> Monto por Comision\r\n                            \"CurAmt\": {\r\n                                \"Amt\": \"392.7\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"ChargeType\": \"TAX\", //Instrucciones Operativas -> ITBMs\r\n                            \"CurAmt\": {\r\n                                \"Amt\": \"2.18\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"ChargeType\": \"ALLEGALFEE\", //Instrucciones Operativas -> NotarÃ­a\r\n                            \"CurAmt\": {\r\n                                \"Amt\": \"4.36\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"ChargeType\": \"TFISCAL\", //Instrucciones Operativas -> Timbre Fisical\r\n                            \"CurAmt\": {\r\n                                \"Amt\": \"3\"\r\n                            }\r\n                        },\r\n                    ],\r\n                    \"CreditRegularPmt\": { // La podemos Omitir no es obligatorio\r\n                        \"BillType\": \"INSTALLMENT\",\r\n                        \"Freq\": {\r\n                            \"NoPaymentMonth\": \"1\",\r\n                            \"OnDayNumber\": \"3\"\r\n                        },\r\n                        \"PmtClass\": \"DUE\",\r\n                        \"PmtType\": \"CONSTANT\",\r\n                        \"PmtTargetDetail\": {\r\n                            \"ActualAmt\": {\r\n                                \"Amt\": \"114.9\"\r\n                            },\r\n                            \"StartDate\": \"2022-04-03\"\r\n                        }\r\n                    },\r\n                    Term: {    //*********** Termino o Plazo de desembolso ... + Tipo de Termino D/M/A\r\n                        ProposedTerm: \"91M\"\r\n                    },\r\n                    SettleInstruction: {\r\n                        PayIn: [\r\n                            {\r\n                                ACDBRule: \"PARTIAL\", //Constante\r\n                                PmtType: \"CONSTANT\",//Constante\r\n                                SettleActivity: { //Constante\r\n                                    Cod: \"LENDING-APPLYPAYMENT-PR.REPAYMENT\"\r\n                                },\r\n                                Settlement: \"false\", //************* desembolso en cuenta TRUE/FALSE\r\n                                PayInAcctRef: {\r\n                                    Activity: {  //Constante\r\n                                        Cod: \"ACCOUNTS-DEBIT-ARRANGEMENT\"\r\n                                    },\r\n                                    PayInAcct: { // NÃºmero de LÃ­nea de CrÃ©dito\r\n                                        \"AcctReference\": \"USD1273300020014\"\r\n                                    }\r\n                                }\r\n                            },\r\n                        ],\r\n                        PayOut: {\r\n                            PayOutAcct: { // NÃºmero de LÃ­nea de CrÃ©dito, el numero de la cuenta\r\n                                \"AcctReference\": \"USD1273300020014\"\r\n                            },\r\n                            Property: \"ACCOUNT\", // Si es una cuenta \"ACCOUNT\"\r\n                            SettleActivity: { //Constante\r\n                                Cod: \"LENDING-APPLYPAYMENT-PR.REPAYMENT\"\r\n                            },\r\n                            Settlement: \"true\" //Constante\r\n                        }\r\n                    },\r\n                    CreditAcctPmtInfo: {\r\n                        PmtMethod: \"DD\" // ******** Metodo de Pago ... DC/PV  Descuento Directo - Pago Voluntario\r\n                    }\r\n                },\r\n                IntRateData: [\r\n                    {\r\n                        IntRate: \"11.50\", // Tasa de Interes\r\n                        IntRateType: \"PRINCIPALINT\"\r\n                    },\r\n                    {\r\n                        \"IntRate\": \"12.50\",\r\n                        \"IntRateType\": \"LT.DPF.BASE\"\r\n                    },\r\n                    {\r\n                        \"IntRate\": \"13.50\",\r\n                        \"IntRateType\": \"LT.SPREAD.POINT\"\r\n                    }\r\n                ],\r\n                AcctMember: {\r\n                    \"PartyKey\": {\r\n                        \"PartyId\": \"990091561\" //Numero de Cliente T24\r\n                    },\r\n                    \"PartyRole\": {\r\n                        \"Cod\": \"OWNER\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var result = await this.put(url.URL_CORE_PRESTAMOS, data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            return result;\r\n        }\r\n\r\n\r\n        return result;\r\n    }\r\n    /*\r\n      \r\n    */\r\n\r\n\r\n    async test() {\r\n\r\n        try {\r\n\r\n            let data = {\r\n                \"Acct\": {\r\n                    \"Activity\": 3201,\r\n                    \"Category\": 28212,\r\n                    \"CurCode\": \"USD\",\r\n                    \"CreditAcctData\": {\r\n                        \"CountryDestination\": \"PA\",\r\n                        \"PromiseLetter\": {\r\n                            \"AdvExpiryDt\": \"2022-12-31\",\r\n                            \"AutoExpiry\": true,\r\n                            \"BeneficiaryCust\": {\r\n                                \"PartyId\": \"\",\r\n                                \"PartyType\": \"\"\r\n                            },\r\n                            \"BeneficiaryName\": \"AUTO TUNNIG CA\",\r\n                            \"ContractType\": \"CA\",\r\n                            \"CustomerReferenceId\": \"MP2022154001\",\r\n                            \"DealSubType\": \"CMTA\",\r\n                            \"EffDt\": \"2022-06-03\",\r\n                            \"EventsProcessing\": \"ONLINE\",\r\n                            \"LimitRef\": \"\",\r\n                            \"LiquidationMode\": \"Automatic\",\r\n                            \"MaturityDt\": \"2022-12-31\",\r\n                            \"OpenDt\": \"2022-06-03\",\r\n                            \"PrincipalAmt\": {\r\n                                \"Amt\": 15000,\r\n                                \"CurCode\": \"USD\"\r\n                            }\r\n                        }\r\n                    },\r\n                    \"AcctMember\": {\r\n                        \"PartyKey\": {\r\n                            \"PartyId\": 600072721,\r\n                            \"PartyType\": 2\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            var result = await this.get(url.URL_CORE_TEST);\r\n            console.log(\"getLineSerial\", result)\r\n\r\n\r\n            return result;\r\n        }\r\n        catch (err) { }\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}