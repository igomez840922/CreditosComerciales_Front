{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\Dashboard\\\\ModalTransferProcess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useLocation, useHistory, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from \"react-i18next\";\nimport * as OPTs from \"../../helpers/options_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport moment from \"moment\";\nimport { InfoBpmModel } from '../../models/Common/InfoBpmModel';\nimport { Row, Col, Card, CardBody, CardFooter, Button, Label, Table, Modal } from \"reactstrap\";\nimport { AvForm, AvField, AvGroup, AvInput, AvCheckbox } from \"availity-reactstrap-validation\";\nimport Select from \"react-select\";\nimport { BackendServices, CoreServices, BpmServices } from \"../../services\";\nimport * as opt from \"../../helpers/options_helper\";\nimport LocalStorageHelper from \"../../helpers/LocalStorageHelper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalTransferProcess = props => {\n  _s();\n\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const location = useLocation();\n  const history = useHistory(); //Servicios\n\n  const [backendServices, setbackendServices] = useState(new BackendServices());\n  const [coreServices, setcoreServices] = useState(new CoreServices());\n  const [bpmServices, setbpmServices] = useState(new BpmServices());\n  const [usersByGroupList, setusersByGroupList] = useState([]);\n  const [usersByGroupSelected, setusersByGroupSelected] = useState(undefined);\n  const localStorageHelper = new LocalStorageHelper();\n  React.useEffect(() => {\n    loadUserGroups();\n  }, [props.data]); //cargar lista de tipo de personas\n\n  function loadUserGroups() {\n    if (props.data === undefined || props.data === null) {\n      return;\n    }\n\n    if (props.data.data === undefined || props.data.data === null) {\n      return;\n    }\n\n    console.log(\"loadUserGroups\", props.data.data);\n    backendServices.getUsersByGroup(props.data.data.grupoldap).then(data => {\n      if (data !== null && data.result !== undefined) {\n        let json = [];\n\n        for (let i = 0; i < data.result.length; i++) {\n          json.push({\n            label: data.result[i][\"userName\"],\n            value: data.result[i][\"userName\"]\n          });\n        }\n\n        console.log(\"getUsersByGroup\", json);\n        setusersByGroupList(json);\n        setusersByGroupSelected(json[0]);\n      }\n    }).catch(error => {});\n  } //Guardar el Cliente\n\n\n  async function handleSubmitFormClient(event, errors, values) {\n    event.preventDefault();\n\n    if (errors.length > 0) {\n      return;\n    }\n\n    console.log(\"handleSubmitFormClient\", values);\n    /*var result = await bpmServices.ChangeTaskUser(usersByGroupSelected.value,props.data.taskId,props.data.instanceId);\r\n    if(result){\r\n      props.updateData();\r\n    }*/\n\n    if (usersByGroupSelected) {\n      usersByGroupSelected.value;\n    }\n\n    var credentials = localStorageHelper.get(opt.VARNAME_USRCREDENTIAL);\n\n    if (credentials && credentials.isAnalysisSupervisor) {\n      saveJBPMProcess(OPTs.PROCESS_ANALISISCREDITO);\n    }\n\n    props.toggle();\n  }\n\n  async function saveJBPMProcess(option) {\n    var _props$data$infoBpmMo, _props$data$infoBpmMo2, _props$data$infoBpmMo3, _props$data$infoBpmMo4;\n\n    var maindebtor = await backendServices.consultPrincipalDebtor(props.data.transactionId);\n    var infoBpmModel = new InfoBpmModel((_props$data$infoBpmMo = (_props$data$infoBpmMo2 = props.data.infoBpmModel) === null || _props$data$infoBpmMo2 === void 0 ? void 0 : _props$data$infoBpmMo2.instanceId) !== null && _props$data$infoBpmMo !== void 0 ? _props$data$infoBpmMo : props.data.instanceId, (_props$data$infoBpmMo3 = (_props$data$infoBpmMo4 = props.data.infoBpmModel) === null || _props$data$infoBpmMo4 === void 0 ? void 0 : _props$data$infoBpmMo4.transactId) !== null && _props$data$infoBpmMo3 !== void 0 ? _props$data$infoBpmMo3 : props.data.transactionId, 0, 0, maindebtor === null || maindebtor === void 0 ? void 0 : maindebtor.personId);\n    infoBpmModel.personName = maindebtor !== undefined ? maindebtor.typePerson == \"2\" ? maindebtor.name : maindebtor.name + \" \" + maindebtor.name2 + \" \" + maindebtor.lastName + \" \" + maindebtor.lastName2 : \"\";\n    infoBpmModel.toprocess = props.data.infobpm.toprocess;\n\n    switch (option) {\n      case OPTs.PROCESS_ANALISISCREDITO:\n        {\n          //Enviar a Analisis de Credito\n          infoBpmModel.processId = OPTs.PROCESS_ANALISISCREDITO;\n          infoBpmModel.activityId = OPTs.ACT_NONE;\n          var values = {\n            \"info\": JSON.stringify(infoBpmModel),\n            \"processId\": OPTs.PROCESS_ANALISISCREDITO.toString(),\n            \"activityId\": OPTs.ACT_NONE.toString(),\n            \"transactionId\": props.data.transactionId,\n            \"requestId\": props.data.requestId,\n            //\"decision\": \"si\",\n            //\"tiposolicitud\": \"si\", //flujo normal (no es devolucion)\n            \"id\": props.data.instanceId,\n            \"analista\": \"\" //autonomy.banca\n\n          };\n          bpmServices.completedStatusTask(props.data.taskId, values).then(data => {\n            if (data !== undefined) {\n              //saveAutoLog(null, null);\n              history.push(url.URL_DASHBOARD);\n            } else {//Mensaje ERROR\n              //seterror_msg(t(\"ErrorSaveMessage\"));\n              // seterror_dlg(false);\n            }\n          });\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: props.isOpen,\n      toggle: props.toggle,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title mt-0\",\n          children: t(\"Transferir TrÃ¡mite\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: props.toggle,\n          className: \"close\",\n          \"data-dismiss\": \"modal\",\n          \"aria-label\": \"Close\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-hidden\": \"true\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(AvForm, {\n          id: \"frmClient\",\n          className: \"needs-validation\",\n          onSubmit: handleSubmitFormClient,\n          children: [/*#__PURE__*/_jsxDEV(CardBody, {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: \"12\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"userSelected\",\n                    children: t(\"Seleccionar Usuario\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    noOptionsMessage: () => \"\",\n                    onChange: e => {\n                      setusersByGroupSelected(usersByGroupList.find(x => x.value === e.value));\n                    } //handleSubmitFormClient({ target: { name: 'usersSelected', value: e.value } })\n                    ,\n                    options: usersByGroupList,\n                    classNamePrefix: \"select2-selection\",\n                    value: usersByGroupSelected,\n                    name: \"userSelected\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 14\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n            style: {\n              textAlign: \"right\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"danger\",\n              style: {\n                margin: '5px 0px'\n              },\n              type: \"button\",\n              onClick: props.toggle,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"mdi mdi mdi-cancel mid-12px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 15\n              }, this), \" \", t(\"Cancel\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              type: \"submit\",\n              style: {\n                margin: '5px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"mdi mdi-content-save mdi-12px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 77\n              }, this), \" \", t(\"Save\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }, this)\n      }, \"TransferForm\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }, this)\n  }, \"mcf1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalTransferProcess, \"c0MtCkZdDkB7Al147lBhRZTfv6I=\", false, function () {\n  return [useTranslation, useLocation, useHistory];\n});\n\n_c = ModalTransferProcess;\nModalTransferProcess.propTypes = {\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  onCancel: PropTypes.func,\n  data: PropTypes.any,\n  updateData: PropTypes.func\n};\nexport default ModalTransferProcess;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalTransferProcess\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/Dashboard/ModalTransferProcess.js"],"names":["React","useState","useLocation","useHistory","Link","PropTypes","useTranslation","OPTs","url","moment","InfoBpmModel","Row","Col","Card","CardBody","CardFooter","Button","Label","Table","Modal","AvForm","AvField","AvGroup","AvInput","AvCheckbox","Select","BackendServices","CoreServices","BpmServices","opt","LocalStorageHelper","ModalTransferProcess","props","t","i18n","location","history","backendServices","setbackendServices","coreServices","setcoreServices","bpmServices","setbpmServices","usersByGroupList","setusersByGroupList","usersByGroupSelected","setusersByGroupSelected","undefined","localStorageHelper","useEffect","loadUserGroups","data","console","log","getUsersByGroup","grupoldap","then","result","json","i","length","push","label","value","catch","error","handleSubmitFormClient","event","errors","values","preventDefault","credentials","get","VARNAME_USRCREDENTIAL","isAnalysisSupervisor","saveJBPMProcess","PROCESS_ANALISISCREDITO","toggle","option","maindebtor","consultPrincipalDebtor","transactionId","infoBpmModel","instanceId","transactId","personId","personName","typePerson","name","name2","lastName","lastName2","toprocess","infobpm","processId","activityId","ACT_NONE","JSON","stringify","toString","requestId","completedStatusTask","taskId","URL_DASHBOARD","isOpen","e","find","x","textAlign","margin","propTypes","bool","func","onCancel","any","updateData"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport { useLocation, useHistory, Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport * as OPTs from \"../../helpers/options_helper\"\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport moment from \"moment\";\r\nimport { InfoBpmModel } from '../../models/Common/InfoBpmModel';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    Button,\r\n    Label,\r\n    Table,\r\n  Modal,\r\n} from \"reactstrap\"\r\n\r\nimport { AvForm, AvField, AvGroup, AvInput, AvCheckbox } from \"availity-reactstrap-validation\";\r\nimport Select from \"react-select\";\r\nimport { BackendServices, CoreServices, BpmServices } from \"../../services\";\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport LocalStorageHelper from \"../../helpers/LocalStorageHelper\";\r\n\r\nconst ModalTransferProcess = props => {\r\n  const { t, i18n } = useTranslation();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  //Servicios\r\n  const [backendServices, setbackendServices] = useState(new BackendServices());\r\n  const [coreServices, setcoreServices] = useState(new CoreServices());\r\n  const [bpmServices, setbpmServices] = useState(new BpmServices());\r\n  const [usersByGroupList, setusersByGroupList] = useState([]);\r\n  const [usersByGroupSelected, setusersByGroupSelected] = useState(undefined);\r\n  const localStorageHelper = new LocalStorageHelper();\r\n    \r\n  React.useEffect(() => {\r\n    loadUserGroups();\r\n  }, [props.data]);\r\n  \r\n\r\n  //cargar lista de tipo de personas\r\n  function loadUserGroups() {\r\n\r\n    if(props.data === undefined || props.data === null){\r\n      return;\r\n    }\r\n    if(props.data.data === undefined || props.data.data === null){\r\n      return;\r\n    }\r\n\r\n    console.log(\"loadUserGroups\",props.data.data)\r\n    backendServices.getUsersByGroup(props.data.data.grupoldap)\r\n      .then((data) => {\r\n        if (data !== null && data.result !== undefined) {\r\n          let json = [];\r\n          for (let i = 0; i < data.result.length; i++) {\r\n            json.push({ label: data.result[i][\"userName\"], value: data.result[i][\"userName\"] })\r\n          }\r\n          console.log(\"getUsersByGroup\",json);\r\n          setusersByGroupList(json);\r\n          setusersByGroupSelected(json[0]);\r\n        }\r\n      }).catch((error) => { });\r\n  }\r\n\r\n  //Guardar el Cliente\r\n  async function handleSubmitFormClient(event, errors, values) {    \r\n    event.preventDefault();\r\n    if (errors.length > 0) {\r\n      return;\r\n    }\r\n    console.log(\"handleSubmitFormClient\", values);\r\n\r\n    /*var result = await bpmServices.ChangeTaskUser(usersByGroupSelected.value,props.data.taskId,props.data.instanceId);\r\n    if(result){\r\n      props.updateData();\r\n    }*/\r\n\r\n    if(usersByGroupSelected){\r\n      usersByGroupSelected.value\r\n    }\r\n    var credentials = localStorageHelper.get(opt.VARNAME_USRCREDENTIAL);\r\n\r\n    if(credentials && credentials.isAnalysisSupervisor){\r\n      saveJBPMProcess(OPTs.PROCESS_ANALISISCREDITO);\r\n    }\r\n\r\n    props.toggle();\r\n  }\r\n\r\n  async function saveJBPMProcess(option) {\r\n    var maindebtor = await backendServices.consultPrincipalDebtor(props.data.transactionId)\r\n    var infoBpmModel = new InfoBpmModel(\r\n      props.data.infoBpmModel?.instanceId ?? props.data.instanceId,\r\n      props.data.infoBpmModel?.transactId ?? props.data.transactionId,\r\n      0, 0,\r\n      maindebtor?.personId\r\n    );\r\n    infoBpmModel.personName = maindebtor !== undefined ? (maindebtor.typePerson == \"2\" ? maindebtor.name : (maindebtor.name + \" \" + maindebtor.name2 + \" \" + maindebtor.lastName + \" \" + maindebtor.lastName2)) : \"\";\r\n    infoBpmModel.toprocess = props.data.infobpm.toprocess;\r\n\r\n    switch (option) {\r\n      case OPTs.PROCESS_ANALISISCREDITO: { //Enviar a Analisis de Credito\r\n        infoBpmModel.processId = OPTs.PROCESS_ANALISISCREDITO;\r\n        infoBpmModel.activityId = OPTs.ACT_NONE;\r\n\r\n           var values = {\r\n              \"info\": JSON.stringify(infoBpmModel),\r\n              \"processId\": OPTs.PROCESS_ANALISISCREDITO.toString(),\r\n              \"activityId\": OPTs.ACT_NONE.toString(),\r\n              \"transactionId\": props.data.transactionId,\r\n              \"requestId\": props.data.requestId,\r\n              //\"decision\": \"si\",\r\n              //\"tiposolicitud\": \"si\", //flujo normal (no es devolucion)\r\n              \"id\": props.data.instanceId,\r\n              \"analista\": \"\" //autonomy.banca\r\n            };\r\n        bpmServices.completedStatusTask(props.data.taskId, values)\r\n          .then((data) => {\r\n            if (data !== undefined) {\r\n\r\n              //saveAutoLog(null, null);\r\n              history.push(url.URL_DASHBOARD);\r\n            }\r\n            else {\r\n              //Mensaje ERROR\r\n              //seterror_msg(t(\"ErrorSaveMessage\"));\r\n              // seterror_dlg(false);\r\n            }\r\n          });\r\n\r\n        break;\r\n      }      \r\n      \r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment key=\"mcf1\">\r\n    <Modal\r\n      isOpen={props.isOpen}\r\n      toggle={props.toggle}\r\n      centered={true}>\r\n      <div className=\"modal-header\">\r\n        <h5 className=\"modal-title mt-0\">{t(\"Transferir TrÃ¡mite\")}</h5>\r\n        <button\r\n          type=\"button\"\r\n          onClick={props.toggle}\r\n          className=\"close\"\r\n          data-dismiss=\"modal\"\r\n          aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div key=\"TransferForm\" className=\"modal-body\">\r\n\r\n      \r\n      <AvForm id=\"frmClient\" className=\"needs-validation\" onSubmit={handleSubmitFormClient}>\r\n       \r\n          {/*<h5 className=\"card-sub-title\">{t(\"Seleccionar Usuario\")}</h5>*/}\r\n          <CardBody>\r\n            <Row>\r\n             \r\n             <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"userSelected\">{t(\"Seleccionar Usuario\")}</Label>\r\n                  <Select noOptionsMessage={() => \"\"}\r\n                    onChange={(e) => { setusersByGroupSelected(usersByGroupList.find(x => x.value === e.value));  }} //handleSubmitFormClient({ target: { name: 'usersSelected', value: e.value } })\r\n                    options={usersByGroupList}\r\n                    classNamePrefix=\"select2-selection\"\r\n                    value={usersByGroupSelected}\r\n                    name=\"userSelected\"\r\n                  />\r\n                </div>\r\n              </Col>\r\n              \r\n              {/*<Col md=\"6\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"transferto\">{t(\"Seleccionar Usuario\")}</Label>\r\n                  <AvField className=\"form-control\"\r\n                    name=\"transferTo\" type=\"text\" />\r\n                </div>\r\n              </Col>*/}\r\n            </Row>\r\n           \r\n          </CardBody>\r\n          <CardFooter style={{ textAlign: \"right\" }}>\r\n            <Button color=\"danger\" style={{ margin: '5px 0px' }} type=\"button\" onClick={props.toggle}>\r\n              <i className=\"mdi mdi mdi-cancel mid-12px\"></i>{\" \"}{t(\"Cancel\")}\r\n            </Button>\r\n            <Button color=\"success\" type=\"submit\" style={{ margin: '5px' }}><i className=\"mdi mdi-content-save mdi-12px\"></i>\r\n              {\" \"}{t(\"Save\")}\r\n            </Button>\r\n          </CardFooter>\r\n       \r\n      </AvForm>\r\n      \r\n      </div>\r\n    </Modal>\r\n</React.Fragment>\r\n  );\r\n};\r\n\r\nModalTransferProcess.propTypes = {\r\n  isOpen: PropTypes.bool,\r\n  toggle: PropTypes.func,\r\n  onCancel:PropTypes.func,\r\n  data:PropTypes.any,\r\n  updateData: PropTypes.func,\r\n}\r\n\r\nexport default ModalTransferProcess;\r\n"]},"metadata":{},"sourceType":"module"}