{"ast":null,"code":"import TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\nimport { GetDashBoardModel } from \"../../models\";\nimport ApiServiceBpm from \"../ApiServiceBpm\";\nimport * as url from \"../../helpers/url_helper\";\nimport * as opt from \"../../helpers/options_helper\";\nimport qs from \"qs\";\nexport default class Services extends ApiServiceBpm {\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  //retorna la bandeja de entrada\n  async getDashBoard(params) {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    return GetDashBoardModel.fromJson(result);\n  }\n\n  async checkAndStartTask(locationData) {\n    try {\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_STARTED\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return false;\n  } //retorna las tareas de un proceso especifico\n\n\n  async getTasksByPrcess(instanceId) {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    result = GetDashBoardModel.fromJson(result);\n    return result.results.filter(e => e.instanceId === instanceId)[0];\n  } //crea e inicia una nueva instancia de Proceso y actividad\n\n\n  async startProcess() {\n    //Estructura de la data que se le debe pasar\n    var data = {\n      \"containerId\": url.WORD_BPM_CONTAINERID,\n      \"processId\": url.WORD_BPM_PROCESSID,\n      \"parametros\": {\n        \"values\": {\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\n          \"activityId\": \"0\",\n          \"transactionId\": \"\",\n          \"customerId\": \"\",\n          \"applicationNumber\": \"\",\n          \"procedureNumber\": \"\",\n          \"requestId\": \"\",\n          \"facilityId\": \"\"\n        }\n      }\n    };\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\n\n    return result.body.processInstanceId;\n  }\n\n  async authentication(data) {\n    var result = await this.post(url.URL_BPM_LOGIN, data);\n    return result.status; //OK\n  }\n\n  async startedStatusTask(taskId) {\n    try {\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_STARTED\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async completedStatusTask(taskId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async abortProcess(instanceId) {\n    try {\n      console.log(\"abortProcess\", instanceId); //Estructura de la data que se le debe pasar\n\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId\n      };\n      console.log(\"data\", data);\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api abortProcess:\", err);\n    }\n\n    return undefined;\n  }\n\n  async updatevariables(instanceId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  } //Retorna la imagen relacionada a un proceso\n\n\n  async wacthprocess(processInstanceId) {\n    try {\n      var params = {\n        containerId: url.WORD_BPM_CONTAINERID,\n        processInstanceId: processInstanceId\n      };\n      var data = qs.stringify(params);\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\n      console.log(result);\n      return result.body.respuesta;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/BpmServices/Services.js"],"names":["TaskListPostownersModel","GetDashBoardModel","ApiServiceBpm","url","opt","qs","Services","getDashBoard","params","result","get","URL_BPM_DASHBOARD","fromJson","checkAndStartTask","locationData","data","WORD_BPM_CONTAINERID","taskId","WORD_BPM_STARTED","put","URL_BPM_STATUSTASK","status","err","console","error","getTasksByPrcess","instanceId","results","filter","e","startProcess","WORD_BPM_PROCESSID","PROCESS_BUSQUEDADESCARTE","toString","post","URL_BPM_STARTPROCESS","body","processInstanceId","authentication","URL_BPM_LOGIN","startedStatusTask","undefined","completedStatusTask","values","WORD_BPM_COMPLETED","abortProcess","log","del","URL_BPM_ABORTPROCESS","updatevariables","URL_BPM_UPDATEVAR","wacthprocess","containerId","stringify","URL_BPM_WATCHPROCESS","respuesta"],"mappings":"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","sourcesContent":["\r\nimport TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\r\nimport { GetDashBoardModel } from \"../../models\";\r\nimport ApiServiceBpm from \"../ApiServiceBpm\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport qs from \"qs\";\r\n\r\nexport default class Services extends ApiServiceBpm {\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  //retorna la bandeja de entrada\r\n  async getDashBoard(params) {\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n    return GetDashBoardModel.fromJson(result);\r\n  }\r\n\r\n  async checkAndStartTask(locationData) {\r\n    try {\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_STARTED,\r\n      }\r\n\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  //retorna las tareas de un proceso especifico\r\n  async getTasksByPrcess(instanceId) {\r\n\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n\r\n    result = GetDashBoardModel.fromJson(result);\r\n\r\n    return result.results.filter((e) => e.instanceId === instanceId)[0];\r\n  }\r\n\r\n  //crea e inicia una nueva instancia de Proceso y actividad\r\n  async startProcess() {\r\n    //Estructura de la data que se le debe pasar\r\n    var data = {\r\n      \"containerId\": url.WORD_BPM_CONTAINERID,\r\n      \"processId\": url.WORD_BPM_PROCESSID,\r\n      \"parametros\": {\r\n        \"values\": {\r\n              \"processId\":opt.PROCESS_BUSQUEDADESCARTE.toString(),\r\n              \"activityId\":\"0\",                    \r\n          \"transactionId\": \"\",\r\n          \"customerId\": \"\",\r\n          \"applicationNumber\": \"\",\r\n          \"procedureNumber\": \"\",\r\n          \"requestId\":\"\",\r\n          \"facilityId\":\"\"\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\r\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\r\n\r\n    return result.body.processInstanceId;\r\n  }\r\n\r\n  async authentication(data) {\r\n    var result = await this.post(url.URL_BPM_LOGIN, data);\r\n    return result.status; //OK\r\n  }\r\n\r\n  async startedStatusTask(taskId) {\r\n    try {\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_STARTED,\r\n      }\r\n\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async completedStatusTask(taskId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async abortProcess(instanceId) {\r\n\r\n    try{\r\n      console.log(\"abortProcess\",instanceId);\r\n      //Estructura de la data que se le debe pasar\r\n    var data ={\r\n      \"containerId\":url.WORD_BPM_CONTAINERID,\r\n      \"processInstanceId\": instanceId,\r\n      } \r\n      console.log(\"data\",data);\r\n    var result = await this.del(url.URL_BPM_ABORTPROCESS,data);\r\n    \r\n      if(result.status === \"OK\"){\r\n        return result;\r\n      }\r\n\r\n    } \r\n    catch(err){\r\n      console.error(\"api abortProcess:\",err)\r\n    }   \r\n\r\n    return undefined;\r\n  }\r\n\r\n  async updatevariables(instanceId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  //Retorna la imagen relacionada a un proceso\r\n  async wacthprocess(processInstanceId) {\r\n    try{\r\n\r\n      var params = { containerId: url.WORD_BPM_CONTAINERID, processInstanceId: processInstanceId}\r\n      var data = qs.stringify(params);\r\n          \r\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\r\n\r\n      console.log(result);\r\n\r\n      return result.body.respuesta;\r\n    }\r\n    catch(err){console.error(err);}\r\n    return undefined;\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}