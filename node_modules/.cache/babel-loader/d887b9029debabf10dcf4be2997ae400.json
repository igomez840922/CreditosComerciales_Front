{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\components\\\\Common\\\\ErrorHandler.js\";\nimport React from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ErrorHandler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    }); // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Something went wrong.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: [this.state.error && this.state.error.toString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this), this.state.errorInfo.componentStack]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this);\n    } // Normally, just render children\n\n\n    return this.props.children;\n  }\n\n}\n/*\r\n<React.ErrorFallbackUI {...{ error, errorMessage }} /> \r\n      \r\nexport default class ErrorHandler extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false,error:\"\",errorInfo: \"\" };\r\n    }\r\n\r\n    componentDidCatch(error, info) {        \r\n        console.log(\"componentDidCatch error\",error);\r\n        console.log(\"componentDidCatch errorInfo\",info);\r\n        \r\n        this.setState({\r\n        \thasError: true,\r\n            error:error.toString(),\r\n            errorInfo: info.componentStack\r\n        })\r\n    }\r\n\r\n    \r\n    static getDerivedStateFromError(error) {\r\n        return { error: error.toString() };\r\n      }\r\n    \r\n      render() {\r\n        if (this.state.hasError) {\r\n            // Render error message or component\r\n            //variant={msgData.isError ? \"danger\" : \"success\"}\r\n            return \r\n            <Alert show={this.state.hasError} variant={\"danger\"}  dismissible onClose={() => { this.setState({\r\n                hasError: false,\r\n                error:\"\",\r\n                errorInfo: \"\"\r\n            }) }}>\r\n                {this.error}\r\n            </Alert>            \r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n*/","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/components/Common/ErrorHandler.js"],"names":["React","Alert","ErrorHandler","Component","constructor","props","state","error","errorInfo","componentDidCatch","setState","render","whiteSpace","toString","componentStack","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAGA,eAAe,MAAMC,YAAN,SAA2BF,KAAK,CAACG,SAAjC,CAA2C;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,CAACF,KAAD,EAAQC,SAAR,EAAmB;AAClC;AACA,SAAKE,QAAL,CAAc;AACZH,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,SAAS,EAAEA;AAFC,KAAd,EAFkC,CAMlC;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKL,KAAL,CAAWE,SAAf,EAA0B;AACxB;AACA,0BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAS,UAAA,KAAK,EAAE;AAAEI,YAAAA,UAAU,EAAE;AAAd,WAAhB;AAAA,qBACG,KAAKN,KAAL,CAAWC,KAAX,IAAoB,KAAKD,KAAL,CAAWC,KAAX,CAAiBM,QAAjB,EADvB,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGG,KAAKP,KAAL,CAAWE,SAAX,CAAqBM,cAHxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAbM,CAcP;;;AACA,WAAO,KAAKT,KAAL,CAAWU,QAAlB;AACD;;AA/BqD;AAmC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\n\r\nexport default class ErrorHandler extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { error: null, errorInfo: null };\r\n    }\r\n    \r\n    componentDidCatch(error, errorInfo) {\r\n      // Catch errors in any components below and re-render with error message\r\n      this.setState({\r\n        error: error,\r\n        errorInfo: errorInfo\r\n      })\r\n      // You can also log error messages to an error reporting service here\r\n    }\r\n    \r\n    render() {\r\n      if (this.state.errorInfo) {\r\n        // Error path\r\n        return (\r\n          <div>\r\n            <h2>Something went wrong.</h2>\r\n            <details style={{ whiteSpace: 'pre-wrap' }}>\r\n              {this.state.error && this.state.error.toString()}\r\n              <br />\r\n              {this.state.errorInfo.componentStack}\r\n            </details>\r\n          </div>\r\n        );\r\n      }\r\n      // Normally, just render children\r\n      return this.props.children;\r\n    }  \r\n  }\r\n  \r\n\r\n/*\r\n<React.ErrorFallbackUI {...{ error, errorMessage }} /> \r\n      \r\nexport default class ErrorHandler extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false,error:\"\",errorInfo: \"\" };\r\n    }\r\n\r\n    componentDidCatch(error, info) {        \r\n        console.log(\"componentDidCatch error\",error);\r\n        console.log(\"componentDidCatch errorInfo\",info);\r\n        \r\n        this.setState({\r\n        \thasError: true,\r\n            error:error.toString(),\r\n            errorInfo: info.componentStack\r\n        })\r\n    }\r\n\r\n    \r\n    static getDerivedStateFromError(error) {\r\n        return { error: error.toString() };\r\n      }\r\n    \r\n      render() {\r\n        if (this.state.hasError) {\r\n            // Render error message or component\r\n            //variant={msgData.isError ? \"danger\" : \"success\"}\r\n            return \r\n            <Alert show={this.state.hasError} variant={\"danger\"}  dismissible onClose={() => { this.setState({\r\n                hasError: false,\r\n                error:\"\",\r\n                errorInfo: \"\"\r\n            }) }}>\r\n                {this.error}\r\n            </Alert>            \r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}