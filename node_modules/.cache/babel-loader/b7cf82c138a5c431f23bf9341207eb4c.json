{"ast":null,"code":"import Currency from \"../../../../helpers/currency\";\nimport { BackendServices, CoreServices } from \"../../../../services\";\nexport default class TreasuryCurve {\n  constructor() {\n    this.backendServices = new BackendServices();\n    this.coreServices = new CoreServices();\n    this.currencyData = new Currency();\n    //chequeamos si tenemos guardado en session\n    var result = sessionStorage.getItem('locationData');\n\n    if (result !== undefined && result !== null) {\n      result = JSON.parse(result);\n      this.location = result;\n    }\n  }\n\n  initial(location = this.location) {\n    return new Promise((resolve, reject) => {\n      this.backendServices.consultGeneralDataIGR(location.transactionId).then(async resp => {\n        var _catalogue$find;\n\n        let bankIGR = {\n          \"AGROPECUARIO\": \"AGRO\",\n          \"CORPORATIVO\": \"CORPORATIVA\",\n          \"EMPRESAS\": \"EMPRESA\",\n          \"INTERINO\": \"INTERINO\",\n          \"BANCA INTERNACIONAL\": \"INTERNACIONAL\",\n          \"PYME\": \"PYME\"\n        };\n        let catalogue = await this.coreServices.getTreasuryCurveCatalogo1().then(resp => resp === null || resp === void 0 ? void 0 : resp.Records);\n        let bank = resp.bank.name;\n        let code = (_catalogue$find = catalogue.find(catalog => catalog.Description === bankIGR[bank])) === null || _catalogue$find === void 0 ? void 0 : _catalogue$find.Code;\n        let treasuryCurveCat = await this.coreServices.getTreasuryCurveCatalogoChild(code).then(resp => resp === null || resp === void 0 ? void 0 : resp.Records);\n        this.treasuryCurve = (treasuryCurveCat === null || treasuryCurveCat === void 0 ? void 0 : treasuryCurveCat.length) > 0 ? this.currencyData.orderByJSON(treasuryCurveCat, 'Code', 'asc') : [];\n        resolve();\n      }).catch(err => {\n        resolve();\n        console.error(err);\n      });\n    });\n  }\n\n  getTreasuryCurve({\n    term,\n    termType\n  }) {\n    let termDiv = termType === 'D' ? 30 : 12;\n    return term = termType === 'M' && term >= 10 && term <= 12 ? 1 : termType === 'Y' ? term : term / termDiv, termType = termType === 'D' ? 'M' : 'Y', termType === 'M' && term >= 10 ? this.getTreasuryCurve({\n      term,\n      termType\n    }) : {\n      term,\n      termType\n    };\n  }\n\n  showTreasuryCurve({\n    proposalRate,\n    termType\n  }) {\n    var _this$treasuryCurve, _this$treasuryCurve2, _treasuryCurves$find;\n\n    console.log(proposalRate, termType, ((_this$treasuryCurve = this.treasuryCurve) === null || _this$treasuryCurve === void 0 ? void 0 : _this$treasuryCurve.length) === 0);\n    if (!proposalRate || !termType || ((_this$treasuryCurve2 = this.treasuryCurve) === null || _this$treasuryCurve2 === void 0 ? void 0 : _this$treasuryCurve2.length) === 0) return;\n    let param = {\n      term: proposalRate,\n      termType: termType === 'AÃ‘OS' ? 'Y' : termType[0]\n    };\n    let treasuryCurveTerm = this.getTreasuryCurve(param);\n    let treasuryCurves = this.treasuryCurve.filter(treasuryCurve => new RegExp(treasuryCurveTerm.termType, 'gi').test(treasuryCurve.Code));\n    return (_treasuryCurves$find = treasuryCurves.find(treasury => treasuryCurveTerm.term <= treasury.Code.split('')[0])) !== null && _treasuryCurves$find !== void 0 ? _treasuryCurves$find : treasuryCurves.at(-1);\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/CommercialCredit/5_PropuestaCredito/Secciones/treasuryCurve.model.js"],"names":["Currency","BackendServices","CoreServices","TreasuryCurve","constructor","backendServices","coreServices","currencyData","result","sessionStorage","getItem","undefined","JSON","parse","location","initial","Promise","resolve","reject","consultGeneralDataIGR","transactionId","then","resp","bankIGR","catalogue","getTreasuryCurveCatalogo1","Records","bank","name","code","find","catalog","Description","Code","treasuryCurveCat","getTreasuryCurveCatalogoChild","treasuryCurve","length","orderByJSON","catch","err","console","error","getTreasuryCurve","term","termType","termDiv","showTreasuryCurve","proposalRate","log","param","treasuryCurveTerm","treasuryCurves","filter","RegExp","test","treasury","split","at"],"mappings":"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","sourcesContent":["import Currency from \"../../../../helpers/currency\";\r\nimport { BackendServices, CoreServices } from \"../../../../services\";\r\n\r\n\r\nexport default class TreasuryCurve {\r\n\r\n    treasuryCurve;\r\n    backendServices = new BackendServices();\r\n    coreServices = new CoreServices();\r\n    currencyData = new Currency();\r\n\r\n    constructor() {\r\n\r\n        //chequeamos si tenemos guardado en session\r\n        var result = sessionStorage.getItem('locationData');\r\n        if (result !== undefined && result !== null) {\r\n            result = JSON.parse(result);\r\n            this.location = result;\r\n        }\r\n\r\n    }\r\n\r\n    initial(location = this.location) {\r\n        return new Promise((resolve, reject) => {\r\n            this.backendServices.consultGeneralDataIGR(location.transactionId).then(async resp => {\r\n                let bankIGR = {\r\n                    \"AGROPECUARIO\": \"AGRO\",\r\n                    \"CORPORATIVO\": \"CORPORATIVA\",\r\n                    \"EMPRESAS\": \"EMPRESA\",\r\n                    \"INTERINO\": \"INTERINO\",\r\n                    \"BANCA INTERNACIONAL\": \"INTERNACIONAL\",\r\n                    \"PYME\": \"PYME\",\r\n                }\r\n\r\n                let catalogue = await this.coreServices.getTreasuryCurveCatalogo1().then(resp => resp?.Records);\r\n                let bank = resp.bank.name;\r\n                let code = catalogue.find(catalog => catalog.Description === bankIGR[bank])?.Code;\r\n                let treasuryCurveCat = await this.coreServices.getTreasuryCurveCatalogoChild(code).then(resp => resp?.Records);\r\n\r\n                this.treasuryCurve = treasuryCurveCat?.length > 0 ? this.currencyData.orderByJSON(treasuryCurveCat, 'Code', 'asc') : [];\r\n                resolve();\r\n            }).catch(err => { resolve(); console.error(err) })\r\n        })\r\n    }\r\n\r\n    getTreasuryCurve({ term, termType }) {\r\n        let termDiv = termType === 'D' ? 30 : 12;\r\n        return term = termType === 'M' && term >= 10 && term <= 12 ? 1 : (termType === 'Y' ? term : term / termDiv), termType = termType === 'D' ? 'M' : 'Y', termType === 'M' && term >= 10 ? this.getTreasuryCurve({ term, termType }) : { term, termType }\r\n    }\r\n\r\n    showTreasuryCurve({ proposalRate, termType }) {\r\n        console.log(proposalRate, termType, this.treasuryCurve?.length === 0)\r\n        if (!proposalRate || !termType || this.treasuryCurve?.length === 0)\r\n            return\r\n\r\n        let param = { term: proposalRate, termType: termType === 'AÃ‘OS' ? 'Y' : termType[0] }\r\n        let treasuryCurveTerm = this.getTreasuryCurve(param);\r\n\r\n        let treasuryCurves = this.treasuryCurve.filter(treasuryCurve => new RegExp(treasuryCurveTerm.termType, 'gi').test(treasuryCurve.Code))\r\n\r\n        return treasuryCurves.find(treasury => treasuryCurveTerm.term <= treasury.Code.split('')[0]) ?? treasuryCurves.at(-1);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}