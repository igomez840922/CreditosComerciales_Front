{"ast":null,"code":"import { BackendServices, CoreServices } from \"../services\";\nconst backendServices = new BackendServices();\nconst coreServices = new CoreServices();\nexport default class AutoSaveData {\n  //salvamos deudas de un tramite\n  async saveInitialData(transactionId) {\n    this.saveDebts(transactionId);\n    this.saveAccountMovements(transactionId);\n    this.saveCorporateExhibition(transactionId);\n    this.saveCorporateExhibitionByClients(transactionId);\n    this.saveFacilities(transactionId);\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibition(transactionId) {\n    try {\n      var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\n        return;\n      }\n\n      dataResult = await coreServices.getCorporateExhibition(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        let datoSent = {\n          \"transactId\": Number(transactionId),\n          //\"accountNumber\": data.name,\n          //\"t24ClientId\": data.customerNumberT24,\n          \"description\": dataResult[i].name,\n          \"approved\": dataResult[i].approved,\n          \"currentBalance\": dataResult[i].balance,\n          \"proposed\": dataResult[i].proposal,\n          \"ltv\": 0,\n          \"difference\": dataResult[i].variation,\n          \"guarantee\": 0\n        };\n        await backendServices.saveExposicionCorporativaBD(datoSent);\n      }\n    } catch (err) {}\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibitionByClients(transactionId) {\n    try {\n      var dataResult = await backendServices.getExposicionCorporativaClienteBD(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\n        return;\n      }\n\n      var debtors = await this.backendServices.consultarDeudores(transactionId);\n\n      if (debtors === null || debtors === undefined) {\n        return undefined;\n      }\n\n      for (var i = 0; i < debtors.length; i++) {}\n    } catch (err) {}\n  } //salvamos facilidades por tramite\n\n\n  async saveFacilities(transactionId) {\n    try {\n      var request = await backendServices.consultGeneralDataPropCred(transactionId);\n      console.log(request);\n      var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\n        return;\n      }\n\n      dataResult = await coreServices.getFacilitiesByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        var _dataResult$i$facilit, _request$0$requestId;\n\n        let datoSent = {\n          \"facilityNumber\": dataResult[i].AcctId,\n          \"cr\": dataResult[i].AcctId,\n          \"amount\": dataResult[i].approvedAmount,\n          \"debtor\": dataResult[i].debtorName,\n          \"clientTypeId\": dataResult[i].debtorId,\n          \"balance\": dataResult[i].actualBalance,\n          \"purpose\": \"\",\n          \"sublimits\": \"\",\n          \"proposalRate\": 0,\n          \"noSubsidyRate\": 0,\n          \"effectiveRate\": 0,\n          \"feci\": false,\n          \"termDays\": 0,\n          \"termDescription\": \"\",\n          \"ltv\": 0,\n          \"finantialConditions\": \" \",\n          \"environmentRiskCategory\": 0,\n          \"covenant\": \" \",\n          \"environmentRiskOpinion\": \" \",\n          \"finantialCovenant\": \" \",\n          \"legalDocumentation\": \"  \",\n          \"otherConditions\": \" \",\n          \"creditRiskOpinion\": \" \",\n          \"provision\": \" \",\n          \"proposalTypeId\": \"\",\n          \"proposalTypeName\": \"\",\n          \"facilityTypeId\": (_dataResult$i$facilit = dataResult[i].facilityType) !== null && _dataResult$i$facilit !== void 0 ? _dataResult$i$facilit : \"\",\n          \"termType\": \"\",\n          \"origin\": \"CORE\",\n          \"applyEscrow\": false,\n          \"facilityId\": 0,\n          \"requestId\": (_request$0$requestId = request[0].requestId) !== null && _request$0$requestId !== void 0 ? _request$0$requestId : \"\",\n          \"startingAmount\": 0,\n          \"term\": \"\"\n        };\n        await backendServices.newFacilityPropCred(datoSent);\n      }\n    } catch (err) {}\n  } //salvamos deudas a Corto y largo Plazo\n\n\n  async saveDebts(transactionId) {\n    try {\n      var checkCP = false;\n      var checkLP = false;\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {} else {\n        checkCP = true;\n      }\n\n      dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) {} else {\n        checkLP = true;\n      }\n\n      if (!checkCP && !checkLP) {\n        return;\n      }\n\n      dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\n\n      if (checkCP) {\n        for (var short of dataResult.shortTermresult) {\n          console.log(\"shortTermresult\", short);\n          var dat = {\n            \"facilityType\": short.facilityType,\n            \"amount\": Number(short.approvedAmount.toFixed(2)),\n            \"date\": short.startDate,\n            \"expirationDate\": short.endDate,\n            \"debitBalance1\": Number(short.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"paymentHistory\": short.paymentHistory,\n            \"rate\": 0,\n            \"fee\": 0,\n            \"bail\": 0,\n            \"fundDestiny\": \"\",\n            status: true,\n            \"bank\": short.bank,\n            \"transactId\": Number(transactionId)\n          };\n          await backendServices.newBankingRelationsDebtsCP(dat);\n        }\n      }\n\n      if (checkLP) {\n        for (var long of dataResult.longTermresult) {\n          var dat1 = {\n            \"transactId\": Number(transactionId),\n            \"bank\": long.bank,\n            \"facilityType\": long.facilityType,\n            \"amount\": Number(long.approvedAmount.toFixed(2)),\n            \"date\": long.startDate,\n            \"expirationDate\": long.endDate,\n            \"debitBalance1\": Number(long.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"paymentHistory\": long.paymentHistory,\n            \"rate\": 0,\n            \"fee\": 0,\n            \"bail\": \" \",\n            \"fundDestiny\": \" \",\n            status: true\n          };\n          await backendServices.newBankingRelationsDebtsLP(dat1);\n        }\n      }\n    } catch (err) {\n      console.error(\"newBankingRelationsDebts\", err);\n    }\n  } //salvamos facilidades por tramite\n\n\n  async saveAccountMovements(transactionId) {\n    try {\n      var dataResult = await backendServices.consultMovementsBank(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\n        return;\n      }\n\n      dataResult = await coreServices.getAccountMovementsByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        //aqui cargamos por cuentas\n        let cuenta = dataResult[i].AcctId;\n\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\n\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\n            let jsonSet = {\n              \"trasactId\": Number(transactionId),\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\n              \"observations\": \"\",\n              \"accountNumber\": cuenta,\n              \"t24\": true\n            };\n            await backendServices.newMovementsAccountsIGR(jsonSet);\n          }\n        }\n      }\n    } catch (err) {}\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/helpers/AutoSaveData.js"],"names":["BackendServices","CoreServices","backendServices","coreServices","AutoSaveData","saveInitialData","transactionId","saveDebts","saveAccountMovements","saveCorporateExhibition","saveCorporateExhibitionByClients","saveFacilities","dataResult","getExposicionCorporativaBD","undefined","length","getCorporateExhibition","i","datoSent","Number","name","approved","balance","proposal","variation","saveExposicionCorporativaBD","err","getExposicionCorporativaClienteBD","debtors","consultarDeudores","request","consultGeneralDataPropCred","console","log","consultarFacilidadesT24","requestId","getFacilitiesByTransaction","AcctId","approvedAmount","debtorName","debtorId","actualBalance","facilityType","newFacilityPropCred","checkCP","checkLP","consultBankingRelationsDebtsCP","getBankingRelationCPDTOList","consultBankRelationsDebtsLP","bankingRelationLPDTOList","getAllTermDebtsByTransaction","short","shortTermresult","dat","toFixed","startDate","endDate","paymentHistory","status","bank","newBankingRelationsDebtsCP","long","longTermresult","dat1","newBankingRelationsDebtsLP","error","consultMovementsBank","bankBanesco","bankOthersBank","getAccountMovementsByTransaction","cuenta","j","dataByYear","k","dataresult","jsonSet","year","month","deposits","amount","newMovementsAccountsIGR"],"mappings":"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","sourcesContent":["\r\nimport { BackendServices, CoreServices } from \"../services\";\r\n\r\nconst backendServices = new BackendServices();\r\nconst coreServices = new CoreServices();\r\n\r\nexport default class AutoSaveData {\r\n\r\n\r\n  //salvamos deudas de un tramite\r\n  async saveInitialData(transactionId) {\r\n    this.saveDebts(transactionId);\r\n    this.saveAccountMovements(transactionId);\r\n    this.saveCorporateExhibition(transactionId);\r\n    this.saveCorporateExhibitionByClients(transactionId);\r\n    this.saveFacilities(transactionId);\r\n  }\r\n\r\n  //salvamos exposicion por tramite\r\n  async saveCorporateExhibition(transactionId) {\r\n    try {\r\n\r\n      var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getCorporateExhibition(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        let datoSent = {\r\n          \"transactId\": Number(transactionId),\r\n          //\"accountNumber\": data.name,\r\n          //\"t24ClientId\": data.customerNumberT24,\r\n          \"description\": dataResult[i].name,\r\n          \"approved\": dataResult[i].approved,\r\n          \"currentBalance\": dataResult[i].balance,\r\n          \"proposed\": dataResult[i].proposal,\r\n          \"ltv\": 0,\r\n          \"difference\": dataResult[i].variation,\r\n          \"guarantee\":0,\r\n        }\r\n        await backendServices.saveExposicionCorporativaBD(datoSent)\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos exposicion por tramite\r\n  async saveCorporateExhibitionByClients(transactionId) {\r\n    try {\r\n\r\n      var dataResult = await backendServices.getExposicionCorporativaClienteBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }\r\n\r\n      var debtors = await this.backendServices.consultarDeudores(transactionId);\r\n        if (debtors === null || debtors === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        for (var i = 0; i < debtors.length; i++) {\r\n          \r\n        }\r\n\r\n      \r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  async saveFacilities(transactionId) {\r\n    try {\r\n\r\n      var request = await backendServices.consultGeneralDataPropCred(transactionId);\r\n      console.log(request);\r\n      var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getFacilitiesByTransaction(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        let datoSent = {\r\n          \"facilityNumber\": dataResult[i].AcctId,\r\n          \"cr\": dataResult[i].AcctId,\r\n          \"amount\": dataResult[i].approvedAmount,\r\n          \"debtor\": dataResult[i].debtorName,\r\n          \"clientTypeId\": dataResult[i].debtorId,\r\n          \"balance\": dataResult[i].actualBalance,\r\n          \"purpose\": \"\",\r\n          \"sublimits\": \"\",\r\n          \"proposalRate\": 0,\r\n          \"noSubsidyRate\": 0,\r\n          \"effectiveRate\": 0,\r\n          \"feci\": false,\r\n          \"termDays\": 0,\r\n          \"termDescription\": \"\",\r\n          \"ltv\": 0,\r\n          \"finantialConditions\": \" \",\r\n          \"environmentRiskCategory\": 0,\r\n          \"covenant\": \" \",\r\n          \"environmentRiskOpinion\": \" \",\r\n          \"finantialCovenant\": \" \",\r\n          \"legalDocumentation\": \"  \",\r\n          \"otherConditions\": \" \",\r\n          \"creditRiskOpinion\": \" \",\r\n          \"provision\": \" \",\r\n          \"proposalTypeId\": \"\",\r\n          \"proposalTypeName\": \"\",\r\n          \"facilityTypeId\": dataResult[i].facilityType ?? \"\",\r\n          \"termType\": \"\",\r\n          \"origin\": \"CORE\",\r\n          \"applyEscrow\": false,\r\n          \"facilityId\": 0,\r\n          \"requestId\": request[0].requestId ?? \"\",\r\n          \"startingAmount\": 0,\r\n          \"term\": \"\"\r\n        }\r\n        await backendServices.newFacilityPropCred(datoSent)\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos deudas a Corto y largo Plazo\r\n  async saveDebts(transactionId) {\r\n    try {\r\n\r\n      var checkCP = false;\r\n      var checkLP = false;\r\n\r\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) { }\r\n      else {\r\n        checkCP = true;\r\n      }\r\n      dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) { }\r\n      else {\r\n        checkLP = true;\r\n      }\r\n\r\n      if (!checkCP && !checkLP) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\r\n      \r\n      if (checkCP) {\r\n        for (var short of dataResult.shortTermresult) {\r\n          console.log(\"shortTermresult\",short);\r\n          var dat = {\r\n            \"facilityType\": short.facilityType,\r\n            \"amount\": Number(short.approvedAmount.toFixed(2)),\r\n            \"date\": short.startDate,\r\n            \"expirationDate\": short.endDate,\r\n            \"debitBalance1\": Number(short.balance.toFixed(2)),\r\n            \"debitBalance2\": 0,\r\n            \"debitBalance3\": 0,\r\n            \"paymentHistory\": short.paymentHistory,\r\n            \"rate\": 0,\r\n            \"fee\": 0,\r\n            \"bail\": 0,\r\n            \"fundDestiny\": \"\",\r\n            status: true,\r\n            \"bank\": short.bank,\r\n            \"transactId\": Number(transactionId)\r\n          }\r\n          await backendServices.newBankingRelationsDebtsCP(dat)\r\n        }\r\n      }\r\n\r\n      if (checkLP) {\r\n        for (var long of dataResult.longTermresult) {\r\n          var dat1 = {\r\n            \"transactId\": Number(transactionId),\r\n            \"bank\": long.bank,\r\n            \"facilityType\": long.facilityType,\r\n            \"amount\": Number(long.approvedAmount.toFixed(2)),\r\n            \"date\": long.startDate,\r\n            \"expirationDate\": long.endDate,\r\n            \"debitBalance1\": Number(long.balance.toFixed(2)),\r\n            \"debitBalance2\": 0,\r\n            \"debitBalance3\": 0,\r\n            \"paymentHistory\": long.paymentHistory,\r\n            \"rate\": 0,\r\n            \"fee\": 0,\r\n            \"bail\": \" \",\r\n            \"fundDestiny\": \" \",\r\n            status: true,\r\n          }\r\n          await backendServices.newBankingRelationsDebtsLP(dat1)\r\n        }\r\n      }\r\n\r\n    }\r\n    catch (err) { console.error(\"newBankingRelationsDebts\",err)}\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  async saveAccountMovements(transactionId) {\r\n    try {\r\n\r\n      var dataResult = await backendServices.consultMovementsBank(transactionId);\r\n      \r\n      if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getAccountMovementsByTransaction(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        //aqui cargamos por cuentas\r\n        let cuenta = dataResult[i].AcctId;\r\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\r\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\r\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\r\n            let jsonSet = {\r\n              \"trasactId\": Number(transactionId),\r\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\r\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\r\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\r\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\r\n              \"observations\": \"\",\r\n              \"accountNumber\": cuenta,\r\n              \"t24\": true\r\n            }\r\n            await backendServices.newMovementsAccountsIGR(jsonSet);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}