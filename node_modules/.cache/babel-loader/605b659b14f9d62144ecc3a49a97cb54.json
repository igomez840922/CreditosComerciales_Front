{"ast":null,"code":"import { BackendServices, CoreServices } from \"../services\";\nconst backendServices = new BackendServices();\nconst coreServices = new CoreServices();\nexport default class AutoSaveData {\n  //salvamos deudas de un tramite\n  async saveInitialData(transactionId) {\n    this.saveDebts(transactionId);\n    this.saveFacilities(transactionId);\n    this.saveCorporateExhibition(transactionId);\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibition(transactionId) {\n    try {\n      var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\n        return;\n      }\n\n      dataResult = await coreServices.getCorporateExhibition(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        let datoSent = {\n          \"transactId\": Number(transactionId),\n          //\"accountNumber\": data.name,\n          //\"t24ClientId\": data.customerNumberT24,\n          \"description\": dataResult[i].name,\n          \"approved\": dataResult[i].approved,\n          \"currentBalance\": dataResult[i].balance,\n          \"proposed\": dataResult[i].proposal,\n          \"ltv\": 0,\n          \"difference\": dataResult[i].variation\n        };\n        await backendServices.saveExposicionCorporativaBD(datoSent);\n      }\n    } catch (err) {}\n  } //salvamos facilidades por tramite\n\n\n  async saveFacilities(transactionId) {\n    try {\n      var request = await backendServices.consultGeneralDataPropCred(transactionId);\n      var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\n        return;\n      }\n\n      dataResult = await coreServices.getFacilitiesByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        var _dataResult$i$facilit, _request$0$requestId;\n\n        let datoSent = {\n          \"facilityNumber\": dataResult[i].AcctId,\n          \"cr\": \"\",\n          \"amount\": dataResult[i].approvedAmount,\n          \"debtor\": dataResult[i].debtorName,\n          \"clientTypeId\": dataResult[i].debtorId,\n          \"balance\": dataResult[i].actualBalance,\n          \"purpose\": \"\",\n          \"sublimits\": \"\",\n          \"proposalRate\": 0,\n          \"noSubsidyRate\": 0,\n          \"effectiveRate\": 0,\n          \"feci\": false,\n          \"termDays\": 0,\n          \"termDescription\": \"\",\n          \"ltv\": 0,\n          \"finantialConditions\": \" \",\n          \"environmentRiskCategory\": 0,\n          \"covenant\": \" \",\n          \"environmentRiskOpinion\": \" \",\n          \"finantialCovenant\": \" \",\n          \"legalDocumentation\": \"  \",\n          \"otherConditions\": \" \",\n          \"creditRiskOpinion\": \" \",\n          \"provision\": \" \",\n          \"proposalTypeId\": \"\",\n          \"proposalTypeName\": \"\",\n          \"facilityTypeId\": (_dataResult$i$facilit = dataResult[i].facilityType) !== null && _dataResult$i$facilit !== void 0 ? _dataResult$i$facilit : \"\",\n          \"termType\": \"\",\n          \"origin\": \"CORE\",\n          \"applyEscrow\": false,\n          \"facilityId\": 0,\n          \"requestId\": (_request$0$requestId = request[0].requestId) !== null && _request$0$requestId !== void 0 ? _request$0$requestId : \"\",\n          \"startingAmount\": 0,\n          \"term\": \"\"\n        };\n        await backendServices.newFacilityPropCred(datoSent);\n      }\n    } catch (err) {}\n  } //salvamos deudas a Corto y largo Plazo\n\n\n  async saveDebts(transactionId) {\n    try {\n      var checkCP = false;\n      var checkLP = false;\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {} else {\n        checkCP = true;\n      }\n\n      dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) {} else {\n        checkLP = true;\n      }\n\n      if (!checkCP && !checkLP) {\n        return;\n      }\n\n      dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\n\n      if (checkCP) {\n        for (var short of dataResult.shortTermresult) {\n          var dat = {\n            \"facilityType\": short.facilityType,\n            \"amount\": Number(short.approvedAmount.toFixed(2)),\n            \"date\": short.startDate,\n            \"expirationDate\": short.endDate,\n            \"debitBalance1\": Number(short.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"rate\": 0,\n            \"fee\": 0,\n            \"bail\": 0,\n            \"fundDestiny\": \"\",\n            status: true,\n            \"bank\": short.bank,\n            \"transactId\": Number(transactionId)\n          };\n          await backendServices.newBankingRelationsDebtsCP(dat);\n        }\n      }\n\n      if (checkLP) {\n        for (var long of dataResult.longTermresult) {\n          var dat1 = {\n            \"transactId\": Number(transactionId),\n            \"bank\": long.bank,\n            \"facilityType\": long.facilityType,\n            \"amount\": Number(long.approvedAmount.toFixed(2)),\n            \"date\": long.startDate,\n            \"expirationDate\": long.endDate,\n            \"debitBalance1\": Number(long.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"rate\": 0,\n            \"fee\": 0,\n            \"bail\": \" \",\n            \"fundDestiny\": \" \",\n            status: true\n          };\n          await backendServices.newBankingRelationsDebtsLP(dat1);\n        }\n      }\n    } catch (err) {}\n  } //salvamos facilidades por tramite\n\n\n  async getAccountMovements(transactionId) {\n    try {\n      var dataResult = await backendServices.consultMovementsBank(transactionId);\n      console.log(\"getAccountMovements\", dataResult);\n\n      if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\n        return;\n      }\n\n      dataResult = await coreServices.getAccountMovementsByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        //aqui cargamos por cuentas\n        let cuenta = dataResult[i].AcctId;\n\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\n\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\n            var _props;\n\n            let jsonSet = {\n              \"trasactId\": Number((_props = props) === null || _props === void 0 ? void 0 : _props.transactionId),\n              \"year\": data[i].dataByYear[j].dataresult[k].year,\n              \"month\": data[i].dataByYear[j].dataresult[k].month,\n              \"deposits\": data[i].dataByYear[j].dataresult[k].deposits,\n              \"averageBalance\": data[i].dataByYear[j].dataresult[k].amount,\n              \"observations\": \"\",\n              \"accountNumber\": cuenta,\n              \"t24\": true\n            };\n            await backendServices.newMovementsAccountsIGR(jsonSet).then(resp => {});\n          }\n        }\n      }\n    } catch (err) {}\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/helpers/AutoSaveData.js"],"names":["BackendServices","CoreServices","backendServices","coreServices","AutoSaveData","saveInitialData","transactionId","saveDebts","saveFacilities","saveCorporateExhibition","dataResult","getExposicionCorporativaBD","undefined","length","getCorporateExhibition","i","datoSent","Number","name","approved","balance","proposal","variation","saveExposicionCorporativaBD","err","request","consultGeneralDataPropCred","consultarFacilidadesT24","requestId","getFacilitiesByTransaction","AcctId","approvedAmount","debtorName","debtorId","actualBalance","facilityType","newFacilityPropCred","checkCP","checkLP","consultBankingRelationsDebtsCP","getBankingRelationCPDTOList","consultBankRelationsDebtsLP","bankingRelationLPDTOList","getAllTermDebtsByTransaction","short","shortTermresult","dat","toFixed","startDate","endDate","status","bank","newBankingRelationsDebtsCP","long","longTermresult","dat1","newBankingRelationsDebtsLP","getAccountMovements","consultMovementsBank","console","log","bankBanesco","bankOthersBank","getAccountMovementsByTransaction","cuenta","j","dataByYear","k","dataresult","jsonSet","props","data","year","month","deposits","amount","newMovementsAccountsIGR","then","resp"],"mappings":"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","sourcesContent":["\r\nimport { BackendServices, CoreServices } from \"../services\";\r\n\r\nconst backendServices = new BackendServices();\r\nconst coreServices = new CoreServices();\r\n\r\nexport default class AutoSaveData{\r\n    \r\n\r\n    //salvamos deudas de un tramite\r\n    async saveInitialData(transactionId) {\r\n        this.saveDebts(transactionId);\r\n        this.saveFacilities(transactionId);\r\n        this.saveCorporateExhibition(transactionId);\r\n    }\r\n\r\n    //salvamos exposicion por tramite\r\n    async saveCorporateExhibition(transactionId) {\r\n        try{\r\n\r\n            var dataResult =  await  backendServices.getExposicionCorporativaBD(transactionId);\r\n            if(dataResult!==undefined && dataResult!==null && dataResult.length > 0){\r\n                return;\r\n            }\r\n    \r\n            dataResult =  await coreServices.getCorporateExhibition(transactionId)\r\n           for (let i = 0; i < dataResult.length; i++) {\r\n            let datoSent = {\r\n              \"transactId\": Number(transactionId),\r\n              //\"accountNumber\": data.name,\r\n              //\"t24ClientId\": data.customerNumberT24,\r\n              \"description\": dataResult[i].name,\r\n              \"approved\": dataResult[i].approved,\r\n              \"currentBalance\": dataResult[i].balance,\r\n              \"proposed\": dataResult[i].proposal,\r\n              \"ltv\": 0,\r\n              \"difference\": dataResult[i].variation,\r\n            }\r\n            await backendServices.saveExposicionCorporativaBD(datoSent)\r\n          }         \r\n        }\r\n        catch(err){}\r\n    }\r\n   \r\n    //salvamos facilidades por tramite\r\n    async saveFacilities(transactionId) {\r\n        try{\r\n           \r\n           var request = await backendServices.consultGeneralDataPropCred(transactionId);\r\n          \r\n           var dataResult =  await backendServices.consultarFacilidadesT24(request[0].requestId);\r\n            if(dataResult!==undefined && dataResult!==null && dataResult.length > 0){\r\n                return;\r\n            }\r\n\r\n           dataResult =  await coreServices.getFacilitiesByTransaction(transactionId)\r\n           for (let i = 0; i < dataResult.length; i++) {\r\n            let datoSent = {\r\n                \"facilityNumber\": dataResult[i].AcctId,\r\n                \"cr\": \"\",\r\n                \"amount\": dataResult[i].approvedAmount,\r\n                \"debtor\": dataResult[i].debtorName,\r\n                \"clientTypeId\": dataResult[i].debtorId,\r\n                \"balance\": dataResult[i].actualBalance,\r\n                \"purpose\": \"\",\r\n                \"sublimits\": \"\",\r\n                \"proposalRate\": 0,\r\n                \"noSubsidyRate\": 0,\r\n                \"effectiveRate\": 0,\r\n                \"feci\": false,\r\n                \"termDays\": 0,\r\n                \"termDescription\": \"\",\r\n                \"ltv\": 0,\r\n                \"finantialConditions\": \" \",\r\n                \"environmentRiskCategory\": 0,\r\n                \"covenant\": \" \",\r\n                \"environmentRiskOpinion\": \" \",\r\n                \"finantialCovenant\": \" \",\r\n                \"legalDocumentation\": \"  \",\r\n                \"otherConditions\": \" \",\r\n                \"creditRiskOpinion\": \" \",\r\n                \"provision\": \" \",\r\n                \"proposalTypeId\": \"\",\r\n                \"proposalTypeName\": \"\",\r\n                \"facilityTypeId\": dataResult[i].facilityType ?? \"\",\r\n                \"termType\": \"\",\r\n                \"origin\": \"CORE\",\r\n                \"applyEscrow\": false,\r\n                \"facilityId\": 0,\r\n                \"requestId\": request[0].requestId ?? \"\",\r\n                \"startingAmount\": 0,\r\n                \"term\": \"\"\r\n              }\r\n            await backendServices.newFacilityPropCred(datoSent)\r\n          }         \r\n        }\r\n        catch(err){}\r\n    }\r\n\r\n    //salvamos deudas a Corto y largo Plazo\r\n    async saveDebts(transactionId) {\r\n        try{\r\n           \r\n            var checkCP =false;\r\n            var checkLP =false;\r\n\r\n            var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\r\n            if(dataResult!==undefined && dataResult!==null && dataResult.getBankingRelationCPDTOList.length > 0){}\r\n            else{\r\n                checkCP=true;\r\n            }\r\n            dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\r\n            if(dataResult!==undefined && dataResult!==null && dataResult.bankingRelationLPDTOList.length > 0){}\r\n            else{\r\n                checkLP=true;\r\n            }\r\n\r\n            if(!checkCP && !checkLP){\r\n                return;\r\n            }\r\n\r\n            dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\r\n    \r\n            if(checkCP){\r\n                for (var short of dataResult.shortTermresult) {\r\n                    var dat = {\r\n                      \"facilityType\": short.facilityType,\r\n                      \"amount\": Number(short.approvedAmount.toFixed(2)),\r\n                      \"date\": short.startDate,\r\n                      \"expirationDate\": short.endDate,\r\n                      \"debitBalance1\": Number(short.balance.toFixed(2)),\r\n                      \"debitBalance2\": 0,\r\n                      \"debitBalance3\": 0,\r\n                      \"rate\": 0,\r\n                      \"fee\": 0,\r\n                      \"bail\": 0,\r\n                      \"fundDestiny\": \"\",\r\n                      status: true,\r\n                      \"bank\": short.bank,\r\n                      \"transactId\": Number(transactionId)\r\n                    }\r\n                    await backendServices.newBankingRelationsDebtsCP(dat)\r\n                  }\r\n            }\r\n\r\n            if(checkLP){\r\n                for (var long of dataResult.longTermresult) {\r\n                    var dat1 = {\r\n                      \"transactId\": Number(transactionId),\r\n                      \"bank\": long.bank,\r\n                      \"facilityType\": long.facilityType,\r\n                      \"amount\": Number(long.approvedAmount.toFixed(2)),\r\n                      \"date\": long.startDate,\r\n                      \"expirationDate\": long.endDate,\r\n                      \"debitBalance1\": Number(long.balance.toFixed(2)),\r\n                      \"debitBalance2\": 0,\r\n                      \"debitBalance3\": 0,\r\n                      \"rate\": 0,\r\n                      \"fee\": 0,\r\n                      \"bail\": \" \",\r\n                      \"fundDestiny\": \" \",\r\n                      status: true,\r\n                    }\r\n                    await backendServices.newBankingRelationsDebtsLP(dat1)\r\n                  }\r\n            }\r\n               \r\n        }\r\n        catch(err){}\r\n    }\r\n\r\n    //salvamos facilidades por tramite\r\n    async getAccountMovements(transactionId) {\r\n        try{\r\n           \r\n           \r\n           var dataResult =  await backendServices.consultMovementsBank(transactionId);\r\n            console.log(\"getAccountMovements\",dataResult);\r\n                     \r\n            if(dataResult!==undefined && dataResult!==null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0) ){\r\n                return;\r\n            }\r\n            \r\n\r\n           dataResult =  await coreServices.getAccountMovementsByTransaction(transactionId)\r\n           for (let i = 0; i < dataResult.length; i++) {\r\n            //aqui cargamos por cuentas\r\n            let cuenta = dataResult[i].AcctId;\r\n            for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\r\n              console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\r\n              for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\r\n                let jsonSet = {\r\n                  \"trasactId\": Number(props?.transactionId),\r\n                  \"year\": data[i].dataByYear[j].dataresult[k].year,\r\n                  \"month\": data[i].dataByYear[j].dataresult[k].month,\r\n                  \"deposits\": data[i].dataByYear[j].dataresult[k].deposits,\r\n                  \"averageBalance\": data[i].dataByYear[j].dataresult[k].amount,\r\n                  \"observations\": \"\",\r\n                  \"accountNumber\": cuenta,\r\n                  \"t24\": true\r\n                }\r\n                await backendServices.newMovementsAccountsIGR(jsonSet).then(resp => {\r\n\r\n                })\r\n\r\n              }\r\n\r\n            }\r\n\r\n          }        \r\n        }\r\n        catch(err){}\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}