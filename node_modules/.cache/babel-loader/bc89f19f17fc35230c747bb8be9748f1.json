{"ast":null,"code":"import TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\nimport { GetDashBoardModel } from \"../../models\";\nimport ApiServiceBpm from \"../ApiServiceBpm\";\nimport * as url from \"../../helpers/url_helper\";\nimport * as opt from \"../../helpers/options_helper\";\nimport qs from \"qs\";\nimport { result } from \"lodash\";\nexport default class Services extends ApiServiceBpm {\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  //retorna la bandeja de entrada\n  async getDashBoard(params) {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    return GetDashBoardModel.fromJson(result);\n  } //Cheque e Inicializa la tarea\n\n\n  async checkAndStartTask(locationData) {\n    try {\n      console.log('checkAndStartTask', locationData); //chequear si la tarea no ha sido iniciada\n\n      if (locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\") {\n        //Iniciamos la nueva tarea en BPM   \n        await this.startedStatusTask(locationData.taskId);\n        return true;\n      } else {\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    return false;\n  } //retorna las tareas de un proceso especifico\n\n\n  async getTasksByPrcess(instanceId) {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    result = GetDashBoardModel.fromJson(result);\n    return result.results.filter(e => e.instanceId === instanceId)[0];\n  } //crea e inicia una nueva instancia de Proceso y actividad\n\n\n  async startProcess() {\n    //Estructura de la data que se le debe pasar\n    var data = {\n      \"containerId\": url.WORD_BPM_CONTAINERID,\n      \"processId\": url.WORD_BPM_PROCESSID,\n      \"parametros\": {\n        \"values\": {\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\n          \"activityId\": \"0\",\n          \"transactionId\": \"\",\n          \"customerId\": \"\",\n          \"applicationNumber\": \"\",\n          \"procedureNumber\": \"\",\n          \"requestId\": \"\",\n          \"facilityId\": \"\",\n          \"dambientalparalelo\": \"\",\n          \"decision\": \"\",\n          \"id\": \"\",\n          \"monto\": 0,\n          \"monto\": 0,\n          \"monto\": 0\n        }\n      }\n    };\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\n\n    return result.body.processInstanceId;\n  }\n\n  async authentication(data) {\n    var result = await this.post(url.URL_BPM_LOGIN, data);\n    return result.status; //OK\n  }\n\n  async startedStatusTask(taskId) {\n    try {\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_STARTED\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api startedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async completedStatusTask(taskId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async abortProcess(instanceId) {\n    try {\n      console.log(\"abortProcess\", instanceId); //Estructura de la data que se le debe pasar\n\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId\n      };\n      console.log(\"data\", data);\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api abortProcess:\", err);\n    }\n\n    return undefined;\n  }\n\n  async updatevariables(instanceId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  } //Retorna la imagen relacionada a un proceso\n\n\n  async wacthprocess(processInstanceId) {\n    try {\n      var params = {\n        containerId: url.WORD_BPM_CONTAINERID,\n        processInstanceId: processInstanceId\n      };\n      var data = qs.stringify(params);\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\n      console.log(\"wacthprocess\", result);\n      return result.body.response;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/BpmServices/Services.js"],"names":["TaskListPostownersModel","GetDashBoardModel","ApiServiceBpm","url","opt","qs","result","Services","getDashBoard","params","get","URL_BPM_DASHBOARD","fromJson","checkAndStartTask","locationData","console","log","taskStatus","startedStatusTask","taskId","err","error","getTasksByPrcess","instanceId","results","filter","e","startProcess","data","WORD_BPM_CONTAINERID","WORD_BPM_PROCESSID","PROCESS_BUSQUEDADESCARTE","toString","post","URL_BPM_STARTPROCESS","body","processInstanceId","authentication","URL_BPM_LOGIN","status","WORD_BPM_STARTED","put","URL_BPM_STATUSTASK","undefined","completedStatusTask","values","WORD_BPM_COMPLETED","abortProcess","del","URL_BPM_ABORTPROCESS","updatevariables","URL_BPM_UPDATEVAR","wacthprocess","containerId","stringify","URL_BPM_WATCHPROCESS","response"],"mappings":"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","sourcesContent":["\r\nimport TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\r\nimport { GetDashBoardModel } from \"../../models\";\r\nimport ApiServiceBpm from \"../ApiServiceBpm\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport qs from \"qs\";\r\nimport { result } from \"lodash\";\r\n\r\nexport default class Services extends ApiServiceBpm {\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  //retorna la bandeja de entrada\r\n  async getDashBoard(params) {\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n    return GetDashBoardModel.fromJson(result);\r\n  }\r\n\r\n  //Cheque e Inicializa la tarea\r\n  async checkAndStartTask(locationData) {\r\n    try {\r\n      console.log('checkAndStartTask',locationData);\r\n      \r\n      //chequear si la tarea no ha sido iniciada\r\n      if(locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\"){        \r\n        //Iniciamos la nueva tarea en BPM   \r\n        await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      }\r\n      else{\r\n        return true;\r\n      }      \r\n    }\r\n    catch (err) {console.error(err)}\r\n    return false;\r\n  }\r\n\r\n  //retorna las tareas de un proceso especifico\r\n  async getTasksByPrcess(instanceId) {\r\n\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n\r\n    result = GetDashBoardModel.fromJson(result);\r\n\r\n    return result.results.filter((e) => e.instanceId === instanceId)[0];\r\n  }\r\n\r\n  //crea e inicia una nueva instancia de Proceso y actividad\r\n  async startProcess() {\r\n    //Estructura de la data que se le debe pasar\r\n    var data = {\r\n      \"containerId\": url.WORD_BPM_CONTAINERID,\r\n      \"processId\": url.WORD_BPM_PROCESSID,\r\n      \"parametros\": {\r\n        \"values\": {\r\n          \"processId\":opt.PROCESS_BUSQUEDADESCARTE.toString(),\r\n          \"activityId\":\"0\",                    \r\n          \"transactionId\": \"\",\r\n          \"customerId\": \"\",\r\n          \"applicationNumber\": \"\",\r\n          \"procedureNumber\": \"\",\r\n          \"requestId\":\"\",\r\n          \"facilityId\":\"\",\r\n          \"dambientalparalelo\":\"\",\r\n          \"decision\":\"\",\r\n          \"id\":\"\",\r\n          \"monto\":0,\r\n          \"monto\":0,\r\n          \"monto\":0,\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\r\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\r\n\r\n    return result.body.processInstanceId;\r\n  }\r\n\r\n  async authentication(data) {\r\n    var result = await this.post(url.URL_BPM_LOGIN, data);\r\n    return result.status; //OK\r\n  }\r\n\r\n  async startedStatusTask(taskId) {\r\n    try {\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_STARTED,\r\n      }\r\n\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api startedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async completedStatusTask(taskId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async abortProcess(instanceId) {\r\n\r\n    try{\r\n      console.log(\"abortProcess\",instanceId);\r\n      //Estructura de la data que se le debe pasar\r\n    var data ={\r\n      \"containerId\":url.WORD_BPM_CONTAINERID,\r\n      \"processInstanceId\": instanceId,\r\n      } \r\n      console.log(\"data\",data);\r\n    var result = await this.del(url.URL_BPM_ABORTPROCESS,data);\r\n    \r\n      if(result.status === \"OK\"){\r\n        return result;\r\n      }\r\n\r\n    } \r\n    catch(err){\r\n      console.error(\"api abortProcess:\",err)\r\n    }   \r\n\r\n    return undefined;\r\n  }\r\n\r\n  async updatevariables(instanceId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  //Retorna la imagen relacionada a un proceso\r\n  async wacthprocess(processInstanceId) {\r\n    try{\r\n\r\n      var params = { containerId: url.WORD_BPM_CONTAINERID, processInstanceId: processInstanceId}\r\n      var data = qs.stringify(params);\r\n          \r\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\r\n\r\n      console.log(\"wacthprocess\",result);\r\n\r\n      return result.body.response;\r\n    }\r\n    catch(err){console.error(err);}\r\n    return undefined;\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}