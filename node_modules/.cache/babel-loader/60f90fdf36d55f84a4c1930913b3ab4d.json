{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\helpers\\\\errorModalSoaint.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useTranslation, withTranslation } from \"react-i18next\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport PropTypes from 'prop-types';\nimport error from '../assets/images/error.png';\nimport { Row, Col, Button, Label, Modal, Card, CardBody, CardFooter } from \"reactstrap\"; // import './index.css';\n\nimport { AvForm, AvField, AvGroup } from \"availity-reactstrap-validation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalErrrorMessage = props => {\n  _s();\n\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [activacion, setactivacion] = useState(false);\n  const [datosError, setdatosError] = useState({\n    code: \"\",\n    message: \"\",\n    functionName: \"\",\n    serviceType: \"\",\n    error: false\n  });\n  let jsonTypeService = {\n    bk: \"Backend Services\",\n    bpm: \"JBPM Services\",\n    core: \"Core Services\"\n  };\n  let jsonErrorMessage = {\n    400: \"Bad Request\",\n    404: \"Path not found\",\n    500: \"Server error\",\n    503: \"There are empty fields\"\n  };\n  React.useEffect(() => {\n    window.addEventListener('errorSoaint', storageSoaint);\n    return () => {\n      window.removeEventListener(\"errorSoaint\", storageSoaint);\n    };\n  }, []);\n\n  function storageSoaint() {\n    let json = JSON.parse(localStorage.getItem('jsonError'));\n\n    if (json.message.message != null) {\n      json[\"subtitle\"] = json.message.message;\n    }\n\n    if (json.message.status != null) {\n      json[\"title\"] = json.message.status;\n    }\n\n    if (json.message.exceptionMessage != null) {\n      json[\"subtitle\"] = json.message.exceptionMessage;\n    }\n\n    if (json.message.statusDesc != null) {\n      json[\"title\"] = json.message.statusDesc;\n    }\n\n    setdatosError(json);\n    setactivacion(json === null || json === void 0 ? void 0 : json.error);\n  }\n\n  function cambiarStatus() {\n    let jsonError = {\n      code: \"\",\n      error: false,\n      functionName: \"\",\n      message: \"\",\n      method: \"\",\n      serviceType: \"\",\n      url: \"\"\n    };\n    localStorage.setItem(\"jsonError\", JSON.stringify(jsonError));\n    removeBodyCss();\n    setactivacion(false);\n  }\n\n  function removeBodyCss() {\n    document.body.classList.add(\"no_padding\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: activacion ? /*#__PURE__*/_jsxDEV(SweetAlert, {\n      danger: true,\n      title: datosError === null || datosError === void 0 ? void 0 : datosError.title,\n      confirmButtonText: t(\"Confirm\"),\n      cancelButtonText: t(\"Cancel\"),\n      onConfirm: () => {\n        cambiarStatus();\n      },\n      children: datosError === null || datosError === void 0 ? void 0 : datosError.subtitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalErrrorMessage, \"tR7BMO7O0SK5+zWOHEEyGuGiDbo=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ModalErrrorMessage;\nexport default ModalErrrorMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalErrrorMessage\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/helpers/errorModalSoaint.js"],"names":["React","useState","useTranslation","withTranslation","SweetAlert","PropTypes","error","Row","Col","Button","Label","Modal","Card","CardBody","CardFooter","AvForm","AvField","AvGroup","ModalErrrorMessage","props","t","i18n","activacion","setactivacion","datosError","setdatosError","code","message","functionName","serviceType","jsonTypeService","bk","bpm","core","jsonErrorMessage","useEffect","window","addEventListener","storageSoaint","removeEventListener","json","JSON","parse","localStorage","getItem","status","exceptionMessage","statusDesc","cambiarStatus","jsonError","method","url","setItem","stringify","removeBodyCss","document","body","classList","add","title","subtitle"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,eAAhD;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,SACIC,GADJ,EAEIC,GAFJ,EAGIC,MAHJ,EAIIC,KAJJ,EAKIC,KALJ,EAMIC,IANJ,EAOIC,QAPJ,EAQIC,UARJ,QASO,YATP,C,CAUA;;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,QAAyC,gCAAzC;;;AACA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAAA;;AAClC,QAAM;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAcnB,cAAc,EAAlC;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACuB,UAAD,EAAaC,aAAb,IAA8BxB,QAAQ,CAAC;AACzCyB,IAAAA,IAAI,EAAE,EADmC;AAEzCC,IAAAA,OAAO,EAAE,EAFgC;AAGzCC,IAAAA,YAAY,EAAE,EAH2B;AAIzCC,IAAAA,WAAW,EAAE,EAJ4B;AAKzCvB,IAAAA,KAAK,EAAE;AALkC,GAAD,CAA5C;AAOA,MAAIwB,eAAe,GAAG;AAClBC,IAAAA,EAAE,EAAE,kBADc;AAElBC,IAAAA,GAAG,EAAE,eAFa;AAGlBC,IAAAA,IAAI,EAAE;AAHY,GAAtB;AAKA,MAAIC,gBAAgB,GAAG;AACnB,SAAK,aADc;AAEnB,SAAK,gBAFc;AAGnB,SAAK,cAHc;AAInB,SAAK;AAJc,GAAvB;AAMAlC,EAAAA,KAAK,CAACmC,SAAN,CAAgB,MAAM;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,aAAxB,EAAuCC,aAAvC;AACA,WAAO,MAAM;AACTF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,aAA3B,EAA0CD,aAA1C;AACH,KAFD;AAGH,GALD,EAKG,EALH;;AAOA,WAASA,aAAT,GAAyB;AACrB,QAAIE,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAX;;AAEA,QAAGJ,IAAI,CAACb,OAAL,CAAaA,OAAb,IAAsB,IAAzB,EAA8B;AAC1Ba,MAAAA,IAAI,CAAC,UAAD,CAAJ,GAAiBA,IAAI,CAACb,OAAL,CAAaA,OAA9B;AACH;;AAED,QAAGa,IAAI,CAACb,OAAL,CAAakB,MAAb,IAAqB,IAAxB,EAA6B;AACzBL,MAAAA,IAAI,CAAC,OAAD,CAAJ,GAAcA,IAAI,CAACb,OAAL,CAAakB,MAA3B;AACH;;AAED,QAAGL,IAAI,CAACb,OAAL,CAAamB,gBAAb,IAA+B,IAAlC,EAAuC;AACnCN,MAAAA,IAAI,CAAC,UAAD,CAAJ,GAAiBA,IAAI,CAACb,OAAL,CAAamB,gBAA9B;AACH;;AAED,QAAGN,IAAI,CAACb,OAAL,CAAaoB,UAAb,IAAyB,IAA5B,EAAiC;AAC7BP,MAAAA,IAAI,CAAC,OAAD,CAAJ,GAAcA,IAAI,CAACb,OAAL,CAAaoB,UAA3B;AACH;;AAEDtB,IAAAA,aAAa,CAACe,IAAD,CAAb;AACAjB,IAAAA,aAAa,CAACiB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAElC,KAAP,CAAb;AACH;;AAED,WAAS0C,aAAT,GAAyB;AACrB,QAAIC,SAAS,GAAG;AACZvB,MAAAA,IAAI,EAAE,EADM;AAEZpB,MAAAA,KAAK,EAAE,KAFK;AAGZsB,MAAAA,YAAY,EAAE,EAHF;AAIZD,MAAAA,OAAO,EAAE,EAJG;AAKZuB,MAAAA,MAAM,EAAE,EALI;AAMZrB,MAAAA,WAAW,EAAE,EAND;AAOZsB,MAAAA,GAAG,EAAE;AAPO,KAAhB;AASAR,IAAAA,YAAY,CAACS,OAAb,CAAqB,WAArB,EAAkCX,IAAI,CAACY,SAAL,CAAeJ,SAAf,CAAlC;AACAK,IAAAA,aAAa;AACb/B,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH;;AACD,WAAS+B,aAAT,GAAyB;AACrBC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,YAA5B;AACH;;AACD,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,cACCpC,UAAU,gBACP,QAAC,UAAD;AACA,MAAA,MAAM,MADN;AAEA,MAAA,KAAK,EAAEE,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEmC,KAFnB;AAGA,MAAA,iBAAiB,EAAEvC,CAAC,CAAC,SAAD,CAHpB;AAIA,MAAA,gBAAgB,EAAEA,CAAC,CAAC,QAAD,CAJnB;AAKA,MAAA,SAAS,EAAE,MAAM;AAChB4B,QAAAA,aAAa;AACb,OAPD;AAAA,gBASCxB,UATD,aASCA,UATD,uBASCA,UAAU,CAAEoC;AATb;AAAA;AAAA;AAAA;AAAA,YADO,GAYV;AAbD;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAvFD;;GAAM1C,kB;UACkBhB,c;;;KADlBgB,kB;AAwFN,eAAeA,kBAAf","sourcesContent":["import React, { useState } from \"react\"\r\nimport { useTranslation, withTranslation } from \"react-i18next\"\r\nimport SweetAlert from \"react-bootstrap-sweetalert\"\r\nimport PropTypes from 'prop-types';\r\nimport error from '../assets/images/error.png'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Label,\r\n    Modal,\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n} from \"reactstrap\"\r\n// import './index.css';\r\nimport { AvForm, AvField, AvGroup } from \"availity-reactstrap-validation\"\r\nconst ModalErrrorMessage = (props) => {\r\n    const { t, i18n } = useTranslation();\r\n    const [activacion, setactivacion] = useState(false);\r\n    const [datosError, setdatosError] = useState({\r\n        code: \"\",\r\n        message: \"\",\r\n        functionName: \"\",\r\n        serviceType: \"\",\r\n        error: false\r\n    });\r\n    let jsonTypeService = {\r\n        bk: \"Backend Services\",\r\n        bpm: \"JBPM Services\",\r\n        core: \"Core Services\"\r\n    }\r\n    let jsonErrorMessage = {\r\n        400: \"Bad Request\",\r\n        404: \"Path not found\",\r\n        500: \"Server error\",\r\n        503: \"There are empty fields\"\r\n    }\r\n    React.useEffect(() => {\r\n        window.addEventListener('errorSoaint', storageSoaint);\r\n        return () => {\r\n            window.removeEventListener(\"errorSoaint\", storageSoaint)\r\n        }\r\n    }, [])\r\n\r\n    function storageSoaint() {\r\n        let json = JSON.parse(localStorage.getItem('jsonError'));\r\n\r\n        if(json.message.message!=null){\r\n            json[\"subtitle\"]=json.message.message;\r\n        }\r\n\r\n        if(json.message.status!=null){\r\n            json[\"title\"]=json.message.status;\r\n        }\r\n\r\n        if(json.message.exceptionMessage!=null){\r\n            json[\"subtitle\"]=json.message.exceptionMessage;\r\n        }\r\n        \r\n        if(json.message.statusDesc!=null){\r\n            json[\"title\"]=json.message.statusDesc;\r\n        }\r\n\r\n        setdatosError(json)\r\n        setactivacion(json?.error);\r\n    }\r\n\r\n    function cambiarStatus() {\r\n        let jsonError = {\r\n            code: \"\",\r\n            error: false,\r\n            functionName: \"\",\r\n            message: \"\",\r\n            method: \"\",\r\n            serviceType: \"\",\r\n            url: \"\",\r\n        }\r\n        localStorage.setItem(\"jsonError\", JSON.stringify(jsonError))\r\n        removeBodyCss()\r\n        setactivacion(false)\r\n    }\r\n    function removeBodyCss() {\r\n        document.body.classList.add(\"no_padding\")\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n        {activacion ?\r\n            <SweetAlert\r\n            danger\r\n            title={datosError?.title}\r\n            confirmButtonText={t(\"Confirm\")}\r\n            cancelButtonText={t(\"Cancel\")}\r\n            onConfirm={() => {\r\n             cambiarStatus();\r\n            }}\r\n          >\r\n            {datosError?.subtitle}\r\n          </SweetAlert>\r\n        :null\r\n        \r\n    }\r\n\r\n    </React.Fragment>)\r\n};\r\nexport default ModalErrrorMessage;\r\n"]},"metadata":{},"sourceType":"module"}