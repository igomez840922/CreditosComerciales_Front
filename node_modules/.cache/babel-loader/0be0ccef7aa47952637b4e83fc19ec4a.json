{"ast":null,"code":"import TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\nimport { GetDashBoardModel } from \"../../models\";\nimport ApiServiceBpm from \"../ApiServiceBpm\";\nimport * as url from \"../../helpers/url_helper\";\nimport * as opt from \"../../helpers/options_helper\";\nimport qs from \"qs\";\nimport { result } from \"lodash\";\nexport default class Services extends ApiServiceBpm {\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  //creamos un nueva instancia de proceso en BPM...    \n  async createNewInstance() {\n    try {\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \n\n      console.log(\"createNewInstance\", number);\n\n      if (number !== null && number !== undefined && number > 0) {\n        var result1 = await this.getTasksByPrcess(number); //buscamos la tarea que crea el nuevo proceso\n\n        console.log(\"getTasksByPrcess\", result1);\n\n        if (result1 !== undefined) {\n          var result2 = await this.startedStatusTask(result1.taskId); //iniciamos la tarea\n\n          console.log(\"startedStatusTask\", result2);\n\n          if (result2 !== undefined) {\n            return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\n          }\n        }\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  } //retorna la bandeja de entrada\n\n\n  async getDashBoard(params) {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    return GetDashBoardModel.fromJson(result);\n  } //Cheque e Inicializa la tarea\n\n\n  async checkAndStartTask(locationData) {\n    try {\n      console.log('checkAndStartTask', locationData);\n      await this.startedStatusTask(locationData.taskId);\n      return true; //chequear si la tarea no ha sido iniciada\n\n      /*if(locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\"){        \r\n        //Iniciamos la nueva tarea en BPM   \r\n        await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      }\r\n      else{\r\n        return true;\r\n      }      */\n    } catch (err) {\n      console.error(err);\n    }\n\n    return false;\n  } //retorna las tareas de un proceso especifico\n\n\n  async getTasksByPrcess(instanceId) {\n    try {\n      var result = await this.get(url.URL_BPM_DASHBOARD);\n      result = GetDashBoardModel.fromJson(result);\n      return result.results.filter(e => e.instanceId === instanceId)[0];\n    } catch (err) {\n      console.error(\"getTasksByPrcess\", err);\n    }\n\n    return undefined;\n  } //crea e inicia una nueva instancia de Proceso y actividad\n\n\n  async startProcess() {\n    //Estructura de la data que se le debe pasar\n    var data = {\n      \"containerId\": url.WORD_BPM_CONTAINERID,\n      \"processId\": url.WORD_BPM_PROCESSID,\n      \"parametros\": {\n        \"values\": {\n          \"info\": \"\",\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\n          \"activityId\": \"0\",\n          \"transactionId\": \"\",\n          \"customerId\": \"\",\n          \"applicationNumber\": \"\",\n          \"procedureNumber\": \"\",\n          \"requestId\": \"\",\n          \"facilityId\": \"\",\n          \"dambientalparalelo\": \"\",\n          \"decision\": \"\",\n          \"id\": \"\",\n          \"monto\": 0,\n          \"status\": \"\",\n          \"decicionforma\": \"\",\n          \"cargo\": \"cargo\",\n          \"statuscredito\": \"\",\n          \"statusadm\": \"\",\n          \"statusformali\": \"\",\n          \"tiposolicitud\": \"\",\n          \"origensolicitud\": \"\",\n          \"dcreditoparalelo\": \"\",\n          \"regresar\": \"\",\n          \"rol\": \"\"\n        }\n      }\n    };\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\n\n    return result.body.processInstanceId;\n  }\n\n  async authentication(data) {\n    var result = await this.post(url.URL_BPM_LOGIN, data);\n    return result.status; //OK\n  }\n\n  async startedStatusTask(taskId) {\n    try {\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_STARTED\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api startedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async completedStatusTask(taskId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async abortProcess(instanceId) {\n    try {\n      console.log(\"abortProcess\", instanceId); //Estructura de la data que se le debe pasar\n\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId\n      };\n      console.log(\"data\", data);\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api abortProcess:\", err);\n    }\n\n    return undefined;\n  }\n\n  async updatevariables(instanceId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  } //Retorna la imagen relacionada a un proceso\n\n\n  async wacthprocess(processInstanceId) {\n    try {\n      var params = {\n        containerId: url.WORD_BPM_CONTAINERID,\n        processInstanceId: processInstanceId\n      };\n      var data = qs.stringify(params);\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\n      console.log(\"wacthprocess\", result);\n      return result.body.response;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/BpmServices/Services.js"],"names":["TaskListPostownersModel","GetDashBoardModel","ApiServiceBpm","url","opt","qs","result","Services","createNewInstance","number","startProcess","console","log","undefined","result1","getTasksByPrcess","result2","startedStatusTask","taskId","err","error","getDashBoard","params","get","URL_BPM_DASHBOARD","fromJson","checkAndStartTask","locationData","instanceId","results","filter","e","data","WORD_BPM_CONTAINERID","WORD_BPM_PROCESSID","PROCESS_BUSQUEDADESCARTE","toString","post","URL_BPM_STARTPROCESS","body","processInstanceId","authentication","URL_BPM_LOGIN","status","WORD_BPM_STARTED","put","URL_BPM_STATUSTASK","completedStatusTask","values","WORD_BPM_COMPLETED","abortProcess","del","URL_BPM_ABORTPROCESS","updatevariables","URL_BPM_UPDATEVAR","wacthprocess","containerId","stringify","URL_BPM_WATCHPROCESS","response"],"mappings":"AACA,OAAOA,uBAAP,MAAoC,0CAApC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,0BAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,8BAArB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,eAAe,MAAMC,QAAN,SAAuBL,aAAvB,CAAqC;AAClD;;AACA;;AACA;AAGA;AACuB,QAAjBM,iBAAiB,GAAE;AACvB,QAAG;AACD,UAAIC,MAAM,GAAG,MAAM,KAAKC,YAAL,EAAnB,CADC,CACuC;;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCH,MAAhC;;AACA,UAAGA,MAAM,KAAI,IAAV,IAAkBA,MAAM,KAAII,SAA5B,IAAyCJ,MAAM,GAAG,CAArD,EAAuD;AACrD,YAAIK,OAAO,GAAG,MAAM,KAAKC,gBAAL,CAAsBN,MAAtB,CAApB,CADqD,CACH;;AAClDE,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BE,OAA/B;;AACA,YAAGA,OAAO,KAAKD,SAAf,EAAyB;AACrB,cAAIG,OAAO,GAAG,MAAM,KAAKC,iBAAL,CAAuBH,OAAO,CAACI,MAA/B,CAApB,CADqB,CACsC;;AAC3DP,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCI,OAAhC;;AACA,cAAGA,OAAO,KAAGH,SAAb,EAAuB;AACrB,mBAAOC,OAAP,CADqB,CACL;AACjB;AACJ;AACF;AACF,KAdD,CAeA,OAAMK,GAAN,EAAU;AACRR,MAAAA,OAAO,CAACS,KAAR,CAAcD,GAAd;AACD;;AACD,WAAON,SAAP;AACD,GA3BiD,CA6BlD;;;AACkB,QAAZQ,YAAY,CAACC,MAAD,EAAS;AACzB,QAAIhB,MAAM,GAAG,MAAM,KAAKiB,GAAL,CAASpB,GAAG,CAACqB,iBAAb,CAAnB;AACA,WAAOvB,iBAAiB,CAACwB,QAAlB,CAA2BnB,MAA3B,CAAP;AACD,GAjCiD,CAmClD;;;AACuB,QAAjBoB,iBAAiB,CAACC,YAAD,EAAe;AACpC,QAAI;AACFhB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCe,YAAhC;AAEA,YAAM,KAAKV,iBAAL,CAAuBU,YAAY,CAACT,MAApC,CAAN;AACE,aAAO,IAAP,CAJA,CAKF;;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACK,KAdD,CAeA,OAAOC,GAAP,EAAY;AAACR,MAAAA,OAAO,CAACS,KAAR,CAAcD,GAAd;AAAmB;;AAChC,WAAO,KAAP;AACD,GAtDiD,CAwDlD;;;AACsB,QAAhBJ,gBAAgB,CAACa,UAAD,EAAa;AACjC,QAAG;AACD,UAAItB,MAAM,GAAG,MAAM,KAAKiB,GAAL,CAASpB,GAAG,CAACqB,iBAAb,CAAnB;AACAlB,MAAAA,MAAM,GAAGL,iBAAiB,CAACwB,QAAlB,CAA2BnB,MAA3B,CAAT;AACA,aAAOA,MAAM,CAACuB,OAAP,CAAeC,MAAf,CAAuBC,CAAD,IAAOA,CAAC,CAACH,UAAF,KAAiBA,UAA9C,EAA0D,CAA1D,CAAP;AACD,KAJD,CAKA,OAAMT,GAAN,EAAU;AAACR,MAAAA,OAAO,CAACS,KAAR,CAAc,kBAAd,EAAiCD,GAAjC;AAAsC;;AACjD,WAAON,SAAP;AACD,GAjEiD,CAmElD;;;AACkB,QAAZH,YAAY,GAAG;AACnB;AACA,QAAIsB,IAAI,GAAG;AACT,qBAAe7B,GAAG,CAAC8B,oBADV;AAET,mBAAa9B,GAAG,CAAC+B,kBAFR;AAGT,oBAAc;AACZ,kBAAU;AACR,kBAAO,EADC;AAER,uBAAY9B,GAAG,CAAC+B,wBAAJ,CAA6BC,QAA7B,EAFJ;AAGR,wBAAa,GAHL;AAIR,2BAAiB,EAJT;AAKR,wBAAc,EALN;AAMR,+BAAqB,EANb;AAOR,6BAAmB,EAPX;AAQR,uBAAY,EARJ;AASR,wBAAa,EATL;AAUR,gCAAqB,EAVb;AAWR,sBAAW,EAXH;AAYR,gBAAK,EAZG;AAaR,mBAAQ,CAbA;AAcR,oBAAS,EAdD;AAeR,2BAAgB,EAfR;AAgBR,mBAAQ,OAhBA;AAiBR,2BAAgB,EAjBR;AAkBR,uBAAY,EAlBJ;AAmBR,2BAAgB,EAnBR;AAoBR,2BAAgB,EApBR;AAqBR,6BAAkB,EArBV;AAsBR,8BAAmB,EAtBX;AAuBR,sBAAW,EAvBH;AAwBR,iBAAM;AAxBE;AADE;AAHL,KAAX;AAiCA,QAAI9B,MAAM,GAAG,MAAM,KAAK+B,IAAL,CAAUlC,GAAG,CAACmC,oBAAd,EAAoCN,IAApC,CAAnB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,WAAO1B,MAAM,CAACiC,IAAP,CAAYC,iBAAnB;AACD;;AAEmB,QAAdC,cAAc,CAACT,IAAD,EAAO;AACzB,QAAI1B,MAAM,GAAG,MAAM,KAAK+B,IAAL,CAAUlC,GAAG,CAACuC,aAAd,EAA6BV,IAA7B,CAAnB;AACA,WAAO1B,MAAM,CAACqC,MAAd,CAFyB,CAEH;AACvB;;AAEsB,QAAjB1B,iBAAiB,CAACC,MAAD,EAAS;AAC9B,QAAI;AACF,UAAIc,IAAI,GAAG;AACT,uBAAe7B,GAAG,CAAC8B,oBADV;AAET,kBAAUf,MAFD;AAGT,sBAAcf,GAAG,CAACyC;AAHT,OAAX;AAMA,UAAItC,MAAM,GAAG,MAAM,KAAKuC,GAAL,CAAS1C,GAAG,CAAC2C,kBAAb,EAAiCd,IAAjC,CAAnB;;AAEA,UAAI1B,MAAM,CAACqC,MAAP,KAAkB,IAAtB,EAA4B;AAC1B,eAAOrC,MAAP;AACD;AAEF,KAbD,CAcA,OAAOa,GAAP,EAAY;AACVR,MAAAA,OAAO,CAACS,KAAR,CAAc,wBAAd,EAAwCD,GAAxC;AACD;;AAED,WAAON,SAAP;AACD;;AAEwB,QAAnBkC,mBAAmB,CAAC7B,MAAD,EAAS8B,MAAT,EAAiB;AACxC,QAAI;AACF;AACN;AACA;AACM,UAAIhB,IAAI,GAAG;AACT,uBAAe7B,GAAG,CAAC8B,oBADV;AAET,kBAAUf,MAFD;AAGT,sBAAcf,GAAG,CAAC8C,kBAHT;AAIT,sBAAc;AACZ,oBAAUD;AADE;AAJL,OAAX;AAQA,UAAI1C,MAAM,GAAG,MAAM,KAAKuC,GAAL,CAAS1C,GAAG,CAAC2C,kBAAb,EAAiCd,IAAjC,CAAnB;;AACA,UAAI1B,MAAM,CAACqC,MAAP,KAAkB,IAAtB,EAA4B;AAC1B,eAAOrC,MAAP;AACD;AAEF,KAjBD,CAkBA,OAAOa,GAAP,EAAY;AACVR,MAAAA,OAAO,CAACS,KAAR,CAAc,0BAAd,EAA0CD,GAA1C;AACD;;AAED,WAAON,SAAP;AACD;;AAEiB,QAAZqC,YAAY,CAACtB,UAAD,EAAa;AAE7B,QAAG;AACDjB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BgB,UAA3B,EADC,CAED;;AACF,UAAII,IAAI,GAAE;AACR,uBAAc7B,GAAG,CAAC8B,oBADV;AAER,6BAAqBL;AAFb,OAAV;AAIEjB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBoB,IAAnB;AACF,UAAI1B,MAAM,GAAG,MAAM,KAAK6C,GAAL,CAAShD,GAAG,CAACiD,oBAAb,EAAkCpB,IAAlC,CAAnB;;AAEE,UAAG1B,MAAM,CAACqC,MAAP,KAAkB,IAArB,EAA0B;AACxB,eAAOrC,MAAP;AACD;AAEF,KAdD,CAeA,OAAMa,GAAN,EAAU;AACRR,MAAAA,OAAO,CAACS,KAAR,CAAc,mBAAd,EAAkCD,GAAlC;AACD;;AAED,WAAON,SAAP;AACD;;AAEoB,QAAfwC,eAAe,CAACzB,UAAD,EAAaoB,MAAb,EAAqB;AACxC,QAAI;AACF;AACN;AACA;AACM,UAAIhB,IAAI,GAAG;AACT,uBAAe7B,GAAG,CAAC8B,oBADV;AAET,6BAAqBL,UAFZ;AAGT,sBAAc;AACZ,oBAAUoB;AADE;AAHL,OAAX;AAOA,UAAI1C,MAAM,GAAG,MAAM,KAAK+B,IAAL,CAAUlC,GAAG,CAACmD,iBAAd,EAAiCtB,IAAjC,CAAnB;;AACA,UAAI1B,MAAM,CAACqC,MAAP,KAAkB,IAAtB,EAA4B;AAC1B,eAAOrC,MAAP;AACD;AAEF,KAhBD,CAiBA,OAAOa,GAAP,EAAY;AACVR,MAAAA,OAAO,CAACS,KAAR,CAAc,0BAAd,EAA0CD,GAA1C;AACD;;AAED,WAAON,SAAP;AACD,GA/NiD,CAiOlD;;;AACkB,QAAZ0C,YAAY,CAACf,iBAAD,EAAoB;AACpC,QAAG;AAED,UAAIlB,MAAM,GAAG;AAAEkC,QAAAA,WAAW,EAAErD,GAAG,CAAC8B,oBAAnB;AAAyCO,QAAAA,iBAAiB,EAAEA;AAA5D,OAAb;AACA,UAAIR,IAAI,GAAG3B,EAAE,CAACoD,SAAH,CAAanC,MAAb,CAAX;AAEA,UAAIhB,MAAM,GAAG,MAAM,KAAKiB,GAAL,CAASpB,GAAG,CAACuD,oBAAJ,GAA2B,GAA3B,GAAiC1B,IAA1C,CAAnB;AAEArB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BN,MAA3B;AAEA,aAAOA,MAAM,CAACiC,IAAP,CAAYoB,QAAnB;AACD,KAVD,CAWA,OAAMxC,GAAN,EAAU;AAACR,MAAAA,OAAO,CAACS,KAAR,CAAcD,GAAd;AAAoB;;AAC/B,WAAON,SAAP;AACD;;AAhPiD","sourcesContent":["\r\nimport TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\r\nimport { GetDashBoardModel } from \"../../models\";\r\nimport ApiServiceBpm from \"../ApiServiceBpm\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport qs from \"qs\";\r\nimport { result } from \"lodash\";\r\n\r\nexport default class Services extends ApiServiceBpm {\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  \r\n  \r\n  //creamos un nueva instancia de proceso en BPM...    \r\n  async createNewInstance(){  \r\n    try{\r\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \r\n      console.log(\"createNewInstance\",number);\r\n      if(number!== null && number !==undefined && number > 0){\r\n        var result1 = await this.getTasksByPrcess(number);//buscamos la tarea que crea el nuevo proceso\r\n        console.log(\"getTasksByPrcess\",result1);\r\n        if(result1 !== undefined){\r\n            var result2 = await this.startedStatusTask(result1.taskId);//iniciamos la tarea\r\n            console.log(\"startedStatusTask\",result2);\r\n            if(result2!==undefined){           \r\n              return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\r\n            }\r\n        }\r\n      }\r\n    }\r\n    catch(err){\r\n      console.error(err);\r\n    }\r\n    return undefined;\r\n  }\r\n  \r\n  //retorna la bandeja de entrada\r\n  async getDashBoard(params) {\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n    return GetDashBoardModel.fromJson(result);\r\n  }\r\n\r\n  //Cheque e Inicializa la tarea\r\n  async checkAndStartTask(locationData) {\r\n    try {\r\n      console.log('checkAndStartTask',locationData);\r\n      \r\n      await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      //chequear si la tarea no ha sido iniciada\r\n      /*if(locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\"){        \r\n        //Iniciamos la nueva tarea en BPM   \r\n        await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      }\r\n      else{\r\n        return true;\r\n      }      */\r\n    }\r\n    catch (err) {console.error(err)}\r\n    return false;\r\n  }\r\n\r\n  //retorna las tareas de un proceso especifico\r\n  async getTasksByPrcess(instanceId) {\r\n    try{\r\n      var result = await this.get(url.URL_BPM_DASHBOARD);\r\n      result = GetDashBoardModel.fromJson(result);\r\n      return result.results.filter((e) => e.instanceId === instanceId)[0];  \r\n    }\r\n    catch(err){console.error(\"getTasksByPrcess\",err)}\r\n    return undefined;\r\n  }\r\n\r\n  //crea e inicia una nueva instancia de Proceso y actividad\r\n  async startProcess() {\r\n    //Estructura de la data que se le debe pasar\r\n    var data = {\r\n      \"containerId\": url.WORD_BPM_CONTAINERID,\r\n      \"processId\": url.WORD_BPM_PROCESSID,\r\n      \"parametros\": {\r\n        \"values\": {\r\n          \"info\":\"\", \r\n          \"processId\":opt.PROCESS_BUSQUEDADESCARTE.toString(),\r\n          \"activityId\":\"0\",                    \r\n          \"transactionId\": \"\",\r\n          \"customerId\": \"\",\r\n          \"applicationNumber\": \"\",\r\n          \"procedureNumber\": \"\",\r\n          \"requestId\":\"\",\r\n          \"facilityId\":\"\",\r\n          \"dambientalparalelo\":\"\",\r\n          \"decision\":\"\",\r\n          \"id\":\"\",\r\n          \"monto\":0,\r\n          \"status\":\"\",\r\n          \"decicionforma\":\"\",\r\n          \"cargo\":\"cargo\",\r\n          \"statuscredito\":\"\",\r\n          \"statusadm\":\"\",\r\n          \"statusformali\":\"\",\r\n          \"tiposolicitud\":\"\",\r\n          \"origensolicitud\":\"\",\r\n          \"dcreditoparalelo\":\"\",\r\n          \"regresar\":\"\",\r\n          \"rol\":\"\"\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\r\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\r\n\r\n    return result.body.processInstanceId;\r\n  }\r\n\r\n  async authentication(data) {\r\n    var result = await this.post(url.URL_BPM_LOGIN, data);\r\n    return result.status; //OK\r\n  }\r\n\r\n  async startedStatusTask(taskId) {\r\n    try {\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_STARTED,\r\n      }\r\n\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api startedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async completedStatusTask(taskId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async abortProcess(instanceId) {\r\n\r\n    try{\r\n      console.log(\"abortProcess\",instanceId);\r\n      //Estructura de la data que se le debe pasar\r\n    var data ={\r\n      \"containerId\":url.WORD_BPM_CONTAINERID,\r\n      \"processInstanceId\": instanceId,\r\n      } \r\n      console.log(\"data\",data);\r\n    var result = await this.del(url.URL_BPM_ABORTPROCESS,data);\r\n    \r\n      if(result.status === \"OK\"){\r\n        return result;\r\n      }\r\n\r\n    } \r\n    catch(err){\r\n      console.error(\"api abortProcess:\",err)\r\n    }   \r\n\r\n    return undefined;\r\n  }\r\n\r\n  async updatevariables(instanceId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  //Retorna la imagen relacionada a un proceso\r\n  async wacthprocess(processInstanceId) {\r\n    try{\r\n\r\n      var params = { containerId: url.WORD_BPM_CONTAINERID, processInstanceId: processInstanceId}\r\n      var data = qs.stringify(params);\r\n          \r\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\r\n\r\n      console.log(\"wacthprocess\",result);\r\n\r\n      return result.body.response;\r\n    }\r\n    catch(err){console.error(err);}\r\n    return undefined;\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}