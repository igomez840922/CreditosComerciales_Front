{"ast":null,"code":"import { BackendServices, CoreServices } from \"../services\";\nconst backendServices = new BackendServices();\nconst coreServices = new CoreServices();\nexport default class AutoSaveData {\n  //salvamos deudas de un tramite\n  async saveInitialData(transactionId) {\n    this.saveDebts(transactionId);\n    this.saveAccountMovements(transactionId);\n    this.saveCorporateExhibition(transactionId);\n    return new Promise((resolve, reject) => {\n      resolve(this.saveFacilities(transactionId));\n    });\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibition(transactionId) {\n    try {\n      var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\n        return;\n      }\n\n      dataResult = await coreServices.getCorporateExhibition(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        let datoSent = {\n          \"transactId\": Number(transactionId),\n          //\"accountNumber\": data.name,\n          //\"t24ClientId\": data.customerNumberT24,\n          \"description\": dataResult[i].name,\n          \"approved\": dataResult[i].approved,\n          \"currentBalance\": dataResult[i].balance,\n          \"proposed\": dataResult[i].proposal,\n          \"ltv\": 0,\n          \"difference\": dataResult[i].variation\n        };\n        await backendServices.saveExposicionCorporativaBD(datoSent);\n      }\n    } catch (err) {}\n  } //salvamos facilidades por tramite\n\n\n  saveFacilities(transactionId) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        var request = await backendServices.consultGeneralDataPropCred(transactionId);\n        console.log(request);\n        var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\n\n        if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\n          return;\n        }\n\n        dataResult = await coreServices.getFacilitiesByTransaction(transactionId);\n\n        for (let i = 0; i < dataResult.length; i++) {\n          var _dataResult$i$facilit, _request$0$requestId;\n\n          let datoSent = {\n            \"facilityNumber\": dataResult[i].AcctId,\n            \"cr\": dataResult[i].AcctId,\n            \"amount\": dataResult[i].approvedAmount,\n            \"debtor\": dataResult[i].debtorName,\n            \"clientTypeId\": dataResult[i].debtorId,\n            \"balance\": dataResult[i].actualBalance,\n            \"purpose\": \"\",\n            \"sublimits\": \"\",\n            \"proposalRate\": 0,\n            \"noSubsidyRate\": 0,\n            \"effectiveRate\": 0,\n            \"feci\": false,\n            \"termDays\": 0,\n            \"termDescription\": \"\",\n            \"ltv\": 0,\n            \"finantialConditions\": \" \",\n            \"environmentRiskCategory\": 0,\n            \"covenant\": \" \",\n            \"environmentRiskOpinion\": \" \",\n            \"finantialCovenant\": \" \",\n            \"legalDocumentation\": \"  \",\n            \"otherConditions\": \" \",\n            \"creditRiskOpinion\": \" \",\n            \"provision\": \" \",\n            \"proposalTypeId\": \"\",\n            \"proposalTypeName\": \"\",\n            \"facilityTypeId\": (_dataResult$i$facilit = dataResult[i].facilityType) !== null && _dataResult$i$facilit !== void 0 ? _dataResult$i$facilit : \"\",\n            \"termType\": \"\",\n            \"origin\": \"CORE\",\n            \"applyEscrow\": false,\n            \"facilityId\": 0,\n            \"requestId\": (_request$0$requestId = request[0].requestId) !== null && _request$0$requestId !== void 0 ? _request$0$requestId : \"\",\n            \"startingAmount\": 0,\n            \"term\": \"\"\n          };\n          await backendServices.newFacilityPropCred(datoSent);\n        }\n\n        resolve(true);\n      } catch (err) {}\n    });\n  } //salvamos deudas a Corto y largo Plazo\n\n\n  async saveDebts(transactionId) {\n    try {\n      var checkCP = false;\n      var checkLP = false;\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {} else {\n        checkCP = true;\n      }\n\n      dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) {} else {\n        checkLP = true;\n      }\n\n      if (!checkCP && !checkLP) {\n        return;\n      }\n\n      dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\n\n      if (checkCP) {\n        for (var short of dataResult.shortTermresult) {\n          var dat = {\n            \"facilityType\": short.facilityType,\n            \"amount\": Number(short.approvedAmount.toFixed(2)),\n            \"date\": short.startDate,\n            \"expirationDate\": short.endDate,\n            \"debitBalance1\": Number(short.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"paymentHistory\": paymentHistory,\n            \"rate\": 0,\n            \"fee\": 0,\n            \"bail\": 0,\n            \"fundDestiny\": \"\",\n            status: true,\n            \"bank\": short.bank,\n            \"transactId\": Number(transactionId)\n          };\n          await backendServices.newBankingRelationsDebtsCP(dat);\n        }\n      }\n\n      if (checkLP) {\n        for (var long of dataResult.longTermresult) {\n          var dat1 = {\n            \"transactId\": Number(transactionId),\n            \"bank\": long.bank,\n            \"facilityType\": long.facilityType,\n            \"amount\": Number(long.approvedAmount.toFixed(2)),\n            \"date\": long.startDate,\n            \"expirationDate\": long.endDate,\n            \"debitBalance1\": Number(long.balance.toFixed(2)),\n            \"debitBalance2\": 0,\n            \"debitBalance3\": 0,\n            \"rate\": 0,\n            \"fee\": 0,\n            \"bail\": \" \",\n            \"fundDestiny\": \" \",\n            status: true\n          };\n          await backendServices.newBankingRelationsDebtsLP(dat1);\n        }\n      }\n    } catch (err) {}\n  } //salvamos facilidades por tramite\n\n\n  async saveAccountMovements(transactionId) {\n    try {\n      var dataResult = await backendServices.consultMovementsBank(transactionId);\n      console.log(\"getAccountMovements\", dataResult);\n\n      if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\n        return;\n      }\n\n      dataResult = await coreServices.getAccountMovementsByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        //aqui cargamos por cuentas\n        let cuenta = dataResult[i].AcctId;\n\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\n\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\n            let jsonSet = {\n              \"trasactId\": Number(transactionId),\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\n              \"observations\": \"\",\n              \"accountNumber\": cuenta,\n              \"t24\": true\n            };\n            await backendServices.newMovementsAccountsIGR(jsonSet);\n          }\n        }\n      }\n    } catch (err) {}\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/helpers/AutoSaveData.js"],"names":["BackendServices","CoreServices","backendServices","coreServices","AutoSaveData","saveInitialData","transactionId","saveDebts","saveAccountMovements","saveCorporateExhibition","Promise","resolve","reject","saveFacilities","dataResult","getExposicionCorporativaBD","undefined","length","getCorporateExhibition","i","datoSent","Number","name","approved","balance","proposal","variation","saveExposicionCorporativaBD","err","request","consultGeneralDataPropCred","console","log","consultarFacilidadesT24","requestId","getFacilitiesByTransaction","AcctId","approvedAmount","debtorName","debtorId","actualBalance","facilityType","newFacilityPropCred","checkCP","checkLP","consultBankingRelationsDebtsCP","getBankingRelationCPDTOList","consultBankRelationsDebtsLP","bankingRelationLPDTOList","getAllTermDebtsByTransaction","short","shortTermresult","dat","toFixed","startDate","endDate","paymentHistory","status","bank","newBankingRelationsDebtsCP","long","longTermresult","dat1","newBankingRelationsDebtsLP","consultMovementsBank","bankBanesco","bankOthersBank","getAccountMovementsByTransaction","cuenta","j","dataByYear","k","dataresult","jsonSet","year","month","deposits","amount","newMovementsAccountsIGR"],"mappings":"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","sourcesContent":["\r\nimport { BackendServices, CoreServices } from \"../services\";\r\n\r\nconst backendServices = new BackendServices();\r\nconst coreServices = new CoreServices();\r\n\r\nexport default class AutoSaveData {\r\n\r\n\r\n  //salvamos deudas de un tramite\r\n  async saveInitialData(transactionId) {\r\n    this.saveDebts(transactionId);\r\n    this.saveAccountMovements(transactionId);\r\n    this.saveCorporateExhibition(transactionId);\r\n    return new Promise((resolve, reject) => {\r\n      resolve(this.saveFacilities(transactionId))\r\n    })\r\n  }\r\n\r\n  //salvamos exposicion por tramite\r\n  async saveCorporateExhibition(transactionId) {\r\n    try {\r\n\r\n      var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getCorporateExhibition(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        let datoSent = {\r\n          \"transactId\": Number(transactionId),\r\n          //\"accountNumber\": data.name,\r\n          //\"t24ClientId\": data.customerNumberT24,\r\n          \"description\": dataResult[i].name,\r\n          \"approved\": dataResult[i].approved,\r\n          \"currentBalance\": dataResult[i].balance,\r\n          \"proposed\": dataResult[i].proposal,\r\n          \"ltv\": 0,\r\n          \"difference\": dataResult[i].variation,\r\n        }\r\n        await backendServices.saveExposicionCorporativaBD(datoSent)\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  saveFacilities(transactionId) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n\r\n        var request = await backendServices.consultGeneralDataPropCred(transactionId);\r\n        console.log(request);\r\n        var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\r\n        if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n          return;\r\n        }\r\n\r\n        dataResult = await coreServices.getFacilitiesByTransaction(transactionId)\r\n        for (let i = 0; i < dataResult.length; i++) {\r\n          let datoSent = {\r\n            \"facilityNumber\": dataResult[i].AcctId,\r\n            \"cr\": dataResult[i].AcctId,\r\n            \"amount\": dataResult[i].approvedAmount,\r\n            \"debtor\": dataResult[i].debtorName,\r\n            \"clientTypeId\": dataResult[i].debtorId,\r\n            \"balance\": dataResult[i].actualBalance,\r\n            \"purpose\": \"\",\r\n            \"sublimits\": \"\",\r\n            \"proposalRate\": 0,\r\n            \"noSubsidyRate\": 0,\r\n            \"effectiveRate\": 0,\r\n            \"feci\": false,\r\n            \"termDays\": 0,\r\n            \"termDescription\": \"\",\r\n            \"ltv\": 0,\r\n            \"finantialConditions\": \" \",\r\n            \"environmentRiskCategory\": 0,\r\n            \"covenant\": \" \",\r\n            \"environmentRiskOpinion\": \" \",\r\n            \"finantialCovenant\": \" \",\r\n            \"legalDocumentation\": \"  \",\r\n            \"otherConditions\": \" \",\r\n            \"creditRiskOpinion\": \" \",\r\n            \"provision\": \" \",\r\n            \"proposalTypeId\": \"\",\r\n            \"proposalTypeName\": \"\",\r\n            \"facilityTypeId\": dataResult[i].facilityType ?? \"\",\r\n            \"termType\": \"\",\r\n            \"origin\": \"CORE\",\r\n            \"applyEscrow\": false,\r\n            \"facilityId\": 0,\r\n            \"requestId\": request[0].requestId ?? \"\",\r\n            \"startingAmount\": 0,\r\n            \"term\": \"\"\r\n          }\r\n          await backendServices.newFacilityPropCred(datoSent)\r\n        }\r\n        resolve(true);\r\n      }\r\n      catch (err) { }\r\n    })\r\n  }\r\n\r\n  //salvamos deudas a Corto y largo Plazo\r\n  async saveDebts(transactionId) {\r\n    try {\r\n\r\n      var checkCP = false;\r\n      var checkLP = false;\r\n\r\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) { }\r\n      else {\r\n        checkCP = true;\r\n      }\r\n      dataResult = await backendServices.consultBankRelationsDebtsLP(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.bankingRelationLPDTOList.length > 0) { }\r\n      else {\r\n        checkLP = true;\r\n      }\r\n\r\n      if (!checkCP && !checkLP) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getAllTermDebtsByTransaction(transactionId);\r\n\r\n      if (checkCP) {\r\n        for (var short of dataResult.shortTermresult) {\r\n          var dat = {\r\n            \"facilityType\": short.facilityType,\r\n            \"amount\": Number(short.approvedAmount.toFixed(2)),\r\n            \"date\": short.startDate,\r\n            \"expirationDate\": short.endDate,\r\n            \"debitBalance1\": Number(short.balance.toFixed(2)),\r\n            \"debitBalance2\": 0,\r\n            \"debitBalance3\": 0,\r\n            \"paymentHistory\": paymentHistory,\r\n            \"rate\": 0,\r\n            \"fee\": 0,\r\n            \"bail\": 0,\r\n            \"fundDestiny\": \"\",\r\n            status: true,\r\n            \"bank\": short.bank,\r\n            \"transactId\": Number(transactionId)\r\n          }\r\n          await backendServices.newBankingRelationsDebtsCP(dat)\r\n        }\r\n      }\r\n\r\n      if (checkLP) {\r\n        for (var long of dataResult.longTermresult) {\r\n          var dat1 = {\r\n            \"transactId\": Number(transactionId),\r\n            \"bank\": long.bank,\r\n            \"facilityType\": long.facilityType,\r\n            \"amount\": Number(long.approvedAmount.toFixed(2)),\r\n            \"date\": long.startDate,\r\n            \"expirationDate\": long.endDate,\r\n            \"debitBalance1\": Number(long.balance.toFixed(2)),\r\n            \"debitBalance2\": 0,\r\n            \"debitBalance3\": 0,\r\n            \"rate\": 0,\r\n            \"fee\": 0,\r\n            \"bail\": \" \",\r\n            \"fundDestiny\": \" \",\r\n            status: true,\r\n          }\r\n          await backendServices.newBankingRelationsDebtsLP(dat1)\r\n        }\r\n      }\r\n\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  async saveAccountMovements(transactionId) {\r\n    try {\r\n\r\n      var dataResult = await backendServices.consultMovementsBank(transactionId);\r\n      console.log(\"getAccountMovements\", dataResult);\r\n\r\n      if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\r\n        return;\r\n      }\r\n\r\n      dataResult = await coreServices.getAccountMovementsByTransaction(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        //aqui cargamos por cuentas\r\n        let cuenta = dataResult[i].AcctId;\r\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\r\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\r\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\r\n            let jsonSet = {\r\n              \"trasactId\": Number(transactionId),\r\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\r\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\r\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\r\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\r\n              \"observations\": \"\",\r\n              \"accountNumber\": cuenta,\r\n              \"t24\": true\r\n            }\r\n            await backendServices.newMovementsAccountsIGR(jsonSet);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}