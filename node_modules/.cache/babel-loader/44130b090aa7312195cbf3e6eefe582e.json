{"ast":null,"code":"import { PropuestaCredito } from \"../../models\";\nimport ApiService from \"../ApiService\";\nimport BackendServices from \"../BackendServices/Services\";\nimport BpmServices from \"../BpmServices/Services\";\nexport default class ServicioPropuestaCredito extends ApiService {\n  constructor() {\n    super();\n    this.backend = new BackendServices();\n    this.bpm = new BpmServices();\n  }\n\n  guardarDatosGenerales(instanceId, requestId, values) {\n    console.log('guardarDatosGenerales()', values);\n\n    if (!requestId) {\n      console.log('nuevoDatosGeneralesPropCred');\n      return this.backend.nuevoDatosGeneralesPropCred(values).then(result => {\n        if (result.status && result.status.statusCode === \"200\") {\n          // Actualizar Variable en BPM de requestId\n          this.bpm.updatevariables(instanceId, {\n            requestId: result.requestId\n          });\n        }\n\n        return result;\n      });\n    } else {\n      console.log('actualizarDatosGeneralesPropCred', requestId);\n      values.requestId = requestId;\n      return this.backend.actualizarDatosGeneralesPropCred(values);\n    }\n  }\n\n  actualizarDatosGenerales(transactId, values) {\n    console.log('actualizarDatosGenerales()', transactId);\n    return this.backend.actualizarDatosGeneralesPropCred(values);\n  }\n\n  async consultarDatosGenerales(transactId, requestId) {\n    console.log('consultarDatosGenerales()', transactId);\n    const data = await this.backend.consultarDatosGeneralesPropCred(transactId);\n\n    if (requestId) {\n      return data.find(record => record.requestId === requestId);\n    } else {\n      // return last array element\n      return data[data.length - 1];\n    }\n  }\n\n  consultarDocumentosPropuestaCredito(criteria) {\n    return this.sendCoreRequest('propuestacredito/documentos', 'POST', criteria).then(data => {\n      // parse results\n      return PropuestaCredito.fromJsonArray(data);\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/PropuestaCredito/PropuestaCredito.js"],"names":["PropuestaCredito","ApiService","BackendServices","BpmServices","ServicioPropuestaCredito","constructor","backend","bpm","guardarDatosGenerales","instanceId","requestId","values","console","log","nuevoDatosGeneralesPropCred","then","result","status","statusCode","updatevariables","actualizarDatosGeneralesPropCred","actualizarDatosGenerales","transactId","consultarDatosGenerales","data","consultarDatosGeneralesPropCred","find","record","length","consultarDocumentosPropuestaCredito","criteria","sendCoreRequest","fromJsonArray"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,cAAjC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAGA,eAAe,MAAMC,wBAAN,SAAuCH,UAAvC,CAAkD;AAE/DI,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,OAAL,GAAe,IAAIJ,eAAJ,EAAf;AACA,SAAKK,GAAL,GAAW,IAAIJ,WAAJ,EAAX;AACD;;AAEDK,EAAAA,qBAAqB,CAACC,UAAD,EAAaC,SAAb,EAAwBC,MAAxB,EAAgC;AACnDC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,MAAvC;;AACA,QAAI,CAACD,SAAL,EAAiB;AACfE,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,aAAO,KAAKP,OAAL,CAAaQ,2BAAb,CAAyCH,MAAzC,EACJI,IADI,CACEC,MAAD,IAAY;AAChB,YAAIA,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcC,UAAd,KAA6B,KAAlD,EAAyD;AACvD;AACA,eAAKX,GAAL,CAASY,eAAT,CAAyBV,UAAzB,EAAqC;AACnCC,YAAAA,SAAS,EAAEM,MAAM,CAACN;AADiB,WAArC;AAGD;;AACD,eAAOM,MAAP;AACD,OATI,CAAP;AAUD,KAZD,MAaK;AACHJ,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDH,SAAhD;AACAC,MAAAA,MAAM,CAACD,SAAP,GAAmBA,SAAnB;AACA,aAAO,KAAKJ,OAAL,CAAac,gCAAb,CAA8CT,MAA9C,CAAP;AACD;AACF;;AAEDU,EAAAA,wBAAwB,CAACC,UAAD,EAAaX,MAAb,EAAqB;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CS,UAA1C;AACA,WAAO,KAAKhB,OAAL,CAAac,gCAAb,CAA8CT,MAA9C,CAAP;AACD;;AAE4B,QAAvBY,uBAAuB,CAACD,UAAD,EAAaZ,SAAb,EAAwB;AACnDE,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCS,UAAzC;AACA,UAAME,IAAI,GAAG,MAAM,KAAKlB,OAAL,CAAamB,+BAAb,CAA6CH,UAA7C,CAAnB;;AACA,QAAIZ,SAAJ,EAAgB;AACd,aAAOc,IAAI,CAACE,IAAL,CAAUC,MAAM,IAAIA,MAAM,CAACjB,SAAP,KAAqBA,SAAzC,CAAP;AACD,KAFD,MAGK;AACH;AACA,aAAOc,IAAI,CAACA,IAAI,CAACI,MAAL,GAAY,CAAb,CAAX;AACD;AACF;;AAGDC,EAAAA,mCAAmC,CAACC,QAAD,EAAW;AAC5C,WAAO,KAAKC,eAAL,CAAqB,6BAArB,EAAoD,MAApD,EAA4DD,QAA5D,EACJf,IADI,CACES,IAAD,IAAU;AACd;AACA,aAAOxB,gBAAgB,CAACgC,aAAjB,CAA+BR,IAA/B,CAAP;AACD,KAJI,CAAP;AAKD;;AAtD8D","sourcesContent":["import { PropuestaCredito } from \"../../models\";\r\nimport ApiService from \"../ApiService\";\r\nimport BackendServices from \"../BackendServices/Services\";\r\nimport BpmServices from \"../BpmServices/Services\";\r\n\r\n\r\nexport default class ServicioPropuestaCredito extends ApiService {\r\n\r\n  constructor() {\r\n    super();\r\n    this.backend = new BackendServices();\r\n    this.bpm = new BpmServices();\r\n  }\r\n\r\n  guardarDatosGenerales(instanceId, requestId, values) {\r\n    console.log('guardarDatosGenerales()', values);\r\n    if( !requestId ) {\r\n      console.log('nuevoDatosGeneralesPropCred');\r\n      return this.backend.nuevoDatosGeneralesPropCred(values)\r\n        .then((result) => {\r\n          if (result.status && result.status.statusCode === \"200\") {\r\n            // Actualizar Variable en BPM de requestId\r\n            this.bpm.updatevariables(instanceId, {\r\n              requestId: result.requestId\r\n            });\r\n          }\r\n          return result;\r\n        });\r\n    }\r\n    else {\r\n      console.log('actualizarDatosGeneralesPropCred', requestId);\r\n      values.requestId = requestId;\r\n      return this.backend.actualizarDatosGeneralesPropCred(values);\r\n    }\r\n  }\r\n\r\n  actualizarDatosGenerales(transactId, values) {\r\n    console.log('actualizarDatosGenerales()', transactId);\r\n    return this.backend.actualizarDatosGeneralesPropCred(values);\r\n  }\r\n\r\n  async consultarDatosGenerales(transactId, requestId) {\r\n    console.log('consultarDatosGenerales()', transactId);\r\n    const data = await this.backend.consultarDatosGeneralesPropCred(transactId);\r\n    if( requestId ) {\r\n      return data.find(record => record.requestId === requestId);\r\n    }\r\n    else {\r\n      // return last array element\r\n      return data[data.length-1];\r\n    }\r\n  }\r\n\r\n\r\n  consultarDocumentosPropuestaCredito(criteria) {\r\n    return this.sendCoreRequest('propuestacredito/documentos', 'POST', criteria)\r\n      .then((data) => {\r\n        // parse results\r\n        return PropuestaCredito.fromJsonArray(data);\r\n      });\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}