{"ast":null,"code":"import { WatchListModel, DocumentModel, ClientInfoModel, PartiesStaffModel } from \"../../models/Core\";\nimport ApiServiceCore from \"../ApiServiceCore\";\nimport * as url from \"../../helpers/url_helper\";\nimport qs from \"qs\";\nimport { ACT_FACILIDADACTIVOSFIJOS } from \"../../helpers/options_helper\";\nimport * as OPTs from \"../../helpers/options_helper\";\nimport { ResponseModel } from '../../models/Common/ResponseModel';\nimport moment from \"moment\";\nimport { part } from \"core-js/core/function\";\nimport { GetMontNumberByName, GetMontNameByNumber } from '../../helpers/commons';\nimport { ResourceStore } from \"i18next\";\nimport Currency from \"../../helpers/currency\";\nexport default class Services extends ApiServiceCore {\n  //analysis/customers -> retorna la info de lista de vigilancia\n  //ConsultarListaCriterioCORE    \n  async postWhatchList(params) {\n    try {\n      /*\r\n      {\r\n      \"pCustomerId\": \"06--00711-002304\",\r\n      \"pTypeId\": \"CEDULA_IDENTIDAD\",\r\n      \"pModelId\": \"LISTA_VIGILANCIA\",\r\n      \"pCustomerListParams\": {\r\n      \"KeyValueParam\": [\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"NOMBRE\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Librada\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_NOMBRE\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Emilio\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"PRIMER_APELLIDO\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Rivera\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_APELLIDO\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"Gaviria\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"TIPO_ID\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"CEDULA_IDENTIDAD\"\r\n        },\r\n        {\r\n            \"_x003C_Key_x003E_k__BackingField\": \"CEDULA\",\r\n            \"_x003C_Value_x003E_k__BackingField\": \"06--00711-002304\"\r\n        }\r\n      ]\r\n      },\r\n      \"pUser\": \"wallytech_ws_user\",\r\n      \"pWaitingInterval\": 180000000,\r\n      \"pPriority\": 1\r\n      }\r\n      */\n      var result = await this.post(url.URL_CORE_WATCHLIST, params);\n      return {\n        status: 200,\n        result: WatchListModel.fromJson(result).results\n      };\n    } catch (err) {\n      return {\n        status: err.response.status,\n        error: err.response.data\n      }; //errorMessage, //errorCode\n    }\n  } //documents -> salva documento en gestor documental ONBASE\n  //GuardarDocumentoECM\n\n\n  async postDocument(data) {\n    var config = {\n      headers: {\n        //\"Accept\":\"*/*\",\n        //\"Accept-Encoding\":\"gzip, deflate, sdch, br\",\n        //\"Accept-Language\":\"fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4\",\n        //\"Access-Control-Request-Headers\":\"accept, content-type\",\n        //\"Content-Type\":\"text/plain\",\n        //\"Content-Length\":JSON.stringify(data).length.toString(),\n        //\"Host\":\"https://qa.api.ob.banesco.com.pa/\",\n        //Connection: \"keep-alive\",\n        //\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n        \"userId\": \"mq3898\",\n        //Usuario\n        \"clientDt\": \"clientDt\",\n        //\"Fecha de ejecuciÃ³n del cliente.\"\n        \"appName\": \"ReactJs\",\n        //\"Aplicacion que consume el servicio\"\n        \"requestId\": \"202112202\",\n        //\"Identificador de la solicitud.\"\n        \"channelId\": \"channelID\" //\"Canal consumidor\",                \n\n      }\n    };\n    var result = await this.post(url.URL_CORE_DOCUMENTS, data, config);\n    console.log(\"Result Document: \", result);\n    /*\r\n    var result = {\r\n        \"Status\": {\r\n            \"StatusCode\": \"M0000\",\r\n            \"StatusDesc\": \"OK\"\r\n        },\r\n        \"Token\": \"e793-ddb2-ab0e-6626-5d3e-5f19-b79b-1f5d\",\r\n        \"Result\": {\r\n            \"DocName\": \"TDC - Contrato de TDC  (98765432)\",\r\n            \"DocumentID\": \"34589873\",\r\n            \"FormType\": \"HTML\"\r\n        }\r\n    }\r\n    */\n    //console.log(result);\n\n    if (result.Status.StatusCode === \"M0000\") {\n      var dataresult = {\n        docName: result.Result['DocName'],\n        documentId: result.Result['DocumentID'],\n        formType: result.Result['FormType']\n      };\n      return dataresult;\n    }\n\n    return undefined;\n  } //documents -> Ver documento en gestor documental ONBASE\n  //VerDocumentoECM\n\n\n  async postViewDocument(docId) {\n    try {\n      console.log(docId);\n      var data = {\n        DocumentHandle: docId,\n        ReturnBase64: false\n      };\n      var result = await this.post(url.URL_CORE_DOCUMENTSVIEW, data);\n      console.log(\"Result Document: \", result);\n      return result.Documents[0].DocPop;\n    } catch (e) {}\n\n    return null;\n  } //v1/parties/information -> retorna la info del cliente\n  //BuscarClienteCORE\n\n\n  async getPartiesInformation(params) {\n    /*var item =[ {id:800120843,clientnumber:800120843,clientname:\"Israel Michel Gomez Alfonso\",firstname:\"Israel\",secondname:\"Michel\",\r\n    lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"CED\",idnumber:\"456123\"},\r\n    {id:800120845,clientnumber:800120845,clientname:\"Pancho Pedro Gomez Alfonso\",firstname:\"Pancho\",secondname:\"Pedro\",\r\n    lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"RUC\",idnumber:\"456456\"}];\r\n    return item;*/\n    //params = {PartyType:Juridico,PartyId:600088018}\n    var data = qs.stringify(params);\n    console.log(data); //url.URL_CORSBYPASS +\n\n    var result = await this.get(url.URL_CORE_PARTIEINFO + \"?\" + data);\n    console.log(result);\n\n    if (result.Status.StatusCode === \"M0000\") {\n      return ClientInfoModel.fromJson(result);\n    } else {\n      result[\"error\"] = \"Error de Servicio del Core\"; //result.Status.StatusDesc;\n\n      result[\"errorCode\"] = result.Status.StatusCode;\n      return result;\n    }\n  }\n\n  async getPartiesInformationExtra(typePerson, customerNumberT24) {\n    try {\n      var params = {\n        PartyType: Number(typePerson) === 1 ? \"Natural\" : \"Juridico\",\n        PartyId: customerNumberT24\n      };\n      var result = await this.getPartiesInformation(params);\n\n      if (result !== undefined && result.length > 0) {\n        var _data$address$Country, _data$address, _data$address$Country2, _data$address$Provinc, _data$address2, _data$address2$Provin, _data$address$CountyD, _data$address3, _data$address3$County, _data$address$Jurisdi, _data$address4, _data$address4$Jurisd, _data$address$City$De, _data$address5, _data$address5$City, _data$address$AddrDes, _data$address6, _data$address$Buildin, _data$address7, _data$address7$Buildi, _data$address$HouseNu, _data$address8, _data$address$Street, _data$address9;\n\n        var data = result[0];\n        console.log(\"getPartiesInformationExtra\", data);\n        var extraInfo = {\n          activity: {\n            \"EconomicActivity\": data[\"economicActivity\"]\n          },\n          address: {\n            \"Country\": (_data$address$Country = (_data$address = data[\"address\"]) === null || _data$address === void 0 ? void 0 : (_data$address$Country2 = _data$address.Country) === null || _data$address$Country2 === void 0 ? void 0 : _data$address$Country2.CountryCode) !== null && _data$address$Country !== void 0 ? _data$address$Country : \"\",\n            \"Province\": (_data$address$Provinc = (_data$address2 = data[\"address\"]) === null || _data$address2 === void 0 ? void 0 : (_data$address2$Provin = _data$address2.Province) === null || _data$address2$Provin === void 0 ? void 0 : _data$address2$Provin.Cod) !== null && _data$address$Provinc !== void 0 ? _data$address$Provinc : \"\",\n            \"CountyDistrict\": (_data$address$CountyD = (_data$address3 = data[\"address\"]) === null || _data$address3 === void 0 ? void 0 : (_data$address3$County = _data$address3.CountyDistrict) === null || _data$address3$County === void 0 ? void 0 : _data$address3$County.Cod) !== null && _data$address$CountyD !== void 0 ? _data$address$CountyD : \"\",\n            \"Jurisdiction\": (_data$address$Jurisdi = (_data$address4 = data[\"address\"]) === null || _data$address4 === void 0 ? void 0 : (_data$address4$Jurisd = _data$address4.Jurisdiction) === null || _data$address4$Jurisd === void 0 ? void 0 : _data$address4$Jurisd.Cod) !== null && _data$address$Jurisdi !== void 0 ? _data$address$Jurisdi : \"\",\n            \"City\": (_data$address$City$De = (_data$address5 = data[\"address\"]) === null || _data$address5 === void 0 ? void 0 : (_data$address5$City = _data$address5.City) === null || _data$address5$City === void 0 ? void 0 : _data$address5$City.Desc) !== null && _data$address$City$De !== void 0 ? _data$address$City$De : \"\",\n            \"AddrDesc\": (_data$address$AddrDes = (_data$address6 = data[\"address\"]) === null || _data$address6 === void 0 ? void 0 : _data$address6.AddrDesc) !== null && _data$address$AddrDes !== void 0 ? _data$address$AddrDes : \"\",\n            \"Building\": (_data$address$Buildin = (_data$address7 = data[\"address\"]) === null || _data$address7 === void 0 ? void 0 : (_data$address7$Buildi = _data$address7.Building) === null || _data$address7$Buildi === void 0 ? void 0 : _data$address7$Buildi.Desc) !== null && _data$address$Buildin !== void 0 ? _data$address$Buildin : \"\",\n            \"HouseNumber\": (_data$address$HouseNu = (_data$address8 = data[\"address\"]) === null || _data$address8 === void 0 ? void 0 : _data$address8.HouseNumber) !== null && _data$address$HouseNu !== void 0 ? _data$address$HouseNu : \"\",\n            \"Street\": (_data$address$Street = (_data$address9 = data[\"address\"]) === null || _data$address9 === void 0 ? void 0 : _data$address9.Street) !== null && _data$address$Street !== void 0 ? _data$address$Street : \"\"\n          },\n          \"PhoneNumber\": data[\"phoneNumber\"],\n          \"Email\": data[\"email\"]\n        };\n        return extraInfo;\n      }\n    } catch (err) {}\n\n    return undefined;\n  } //Accionistas\n\n\n  async getPartiesStaff(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    var params = {\n      PartyId: PartyId\n    }; //{PartyId:600235373}\n\n    params = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_PARTIESTAFF + \"?\" + params);\n    return PartiesStaffModel.fromJson(result);\n  } ///v1/parties/staff\n\n\n  async putPartiesStaff(data) {\n    var result = await this.put(url.URL_CORE_PARTIESTAFF, data);\n    return PartiesStaffModel.fromJson(result);\n  } //ConsultarListaEmpresasRelacionadas\n\n\n  async getCompaniesRelations(params) {\n    //params = {PartyId:600012387}\n    var data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\n    return PartiesStaffModel.fromJson(result);\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                       Api para obtener todos los paises desde el catalogo                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPaisesCatalogo() {\n    try {\n      var result = sessionStorage.getItem('catPaises');\n\n      if (result !== undefined && result !== null) {\n        return JSON.parse(result);\n      } //sessionStorage.setItem('catPaises', JSON.stringify(result.roles));\n\n\n      let params = {\n        catalog_name: 'PAIS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      sessionStorage.setItem('catPaises', JSON.stringify(result.catalog));\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*       Api para obtener las provincias de un pais, pasandole como parametro el id del pais      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getProvinciasCatalogo(pais) {\n    try {\n      let params = {\n        catalog_name: 'PROVINCIA',\n        parent_catalog_name: pais,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*    API para obtener los distrito de cada provincia pasandole como parametro el id provincia    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getDistritoCatalogo(provincia) {\n    try {\n      let params = {\n        catalog_name: 'DISTRITO',\n        parent_catalog_name: provincia,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                      Api para obtener los corregimientos de cada distrito                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCorregimientoCatalogo(distrito) {\n    try {\n      let params = {\n        catalog_name: 'CORREGIMIENTO',\n        parent_catalog_name: distrito,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                         Api para obtener las ciudades de cada provincia                        */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCiudadCatalogo(provincia) {\n    try {\n      let params = {\n        catalog_name: 'CIUDAD',\n        parent_catalog_name: provincia,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                      Api para obtener el grupo economico de los catalogos                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getGrupoEconomicoCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'GRUPO ECONOMICO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      result.catalog.Records.unshift({\n        Description: \"N/A\",\n        Code: \"N/A\"\n      });\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                   Api para obtener las bancas esta api proviene de catalogos                   */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getBancaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'BANCA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                   Api muestra todos los cargos que retorna desde el catalogo                   */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCargosCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'CARGO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     Api retorna todos los bancos exitentes para el catalogo                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getBancosCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'BANCOS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getActividadEconomicaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'ACTIVIDAD ECONOMICA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSubActividadEconomicaCatalogo(codeActividad) {\n    try {\n      let params = {\n        catalog_name: 'SUB ACTIVIDAD ECONOMICA',\n        parent_catalog_name: codeActividad,\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (err) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO DE SECTOR ECONOMICO                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSectorEconomicoCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'SECTOR ECONOMICO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO RELACION                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getRelacionCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'RELACION',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO TIPO DE GARANTIA                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getTipoGarantiaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'TIPO DE GARANTIA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /*\r\n  \"catalog\": {\r\n      \"type\": \"TIPO DE GARANTIA\",\r\n      \"records\": [\r\n          {\r\n              \"CODIGO\": \"100\",\r\n              \"DESCRIPCION\": \"Garantia Hipotecaria Mueble\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"200\",\r\n              \"DESCRIPCION\": \"Garantia Hipotecaria Inmueble\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"300\",\r\n              \"DESCRIPCION\": \"Depositos Pignorados en el Banco\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"400\",\r\n              \"DESCRIPCION\": \"Depositos Pignorados en Otros Banco\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"500\",\r\n              \"DESCRIPCION\": \"Garantia Prendaria\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"600\",\r\n              \"DESCRIPCION\": \"Otras Garantias\"\r\n          },\r\n          {\r\n              \"CODIGO\": \"700\",\r\n              \"DESCRIPCION\": \"SIN GARANTIAS\"\r\n          }\r\n      ]\r\n  }\r\n  */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO MONEDAS                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getMonedaCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'MONEDA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     CATALOGO SUCURSAL  o Agencias                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSucursalCatalogo() {\n    try {\n      let params = {\n        catalog_name: 'SUCURSAL',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                       Api para obtener todos los subproductos catalogo                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSubProductosCatalogo() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SUBPRODUCTO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                       Api para obtener todos las sucursales o agencias catalogo                      */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getSucursalesCatalogo() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SUCURSAL',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Tipo de Limites de Credito\n\n\n  async getTypeOfCreditLimitsCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'LIMIT REFERENCE',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Aseguradoras\n\n\n  async getInsurersCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'ASEGURADORAS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Marcas de Auto\n\n\n  async getCarBrandCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'MARCA DE AUTOS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Modelos de Auto\n\n\n  async getCarModelCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'MODELO DE AUTO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Corredoras\n\n\n  async getBrokersCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'BROKER',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Fiduciaria\n\n\n  async getTrusteeCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'FIDUCIARIAS',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - SubProducto\n\n\n  async getSubProductCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SUBPRODUCTO',\n        parent_catalog_name: \"3200\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Categorias\n\n\n  async getCategoriesCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'CATEGORIA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Tipo de poliza\n\n\n  async getPolicyTypeCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'TIPO POLIZA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Sub tipo de Garantia\n\n\n  async getSubTypeWarrantyCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'SUB TIPO GARANTIA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Clases de Auto\n\n\n  async getAutoClassCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'CLASE AUTO',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  } //CATALOGO - Avaluadora\n\n\n  async getAppraiserCatalog() {\n    try {\n      // return json;\n      let params = {\n        catalog_name: 'AVALUADORA',\n        parent_catalog_name: \"\",\n        keyword: \"\"\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\n      return result.catalog;\n    } catch (ex) {}\n\n    return null;\n  }\n  /*------------------------------------------------------------------------------------*/\n  ///v1/loans/details/informations\n  //Retorna las facilidades de un cliente ... partyId -> numero del cliente en T24\n  //getFacilidades\n\n\n  async getFacilities(partyId) {\n    try {\n      const currencyData = new Currency();\n\n      if (partyId.length <= 0) {\n        return undefined;\n      }\n\n      var dataResult = [];\n      /*\r\n      try {\r\n          var params = {\r\n              PartyId: partyId\r\n          }\r\n          var data = qs.stringify(params);\r\n          var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\r\n            //Armamos la data a mostrar en pantalla\r\n          result.AcctLoans.AcctLoan.map(function (item, i) {\r\n              try {\r\n                  dataResult.push({\r\n                      \"facilityType\": item.ProductDesc, \"approvedAmount\": item.AcctOpeningInfo.InitialAmt.Amt,\r\n                      \"approvedDate\": item.AcctOpeningInfo.OpenDt, \"actualBalance\": item.AcctBal[0].CurAmt.Amt,\r\n                      \"debtorName\": item.AcctMember[0].PartyName.ShortName\r\n                  });\r\n              }\r\n              catch (err) { }\r\n          })\r\n      }\r\n      catch (err) { console.error(err); }\r\n      */\n      ////// Credit - Cortos Plazos\n\n      try {\n        var params = {\n          PartyId: partyId\n        };\n        var data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \n        //servicio retorna las cuentas del cliente\n\n        var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data); //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\n\n        if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\n          result.Party.PartyInfo.CreditLine.forEach(item => {\n            try {\n              /*\r\n              {\r\n              \"AvailableAmt\": {\r\n              \"Amt\": \"75,000.00\"\r\n              },\r\n              \"CreditLineId\": \"800048231.0010000.01\",\r\n              \"CreditLineNum\": \"01\",\r\n              \"CreditType\": {\r\n              \"Desc\": \"LÃ­mite Global - rotativo\"\r\n              },\r\n              \"CurCode\": \"USD\",\r\n              \"IntRateType\": {\r\n              \"Desc\": \"Fixed\"\r\n              },\r\n              \"OnlineAmt\": {\r\n              \"Amt\": \"125000.00\"\r\n              },\r\n              \"PendingAmt\": {\r\n              \"Amt\": \"50,000.00\"\r\n              },\r\n              \"Rating\": \"01\",\r\n              \"SecuredAmt\": {\r\n              \"Amt\": \"0.00\"\r\n              }\r\n              }\r\n              */\n              var deudas = {\n                debtype: \"short\",\n                facilityType: item.CreditType.Desc,\n                bank: \"Banesco\",\n                balance: Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n                approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                startDate: moment().format(\"YYYY-MM-DD\"),\n                endDate: moment().format(\"YYYY-MM-DD\")\n              }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n              if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n                dataResult.push({\n                  \"facilityType\": item.CreditType.Desc,\n                  \"approvedAmount\": Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                  \"approvedDate\": moment().format(\"YYYY-MM-DD\"),\n                  \"actualBalance\": Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n                  \"debtorName\": \"\"\n                });\n              }\n            } catch (err) {}\n          });\n        } else {\n          // myVarToTest is not an array\n          //Armamos la data a mostrar en pantalla\n          var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n          try {\n            var deudas = {\n              debtype: \"short\",\n              facilityType: item.CreditType.Desc,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n              approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n              variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n              startDate: moment().format(\"YYYY-MM-DD\"),\n              endDate: moment().format(\"YYYY-MM-DD\")\n            }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n            if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n              dataResult.push({\n                \"facilityType\": item.CreditType.Desc,\n                \"approvedAmount\": Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                \"approvedDate\": moment().format(\"YYYY-MM-DD\"),\n                \"actualBalance\": Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n                \"debtorName\": \"\"\n              });\n            }\n          } catch (err) {}\n        }\n      } catch (err) {}\n\n      console.log(\"getFacilities\", dataResult);\n      return dataResult;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  } //retorna los Clientes Relacionados se le pasa el Numero de Cliente de T24\n\n\n  async getRelatedClients(partyId) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params);\n    var dataResult = [];\n\n    try {\n      //servicio retorna clientes relacionados\n      var resultData = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data); //Armamos la data a mostrar en pantalla\n\n      resultData.PartyPartyRels.PartyPartyRel.forEach(client => {\n        try {\n          var partyNumber = client.PartyPartyRelInfo.PartyRef[0].RelPartyRef[0].PartyKey[0].PartyId;\n\n          if (partyNumber !== undefined && partyNumber !== null && partyNumber.length > 0) {\n            dataResult.push(partyNumber);\n          }\n        } catch (err) {}\n      });\n    } catch (err) {}\n\n    return dataResult;\n  } //ExposicionCorporativa se le pasa el Numero de Cliente de T24\n\n\n  async getCorporateExhibition(partyId) {\n    const currencyData = new Currency();\n\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    var dataResult = [];\n    var longTerm = {\n      name: \"Facilidades Largo Plazo\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var shortTerm = {\n      name: \"Facilidades Corto Plazo\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var totalTerm = {\n      name: \"Total de Facilidades\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var pledged = {\n      name: \"Monto Pignorado\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    };\n    var netExposition = {\n      name: \"Exposicion Neta\",\n      approved: 0,\n      balance: 0,\n      proposal: 0,\n      variation: 0\n    }; ////// Credit - Cortos Plazos\n\n    try {\n      var params = {\n        PartyId: partyId\n      };\n      var data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \n      //servicio retorna las cuentas del cliente\n\n      var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data); //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\n\n      if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\n        result.Party.PartyInfo.CreditLine.forEach(item => {\n          try {\n            /*\r\n            {\r\n            \"AvailableAmt\": {\r\n            \"Amt\": \"75,000.00\"\r\n            },\r\n            \"CreditLineId\": \"800048231.0010000.01\",\r\n            \"CreditLineNum\": \"01\",\r\n            \"CreditType\": {\r\n            \"Desc\": \"LÃ­mite Global - rotativo\"\r\n            },\r\n            \"CurCode\": \"USD\",\r\n            \"IntRateType\": {\r\n            \"Desc\": \"Fixed\"\r\n            },\r\n            \"OnlineAmt\": {\r\n            \"Amt\": \"125000.00\"\r\n            },\r\n            \"PendingAmt\": {\r\n            \"Amt\": \"50,000.00\"\r\n            },\r\n            \"Rating\": \"01\",\r\n            \"SecuredAmt\": {\r\n            \"Amt\": \"0.00\"\r\n            }\r\n            }\r\n            */\n            if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n              var deudas = {\n                debtype: \"short\",\n                facilityType: item.CreditType.Desc,\n                bank: \"Banesco\",\n                balance: Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n                approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n                variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n                startDate: moment().format(\"YYYY-MM-DD\"),\n                endDate: moment().format(\"YYYY-MM-DD\")\n              }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n              if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                //deudas.debtype=\"long\";     \n                longTerm.approved += deudas.approved;\n                longTerm.balance += deudas.balance;\n              } else {\n                shortTerm.approved += deudas.approved;\n                shortTerm.balance += deudas.balance;\n              }\n            }\n          } catch (err) {}\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        try {\n          if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n            var deudas = {\n              debtype: \"short\",\n              facilityType: item.CreditType.Desc,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n              approved: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n              variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n              startDate: moment().format(\"YYYY-MM-DD\"),\n              endDate: moment().format(\"YYYY-MM-DD\")\n            }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              //deudas.debtype=\"long\";     \n              longTerm.approved += deudas.approved;\n              longTerm.balance += deudas.balance;\n            } else {\n              shortTerm.approved += deudas.approved;\n              shortTerm.balance += deudas.balance;\n            }\n          }\n        } catch (err) {}\n      }\n    } catch (err) {} ////// loands - Cortos y Largos Plazos\n\n\n    try {\n      let params = {\n        PartyId: partyId\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\n\n      if (Array.isArray(result.AcctLoans.AcctLoan)) {\n        result.AcctLoans.AcctLoan.forEach(item => {\n          if (item.AcctKey !== null) {\n            try {\n              /*\r\n              {\r\n              \"Category\": \"01\",\r\n              \"Desc\": \"340000071156\",\r\n              \"ProductDesc\": \"Prestamo Comercia\",\r\n              \"AcctOpeningInfo\": {\r\n              \"InitialAmt\": {\r\n              \"Amt\": \"120000.00\",\r\n              \"CurCode\": \"USD\"\r\n              },\r\n              \"OpenDt\": \"2019-08-02\"\r\n              },\r\n              \"CreditAcctData\": {\r\n              \"DueDt\": \"2028-07-05\",\r\n              \"CreditAcctPmtInfo\": null\r\n              },\r\n              \"AcctKey\": {\r\n              \"AcctId\": \"1020243542\"\r\n              },\r\n              \"AcctBal\": [\r\n              {\r\n              \"BalType\": \"Balance\",\r\n              \"CurAmt\": {\r\n                  \"Amt\": \"87245.92\"\r\n              }\r\n              }\r\n              ],\r\n              \"AcctMember\": [\r\n              {\r\n              \"PartyRole\": {\r\n                  \"Cod\": \"TITULAR/DEUDOR\"\r\n              },\r\n              \"PartyName\": {\r\n                  \"ShortName\": \"ASI DEVELOPMENT\"\r\n              },\r\n              \"PartyKey\": null\r\n              }\r\n              ]\r\n              }\r\n              */\n              var deudas = {\n                debtype: \"short\",\n                facilityType: item.ProductDesc,\n                bank: \"Banesco\",\n                balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n                approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n                variation: 0,\n                startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n                endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n              };\n              deudas.variation = deudas.approved - deudas.balance;\n\n              if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                //deudas.debtype=\"long\";     \n                longTerm.approved += deudas.approved;\n                longTerm.balance += deudas.balance;\n              } else {\n                shortTerm.approved += deudas.approved;\n                shortTerm.balance += deudas.balance;\n              }\n            } catch (err) {}\n          }\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        if (item.AcctKey !== null) {\n          try {\n            var deudas = {\n              debtype: \"short\",\n              facilityType: item.ProductDesc,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n              approved: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n              variation: 0,\n              startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n              endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n            };\n            deudas.variation = deudas.approved - deudas.balance;\n\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              //deudas.debtype=\"long\";     \n              longTerm.approved += deudas.approved;\n              longTerm.balance += deudas.balance;\n            } else {\n              shortTerm.approved += deudas.approved;\n              shortTerm.balance += deudas.balance;\n            }\n          } catch (err) {}\n        }\n      }\n    } catch (err) {}\n\n    longTerm.variation = longTerm.approved - longTerm.balance;\n    shortTerm.variation = shortTerm.approved - shortTerm.balance;\n    dataResult.push(longTerm);\n    dataResult.push(shortTerm);\n    totalTerm.approved = shortTerm.approved + longTerm.approved;\n    totalTerm.balance = shortTerm.balance + longTerm.balance;\n    totalTerm.variation = totalTerm.approved - totalTerm.balance;\n    dataResult.push(totalTerm);\n\n    try {\n      //servicio retorna Pignorados\n      var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data); //Armamos la data a mostrar en pantalla\n\n      result.Collaterals.CollateralInfo.map(function (item, i) {\n        if (item.AcctKey.AcctReference !== null) {\n          pledged.approved += Number(item.Collateral.CollateralAmt.Amt);\n          pledged.balance += 0;\n        }\n      });\n      pledged.variation = Number(pledged.approved - pledged.balance);\n      dataResult.push(pledged);\n    } catch (err) {\n      console.error(\"URL_CORE_PIGNORADO\", err);\n    }\n\n    if (dataResult.length > 0) {\n      netExposition.approved = totalTerm.approved - pledged.approved;\n      netExposition.proposal = totalTerm.proposal - pledged.proposal;\n      netExposition.variation = totalTerm.variation - pledged.variation;\n      dataResult.push(netExposition);\n    }\n\n    console.error(\"getCoporateExhibition 123\", dataResult);\n    return dataResult;\n  } //ExposicionCorporativa se le pasa el Numero de Cliente de T24\n\n\n  async getCorporateExhibitionByClients(partyId) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let clients = await this.getRelatedClients(partyId);\n    var dataResult = [];\n\n    for (var i = 0; i < clients.length; i++) {\n      let result = await this.getCorporateExhibition(clients[i]);\n\n      if (result !== null && result.length > 0) {\n        dataResult.push({\n          clientId: \"Cliente: \" + clients[i],\n          data: result\n        });\n      }\n    }\n\n    return dataResult;\n  } //Deudas a Corto y Largo Plazo --- APC, Credit, Loand\n\n\n  async getAllTermDebts(partyId, identification, idType) {\n    const currencyData = new Currency();\n\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    if (identification.length <= 0) {\n      return undefined;\n    }\n\n    var dataResult = {\n      longTermresult: [],\n      shortTermresult: []\n    }; ////// APC\n\n    try {\n      let typeofId = \"Cedula\";\n\n      switch (idType) {\n        case \"CED\":\n          {\n            typeofId = \"Cedula\";\n            break;\n          }\n\n        case \"RUC\":\n          {\n            typeofId = \"RUC\";\n            break;\n          }\n\n        case \"PAS\":\n          {\n            typeofId = \"Pasaporte\";\n            break;\n          }\n      }\n\n      var tmpidentification = \"\";\n      identification.split('-').map(str => {\n        if (str.startsWith(\"0\")) {\n          tmpidentification += str.replace(/^0+/, '') + \"-\";\n        } else {\n          tmpidentification += str + \"-\";\n        }\n      });\n\n      if (tmpidentification.startsWith(\"-\")) {\n        tmpidentification = tmpidentification.substring(1);\n      }\n\n      identification = tmpidentification.substring(0, tmpidentification.length - 1);\n      var params = {\n        \"ConsultarAPC\": {\n          \"Model\": {\n            \"EsPrueba\": 0,\n            \"ForzarBusqueda\": 0,\n            \"IdentificacionConsulta\": identification,\n            //\"8-773-1899\",\n            \"PasswordAPC\": \"Banesco19.\",\n            \"TipoCliente\": typeofId,\n            \"UltimusProcess\": 7,\n            \"UsuarioAPC\": \"WTIBANESCO001\"\n          }\n        }\n      }; //servicio retorna la info de APC del cliente\n\n      const result = await this.post(url.URL_CORE_APCINFO, params);\n\n      if (Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)) {\n        // myVatToTest is an array\n        //Armamos la data a mostrar en pantalla\n        result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\n          try {\n            var deudas = {\n              debtype: \"short\",\n              facilityType: item.dc_descr_corta_rela,\n              bank: item.dc_nom_asoc,\n              balance: Number(currencyData.getRealValue(item.dc_saldo_actual)),\n              approvedAmount: Number(currencyData.getRealValue(item.dc_monto_original)),\n              variation: 0,\n              startDate: item.dc_fec_inicio_rel,\n              endDate: item.dc_fec_fin_rel\n            };\n            deudas.variation = deudas.approvedAmount - deudas.balance;\n\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              deudas.debtype = \"long\";\n              dataResult.longTermresult.push(deudas);\n            } else {\n              dataResult.shortTermresult.push(deudas);\n            }\n\n            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\"); //dataResult.push(deudas);\n          } catch (err) {}\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        try {\n          var deudas = {\n            debtype: \"short\",\n            facilityType: item.dc_descr_corta_rela,\n            bank: item.dc_nom_asoc,\n            balance: Number(currencyData.getRealValue(item.dc_saldo_actual)),\n            approvedAmount: Number(currencyData.getRealValue(item.dc_monto_original)),\n            variation: 0,\n            startDate: item.dc_fec_inicio_rel,\n            endDate: item.dc_fec_fin_rel\n          };\n          deudas.variation = deudas.approvedAmount - deudas.balance;\n\n          if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n            deudas.debtype = \"long\";\n            dataResult.longTermresult.push(deudas);\n          } else {\n            dataResult.shortTermresult.push(deudas);\n          }\n\n          deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n          deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\"); //dataResult.push(deudas);\n        } catch (err) {}\n      }\n    } catch (err) {} ////// Credit - Cortos Plazos\n\n\n    try {\n      var params = {\n        PartyId: partyId\n      };\n      var data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \n      //servicio retorna las cuentas del cliente\n\n      var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data); //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\n\n      if (Array.isArray(result.Party.PartyInfo.CreditLine)) {\n        result.Party.PartyInfo.CreditLine.forEach(item => {\n          try {\n            /*\r\n            {\r\n            \"AvailableAmt\": {\r\n            \"Amt\": \"75,000.00\"\r\n            },\r\n            \"CreditLineId\": \"800048231.0010000.01\",\r\n            \"CreditLineNum\": \"01\",\r\n            \"CreditType\": {\r\n            \"Desc\": \"LÃ­mite Global - rotativo\"\r\n            },\r\n            \"CurCode\": \"USD\",\r\n            \"IntRateType\": {\r\n            \"Desc\": \"Fixed\"\r\n            },\r\n            \"OnlineAmt\": {\r\n            \"Amt\": \"125000.00\"\r\n            },\r\n            \"PendingAmt\": {\r\n            \"Amt\": \"50,000.00\"\r\n            },\r\n            \"Rating\": \"01\",\r\n            \"SecuredAmt\": {\r\n            \"Amt\": \"0.00\"\r\n            }\r\n            }\r\n            */\n            var deudas = {\n              debtype: \"short\",\n              facilityType: item.CreditType.Desc,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n              approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n              variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n              startDate: moment().format(\"YYYY-MM-DD\"),\n              endDate: moment().format(\"YYYY-MM-DD\")\n            }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n            if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n              if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                deudas.debtype = \"long\";\n                dataResult.longTermresult.push(deudas);\n              } else {\n                dataResult.shortTermresult.push(deudas);\n              }\n\n              deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n              deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n            }\n          } catch (err) {}\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        try {\n          var deudas = {\n            debtype: \"short\",\n            facilityType: item.CreditType.Desc,\n            bank: \"Banesco\",\n            balance: Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\n            approvedAmount: Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\n            variation: Number(currencyData.getRealValue(item.PendingAmt.Amt)),\n            startDate: moment().format(\"YYYY-MM-DD\"),\n            endDate: moment().format(\"YYYY-MM-DD\")\n          }; //deudas.variation=deudas.approvedAmount - deudas.balance;\n\n          if (item.CreditLineId.split(\".\")[1].replace(/0/g, '').length < 2) {\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              deudas.debtype = \"long\";\n              dataResult.longTermresult.push(deudas);\n            } else {\n              dataResult.shortTermresult.push(deudas);\n            }\n\n            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n          }\n        } catch (err) {}\n      }\n    } catch (err) {} ////// loands - Cortos y Largos Plazos\n\n\n    try {\n      let params = {\n        PartyId: partyId\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\n\n      if (Array.isArray(result.AcctLoans.AcctLoan)) {\n        result.AcctLoans.AcctLoan.forEach(item => {\n          if (item.AcctKey !== null) {\n            try {\n              /*\r\n              {\r\n              \"Category\": \"01\",\r\n              \"Desc\": \"340000071156\",\r\n              \"ProductDesc\": \"Prestamo Comercia\",\r\n              \"AcctOpeningInfo\": {\r\n              \"InitialAmt\": {\r\n              \"Amt\": \"120000.00\",\r\n              \"CurCode\": \"USD\"\r\n              },\r\n              \"OpenDt\": \"2019-08-02\"\r\n              },\r\n              \"CreditAcctData\": {\r\n              \"DueDt\": \"2028-07-05\",\r\n              \"CreditAcctPmtInfo\": null\r\n              },\r\n              \"AcctKey\": {\r\n              \"AcctId\": \"1020243542\"\r\n              },\r\n              \"AcctBal\": [\r\n              {\r\n              \"BalType\": \"Balance\",\r\n              \"CurAmt\": {\r\n                  \"Amt\": \"87245.92\"\r\n              }\r\n              }\r\n              ],\r\n              \"AcctMember\": [\r\n              {\r\n              \"PartyRole\": {\r\n                  \"Cod\": \"TITULAR/DEUDOR\"\r\n              },\r\n              \"PartyName\": {\r\n                  \"ShortName\": \"ASI DEVELOPMENT\"\r\n              },\r\n              \"PartyKey\": null\r\n              }\r\n              ]\r\n              }\r\n              */\n              var deudas = {\n                debtype: \"short\",\n                facilityType: item.ProductDesc,\n                bank: \"Banesco\",\n                balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n                approvedAmount: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n                variation: 0,\n                startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n                endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n              };\n              deudas.variation = deudas.approvedAmount - deudas.balance;\n\n              if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n                deudas.debtype = \"long\";\n                dataResult.longTermresult.push(deudas);\n              } else {\n                dataResult.shortTermresult.push(deudas);\n              }\n\n              deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n              deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n            } catch (err) {}\n          }\n        });\n      } else {\n        // myVarToTest is not an array\n        //Armamos la data a mostrar en pantalla\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        if (item.AcctKey !== null) {\n          try {\n            var deudas = {\n              debtype: \"short\",\n              facilityType: item.ProductDesc,\n              bank: \"Banesco\",\n              balance: Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),\n              approvedAmount: Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),\n              variation: 0,\n              startDate: moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),\n              endDate: moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")\n            };\n            deudas.variation = deudas.approvedAmount - deudas.balance;\n\n            if (moment(deudas.endDate).diff(deudas.startDate, 'years') > 1) {\n              deudas.debtype = \"long\";\n              dataResult.longTermresult.push(deudas);\n            } else {\n              dataResult.shortTermresult.push(deudas);\n            }\n\n            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\");\n            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\");\n          } catch (err) {}\n        }\n      }\n    } catch (err) {}\n\n    console.log(\"getShortLongTermDebts2\", dataResult);\n    return dataResult;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                                 Retorna los balances por meses                                 */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getAverages(AcctReference) {\n    if (AcctReference.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      AcctReference: AcctReference\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                     Obtenemos una lista de las importaciones que se generen                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getListaImportaciones(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_IMPORTACIONES + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                 Obtenemos una lista de las exportaciones que se hayan generado                 */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getListaExportaciones(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_EXPORTACIONES + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                          Obtenemos los prestamos entrantes existentes                          */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPrestamosEntrantes(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_INGOING + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                    Obtenemos una lista de todos los presstamos que ya salen                    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPrestamosSalientes(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_OUTOGOING + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*               Obtenemos la lista de creditos que existen en la actualidad activos              */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCreditosExistentes(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_CREDITOS + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                                        Creditos en linea                                       */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getCreditosLine(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*     Nos devuelve todas las transacciones que ha realizado el usuario por un rango de fechas    */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getTransactions(AcctId, EndDt, StartDt) {\n    if (AcctId.length <= 0 || EndDt.length <= 0 || StartDt.length <= 0) {\n      return undefined;\n    } // ejemplo del dataField\n    // AcctId=1001553287&EndDt=2021-10-16T09:32:51&StartDt=2021-09-16T00:00:00\n\n\n    let params = {\n      AcctId: AcctId,\n      EndDt: EndDt,\n      StartDt: StartDt\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*                                  Obtenemos todos los prestamos                                 */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPrestamos(PartyId) {\n    if (PartyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: PartyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_PRESTAMOS + \"?\" + data);\n    return result;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*               Obtenemos toda la informacion del prestamos dentro de una actividad              */\n\n  /* ---------------------------------------------------------------------------------------------- */\n\n\n  async getPrestamosInfo(AcctId) {\n    if (AcctId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      AcctId: AcctId\n    };\n    let data = qs.stringify(params);\n\n    if (AcctId.length > 0) {\n      var result = await this.get(url.URL_CORE_PRESTAMOS_INFORMATION + \"?\" + data);\n      return result;\n    }\n\n    return null;\n  }\n  /* ---------------------------------------------------------------------------------------------- */\n\n  /*               Obtenemos toda la informacion del Reporting Services                            */\n\n  /* ---------------------------------------------------------------------------------------------- */\n  //https://qa.api.ob.banesco.com.pa/APIUtil/v1/reports/atoms?FECHA=20210930&CLIENTE=600167424\n\n\n  async getReportingServices(partyId) {\n    //partyId -> numero del cliente en T24\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      FECHA: moment().add(-2, 'months').format(\"YYYYMMDD\"),\n      //preguntar pq la fecha no se puede cambiar\n      CLIENTE: partyId\n    };\n    let data = qs.stringify(params);\n    var result = await this.get(url.URL_CORE_REPORTINGSERVICES + \"?\" + data);\n    console.log(\"getReportingServices\", result);\n    return result;\n    /*{\r\n    \"records\": [\r\n    {\r\n        \"FECHA\": \"20210930\",\r\n        \"T_CREDITO\": \"002\",\r\n        \"T_FACILIDAD\": \"05\",\r\n        \"CLASIFICACION\": \"02\",\r\n        \"LOC_EXT\": \"L\",\r\n        \"REGION\": \"014\",\r\n        \"CLIENTE_RUC\": \"8-805-442\",\r\n        \"TNO_EMPRESA\": \"06\",\r\n        \"NOMBRE_CLIENTE\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n        \"GRUPO_ECON\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n        \"GRUPO_RUC\": \"8-805-442\",\r\n        \"T_RELACION\": \"P999\",\r\n        \"ACT_ECON\": \"2103\",\r\n        \"TASA_INT\": \"10.5\",\r\n        \"MONTO_IN\": 5400,\r\n        \"INT_PC\": 0,\r\n        \"FECHA_INI\": \"20150616\",\r\n        \"FECHA_FIN\": \"20230116\",\r\n        \"FECHA_REFIN\": \"NA\",\r\n        \"FECHA_RENEG\": \"20200817\",\r\n        \"G1\": \"0701\",\r\n        \"MONTO_G1\": 0,\r\n        \"G2\": \"NA\",\r\n        \"MONTO_G2\": 0,\r\n        \"G3\": \"NA\",\r\n        \"MONTO_G3\": 0,\r\n        \"G4\": \"NA\",\r\n        \"MONTO_G4\": 0,\r\n        \"G5\": \"NA\",\r\n        \"MONTO_G5\": 0,\r\n        \"PROV_REG\": 0,\r\n        \"PROV_NIIF\": 119.05,\r\n        \"PROV_PAIS\": 0,\r\n        \"SALDO\": 6401.61,\r\n        \"N_CUOTAS_VENCER\": \"7\",\r\n        \"X_VENCER30\": \"100.86\",\r\n        \"X_VENCER60\": \"100.86\",\r\n        \"X_VENCER90\": \"100.86\",\r\n        \"X_VENCER120\": \"100.86\",\r\n        \"X_VENCER180\": \"100.86\",\r\n        \"X_VENCER1A\": \"100.86\",\r\n        \"X_VENCER5A\": \"5796.45\",\r\n        \"X_VENCER10A\": \"0.00\",\r\n        \"X_VENCERM10A\": \"0.00\",\r\n        \"N_CUOTA_VENCIDAS\": \"0\",\r\n        \"VENCIDOS30\": \"0.00\",\r\n        \"VENCIDOS60\": \"0.00\",\r\n        \"VENCIDOS90\": \"0.00\",\r\n        \"VENCIDOS120\": \"0.00\",\r\n        \"VENCIDOS180\": \"0.00\",\r\n        \"VENCIDOS1A\": \"0.00\",\r\n        \"VENCIDOSM1A\": \"0.00\",\r\n        \"RANGO_MORA\": \"1. Al dÃ­a\",\r\n        \"DIAS_MORA\": 0,\r\n        \"PROX_CAP\": \"20211016\",\r\n        \"PER_CAP\": \"01\",\r\n        \"PROX_INT\": \"20211016\",\r\n        \"PER_INT\": \"01\",\r\n        \"CUOTA_XPAGAR\": \"100.86\",\r\n        \"SUCURSAL\": \"201\",\r\n        \"MONEDA\": \"USD\",\r\n        \"CUENTA_CONTABLE\": \"\",\r\n        \"PRODUCTO\": \"TDC\",\r\n        \"BANCA\": \"\",\r\n        \"SECTOR1\": \"PRESTACARD\",\r\n        \"SECTOR2\": \"\",\r\n        \"SECTOR3\": \"\",\r\n        \"SECTOR4\": \"PRESTACARD\",\r\n        \"PRODUCTO1\": \"TARJETA DE CREDITO CONSUMO\",\r\n        \"PRODUCTO2\": \"TDC\",\r\n        \"PRODUCTO3\": \"Prestacard Visa\",\r\n        \"NUM_OPS\": \"4466840182907004\",\r\n        \"NUM_CLIENTE\": \"600167424\",\r\n        \"CENTRO_COSTO\": \"\",\r\n        \"NUM_LINEA\": \"\",\r\n        \"COD_OFIC\": \"\",\r\n        \"COD_OFIC2\": \"\"\r\n    }\r\n    ],\r\n    \"Status\": {\r\n    \"StatusCode\": \"M0000\",\r\n    \"StatusDesc\": \"SUCCESS\"\r\n    }\r\n    } */\n  } //Retorna todos los colateralsId por numero de cliente\n\n\n  async getColaterals(partyId) {\n    //Numero del cliente en T24\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params);\n    var dataResult = [];\n\n    try {\n      console.log(\"plage\"); //servicio retorna Pignorados\n\n      var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data); //Armamos la data a mostrar en pantalla\n\n      result.Collaterals.CollateralInfo.map(function (item, i) {\n        if (item.Collateral.CollateralKey.CollateralId !== null) {\n          dataResult.push({\n            collateralId: item.Collateral.CollateralKey.CollateralId,\n            facilityAmt: item.Collateral.CollateralAmt.Amt\n          });\n        }\n      });\n    } catch (err) {\n      console.error(\"URL_CORE_PIGNORADO\", err);\n    }\n\n    console.log(\"dataResult\", dataResult);\n    return dataResult;\n  } // retorna Detalle de Garantias\n\n\n  async getWarrantyDetails(collateralId, warrantyType) {\n    //Numero del id colateral ... warrytype = Muebles, Inmuebles, Otros, Depositos\n    if (collateralId.length <= 0 || warrantyType.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      CollateralId: collateralId,\n      InqType: warrantyType\n    };\n    let data = qs.stringify(params);\n\n    try {\n      //servicio retorna Pignorados\n      const result = await this.get(url.URL_CORE_COLLATERALS + \"?\" + data);\n      return result; //Armamos la data a mostrar en pantalla\n\n      /*result.Collaterals.CollateralInfo.map(function(item, i){\r\n          if(item.Collateral.CollateralKey.CollateralId!==null){\r\n              dataResult.push({collateralId: item.Collateral.CollateralKey.CollateralId,facilityAmt: item.Collateral.CollateralAmt.Amt});\r\n          }                                \r\n      })*/\n    } catch (err) {\n      console.error(\"URL_CORE_PIGNORADO\", err);\n      return undefined;\n    }\n  } //retorna movimientos de cuentas\n\n\n  async getAccountMovements(partyId) {\n    //Numero de Cliente de T24\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\n      return;\n    }\n\n    var dataResult = [];\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n      params = {\n        AcctReference: item.AcctKey.AcctReference\n      };\n      data = qs.stringify(params);\n\n      try {\n        var year = 0;\n        var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n\n        if (dtResult.Acct.AcctBal.length > 0) {\n          // queda pendiente el tema de los depositos con el servicio de banesco  \n          var dt = {\n            AcctId: item.AcctKey.AcctId,\n            dataByYear: []\n          };\n\n          for (var accItem of dtResult.Acct.AcctBal) {\n            if (year !== Number(accItem.AverageBalanceDt.split(' ')[1])) {\n              year = Number(accItem.AverageBalanceDt.split(' ')[1]);\n              dt.dataByYear.push({\n                year,\n                dataresult: []\n              });\n            }\n\n            var dtr = {\n              \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]),\n              \"month\": accItem.AverageBalanceDt.split(' ')[0],\n              \"amount\": accItem.CurAmt.Amt,\n              \"deposits\": 0\n            };\n            dt.dataByYear[dt.dataByYear.length - 1].dataresult.push(dtr);\n          }\n          /*dtResult.Acct.AcctBal.map(function (accItem, i) {  \r\n              if(year !== Number(accItem.AverageBalanceDt.split(' ')[1])){\r\n                  year = Number(accItem.AverageBalanceDt.split(' ')[1]);\r\n                  dt.dataByYear.push({year,dataresult:[]})\r\n              }                                                \r\n              dt.dataByYear[dt.dataByYear.length-1].dataresult.push({\r\n                  \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]), \r\n                  \"month\": accItem.AverageBalanceDt.split(' ')[0],\r\n                  \"amount\": accItem.CurAmt.Amt\r\n              }); \r\n          }) */\n\n\n          dataResult.push(dt);\n        }\n      } catch (err) {}\n    } //Para sacar los depositos\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\n    //servicio retorna los movimientos de cuentas del cliente                        \n\n    /*try{\r\n        for (var i = 0; i < dataResult.length; ++i) {\r\n            var dtResult = dataResult[i];\r\n            for (var p = 0; p < dtResult.dataByYear.length; ++p) {\r\n                var dtYear = dtResult.dataByYear[p];\r\n                var currentYear =dtYear.year;\r\n                params = null; //dtResult.AcctId\r\n                if(currentYear === Number(moment().format(\"YYYY\"))){\r\n                    params = { AcctId: dtResult.AcctId, EndDt:moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"), StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                }\r\n                else{\r\n                    params = { AcctId: dtResult.AcctId, EndDt:currentYear+\"-12-31T23:59:59\", StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                }\r\n                data = qs.stringify(params);\r\n                try{\r\n                    var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data); \r\n                    for (var depo of deposits.Trn) {\r\n                        if(depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0){\r\n                            var monthName = GetMontNameByNumber(moment(depo.EffDt).format('M'));\r\n                            var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                                if(dataByMonth!==undefined){\r\n                    \r\n                                    dataByMonth.deposits= (Number(dataByMonth.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);\r\n                                }\r\n                        }                    \r\n                    }        \r\n                }\r\n                catch(err){}\r\n            }\r\n        }\r\n    }\r\n    catch(err){}\r\n    */\n    //Para sacar los depositos\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals?CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\n\n\n    try {\n      for (var i = 0; i < dataResult.length; ++i) {\n        var dtResult = dataResult[i];\n\n        for (var p = 0; p < dtResult.dataByYear.length; ++p) {\n          var dtYear = dtResult.dataByYear[p];\n          var currentYear = dtYear.year;\n          params = null; //dtResult.AcctId\n\n          if (currentYear === Number(moment().format(\"YYYY\"))) {\n            params = {\n              CUENTA: dtResult.AcctId,\n              FECHA_INI: currentYear + \"0101\",\n              FECHA_FIN: moment().format(\"YYYYMMDD\"),\n              PROMEDIO: \"S\"\n            }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n          } else {\n            params = {\n              CUENTA: dtResult.AcctId,\n              FECHA_INI: currentYear + \"0101\",\n              FECHA_FIN: currentYear + \"1231\",\n              PROMEDIO: \"S\"\n            }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n          }\n\n          data = qs.stringify(params);\n\n          try {\n            var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\n\n            for (var record of deposits.records) {\n              console.log(\"depositsMonth\", record.Fecha.toString().substring(4, 6));\n              var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4, 6));\n              var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName) >= 0);\n\n              if (dataByMonth !== undefined) {\n                dataByMonth.deposits = Number(record.monto).toFixed(2);\n              }\n            }\n          } catch (err) {}\n        }\n      }\n    } catch (err) {}\n\n    return dataResult;\n  }\n\n  async getAccountDeposits(partyId, year, month) {\n    //Numero de Cliente de T24\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\n      return;\n    }\n\n    var dataResult = [];\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n\n      try {\n        year = Number(year).toString(\"00\");\n        month = Number(month).toString(\"00\");\n        var endDate = moment(year + \"-\" + month + \"-01\").endOf('month').format('DD');\n        params = {\n          AcctId: item.AcctKey.AcctId,\n          EndDt: year + \"-\" + month + \"-\" + endDate + \"T23:59:59\",\n          StartDt: year + \"-\" + month + \"-01T00:00:00\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n\n        try {\n          var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\n\n          for (var depo of deposits.Trn) {\n            if (depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0) {\n              dataResult.push({\n                deposits: Number(depo.TotalCurAmt.Amt)\n              });\n            }\n          }\n        } catch (err) {}\n      } catch (err) {}\n    } //Para sacar los depositos\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\n\n\n    return dataResult;\n  } //retorna movimientos de cuentas\n\n\n  async getApcInfo(identification, idType) {\n    //Numero de identificacion del cliente\n    if (identification.length <= 0) {\n      return undefined;\n    }\n\n    let typeofId = \"Cedula\";\n\n    switch (idType) {\n      case \"CED\":\n        {\n          typeofId = \"Cedula\";\n          break;\n        }\n\n      case \"RUC\":\n        {\n          typeofId = \"RUC\";\n          break;\n        }\n\n      case \"PAS\":\n        {\n          typeofId = \"Pasaporte\";\n          break;\n        }\n    }\n\n    var tmpidentification = \"\";\n    identification.split('-').map(str => {\n      if (str.startsWith(\"0\")) {\n        tmpidentification += str.replace(/^0+/, '') + \"-\";\n      } else {\n        tmpidentification += str + \"-\";\n      }\n    });\n    identification = tmpidentification.substring(0, tmpidentification.length - 1);\n    var params = {\n      \"ConsultarAPC\": {\n        \"Model\": {\n          \"EsPrueba\": 0,\n          \"ForzarBusqueda\": 0,\n          \"IdentificacionConsulta\": identification,\n          //\"8-773-1899\",\n          \"PasswordAPC\": \"Banesco19.\",\n          \"TipoCliente\": typeofId,\n          \"UltimusProcess\": 7,\n          \"UsuarioAPC\": \"WTIBANESCO001\"\n        }\n      }\n    }; //servicio retorna la info de APC del cliente\n\n    const result = await this.post(url.URL_CORE_APCINFO, params);\n    var dataResult = [];\n\n    try {\n      if (Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)) {\n        //Armamos la data a mostrar en pantalla\n        result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\n          try {\n            dataResult.push({\n              \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"),\n              \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\n              \"initialAmount\": item.dc_monto_original,\n              \"actualAmount\": item.dc_saldo_actual,\n              \"asociation\": item.dc_nom_asoc,\n              \"source\": item.dc_descr_corta_rela\n            });\n          } catch (err) {}\n        });\n      } else {\n        var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\n\n        try {\n          dataResult.push({\n            \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"),\n            \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\n            \"initialAmount\": item.dc_monto_original,\n            \"actualAmount\": item.dc_saldo_actual,\n            \"asociation\": item.dc_nom_asoc,\n            \"source\": item.dc_descr_corta_rela\n          });\n        } catch (err) {}\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    return dataResult;\n  }\n\n  async getEconomicGroup(partyId) {\n    //partyId -> numero del cliente en T24\n    try {\n      let params = {\n        PartyId: partyId\n      };\n      let data = qs.stringify(params);\n      var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\n      console.log(\"getEconomicGroup\", result);\n      return result.PartyPartyRels.PartyPartyRel[0].PartyPartyRelInfo.PartyRelName[0];\n    } catch (err) {}\n\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    return null;\n  }\n\n  async getReciprocity(partyId, year, month) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    year = Number(year);\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return undefined;\n    }\n\n    var resultToReturn = {\n      averageAmt: 0,\n      deposits: 0\n    };\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n      params = {\n        AcctReference: item.AcctKey.AcctReference\n      };\n      data = qs.stringify(params);\n\n      try {\n        var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n\n        if (dtResult.Acct.AcctBal.length > 0) {\n          // queda pendiente el tema de los depositos con el servicio de banesco  \n          for (var accItem of dtResult.Acct.AcctBal) {\n            var dMonth = accItem.AverageBalanceDt.split(' ')[0];\n\n            if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year && dMonth.indexOf(month) >= 0) {\n              resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\n            }\n          }\n        }\n      } catch (err) {} //Para sacar los depositos\n\n\n      try {\n        var currentYear = year;\n        var monthNum = GetMontNumberByName(month);\n        var endDate = moment(year + \"-\" + monthNum + \"-01\").endOf('month').format('DD');\n        params = null; //dtResult.AcctId\n\n        params = {\n          CUENTA: item.AcctKey.AcctId,\n          FECHA_INI: currentYear + monthNum + \"01\",\n          FECHA_FIN: currentYear + monthNum + endDate,\n          PROMEDIO: \"S\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n\n        try {\n          var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\n\n          for (var record of deposits.records) {\n            //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\n            //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\n            //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\n            //if(dataByMonth!==undefined){                        \n            resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2); //  }                    \n          }\n        } catch (err) {}\n      } catch (err) {}\n    }\n\n    return resultToReturn;\n  }\n\n  async getReciprocityByYear(partyId, year) {\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    year = Number(year);\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return undefined;\n    }\n\n    var resultToReturn = {\n      averageAmt: 0,\n      deposits: 0\n    };\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i];\n      params = {\n        AcctReference: item.AcctKey.AcctReference\n      };\n      data = qs.stringify(params);\n\n      try {\n        var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\n\n        if (dtResult.Acct.AcctBal.length > 0) {\n          // queda pendiente el tema de los depositos con el servicio de banesco  \n          for (var accItem of dtResult.Acct.AcctBal) {\n            //var dMonth = accItem.AverageBalanceDt.split(' ')[0]\n            if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year) {\n              resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\n            }\n          }\n        }\n      } catch (err) {} //Para sacar los depositos\n\n\n      try {\n        var currentYear = year;\n        var monthNum = year === Number(moment().format(\"YYYY\")) ? moment().format(\"MM\") : \"12\";\n        var endDate = moment(year + \"-\" + monthNum + \"-01\").endOf('month').format('DD');\n        params = null; //dtResult.AcctId\n\n        params = {\n          CUENTA: item.AcctKey.AcctId,\n          FECHA_INI: currentYear + \"0101\",\n          FECHA_FIN: currentYear + monthNum + endDate,\n          PROMEDIO: \"S\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n\n        try {\n          var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\n\n          for (var record of deposits.records) {\n            //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\n            //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\n            //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\n            //if(dataByMonth!==undefined){                        \n            resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2); //  }                    \n          }\n        } catch (err) {}\n      } catch (err) {}\n    }\n\n    return resultToReturn;\n  }\n\n  async getDeposits(partyId, year, month) {\n    //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals\n    if (partyId.length <= 0) {\n      return undefined;\n    }\n\n    year = Number(year);\n    let params = {\n      PartyId: partyId\n    };\n    let data = qs.stringify(params); //servicio retorna las cuentas del cliente\n\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return undefined;\n    }\n\n    var resultToReturn = {\n      averageAmt: 0,\n      deposits: 0\n    };\n\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\n      var item = result.Accounts.Acct[i]; //CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\n\n      var endDate = moment(year + \"-12-01\").endOf('month').format('DD');\n      params = {\n        CUENTA: item.AcctKey.AcctId,\n        FECHA_INI: year + \"0101\",\n        FECHA_FIN: year + \"12\" + endDate\n      };\n      data = qs.stringify(params);\n\n      try {\n        var dtResult = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\n\n        if (dtResult.Acct.AcctBal.length > 0) {\n          // queda pendiente el tema de los depositos con el servicio de banesco  \n          for (var accItem of dtResult.Acct.AcctBal) {\n            if (Number(accItem.AverageBalanceDt.split(' ')[1]) === year) {\n              resultToReturn.averageAmt = (Number(resultToReturn.averageAmt) + Number(accItem.CurAmt.Amt)).toFixed(2);\n            }\n          }\n        }\n      } catch (err) {} //Para sacar los depositos\n      //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\n      //servicio retorna los movimientos de cuentas del cliente                        \n\n\n      try {\n        //var monthN=GetMontNumberByName(month);\n        var endDate = moment(year + \"-12-01\").endOf('month').format('DD');\n        params = {\n          AcctId: item.AcctKey.AcctId,\n          EndDt: year + \"-12-\" + endDate + \"T23:59:59\",\n          StartDt: year + \"-01-01T00:00:00\"\n        }; //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\n\n        data = qs.stringify(params);\n        var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\n        console.log(\"getReciprocityByYear\", deposits);\n\n        for (var depo of deposits.Trn) {\n          if (depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0) {\n            resultToReturn.deposits = (Number(resultToReturn.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);\n          }\n        }\n      } catch (err) {}\n    }\n\n    return resultToReturn;\n  } /// Obtener el serial de la linea -- Parametros: NumeroT24 y Codigo Facilidad\n\n\n  async getLineSerial(partyId, facilityTypeCode) {\n    try {\n      //partyId=\"800048231\"; facilityTypeCode=\"10000\"\n      if (partyId.length <= 0) {\n        return undefined;\n      }\n\n      let params = {\n        PartyId: partyId\n      };\n      let data = qs.stringify(params); //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018\n      //servicio retorna las cuentas del cliente\n\n      var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\n      var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0);\n      var lineNumber = 1;\n      dataResults.forEach(dt => {\n        lineNumber = Number(dt.CreditLineId.split(\".\")[2]) > lineNumber ? Number(dt.CreditLineId.split(\".\")[2]) : lineNumber;\n      });\n\n      while (facilityTypeCode.length < 7) {\n        facilityTypeCode = \"0\" + facilityTypeCode;\n      }\n\n      if (lineNumber.toString().length < 2) {\n        lineNumber = (\"0\" + (lineNumber + 1).toString()).slice(-2);\n      } else {\n        lineNumber = lineNumber.toString();\n      }\n\n      var lineserial = partyId + \".\" + facilityTypeCode + \".\" + lineNumber;\n      console.log(\"lineas\", lineserial);\n      return lineserial;\n    } catch (err) {}\n\n    return null;\n  } ///Creacion de Linea para desembolso\n  //numero de linea = numero de cliente + tipo de linea + serial === EJ: 600197109.0011000.01\n  //https://qa.api.ob.banesco.com.pa/APIUtil/v1/catalogs?catalog_name=LIMIT REFERENCE&parent_catalog_name=&keyword=  \n  //===> Catalogo de Tipo de Lineas\n  //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018  \n  //===> Obtenemos todas las lineas y tomamos el total + 1 => Mas serial\n\n\n  async newline(partyId, facilityType) {\n    if (partyId.length <= 0) {\n      return undefined;\n    } // Garantia loans/Colateral\n    //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/collaterals\n    // Desembolso\n    //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans\n    //lineas\n    //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/credits/lines/limits\n\n\n    var data = {\n      \"CreditLine\": {\n        \"Activity\": {\n          \"Cod\": \"1413\" //-> Cod. Actividad Economica\n\n        },\n        \"AuthType\": \"99\",\n        //-> ??\n        \"AutonomyCode\": {\n          \"Cod\": \"9999\" //-> Codigo de la Autonomia No lo tenemos\n\n        },\n        \"AutonomyUser\": \"1\",\n        //-> Usuario de Autonomia que esta login\n        \"CreditLimit\": {\n          \"AdviseAmt\": {\n            \"Amt\": \"25,000.00\",\n            //-> Monto de La Facilidad\n            \"CurCode\": \"USD\" //-> Codigo Moneda\n\n          },\n          \"Allow\": {\n            \"ProductData\": {\n              \"Product\": {\n                \"Cod\": \"1000\" // -> Tipo de Facilidad\n\n              }\n            }\n          },\n          \"AllowNetting\": \"N\",\n          // -> ?? FIJO\n          \"ApprovalDt\": \"2022-02-02\",\n          // -> Fecha de Aprobacion\n          \"AvailDt\": \"2022-02-02\",\n          // -> Fecha de Propuesta\n          \"AvailMarker\": \"Y\",\n          // -> ?? FIJO\n          \"CountryRisk\": [// -> Pais de riesgo\n          {\n            \"Country\": {\n              \"CountryCode\": \"PA\" // -> Codigo Pais de riesgo\n\n            },\n            \"Percent\": \"100\" // -> ??\n\n          }],\n          \"CreditLimitKey\": {\n            \"CreditLimitId\": \"600197109.0011000.01\" // -> numero de cliente + tipo de linea + mas serial\n\n          },\n          \"CurCode\": \"USD\",\n          //-> Tipo de Moneda\n          \"DeadLineDt\": \"2022-02-02\",\n          //Fecha del dia\n          \"DueDt\": \"2023-02-02\",\n          //Fecha de expiracion\n          \"LimitAmt\": {\n            \"Amt\": \"25,000.00\" //-> Monto de La Linea\n\n          },\n          \"LimitAmtType\": \"FIXED\",\n          //-> FIXED/VARIABLE\n          \"LimitReject\": \"Y\",\n          // -> YES/NO ??\n          \"MaxCurAmt\": {\n            \"Amt\": \"25,000.00\" //-> Monto de La Linea\n\n          },\n          \"ProposalDt\": \"2022-02-02\",\n          //Fecha Propuesta\n          \"ReviewDt\": \"2023-02-02\",\n          //Fecha Revision\n          \"ReviewFreq\": {\n            \"FreqValue\": \"20230330M1230\" // YYYY MM DD ... codigo A/M/D ... cantidad de meses, el dia especifico\n\n          },\n          \"Signatories\": {\n            \"Signatory\": [{\n              \"PartyKey\": {\n                \"PartyId\": \"45469\" //Numero del Cliente T24\n\n              }\n            }]\n          }\n        }\n      }\n    };\n    var result = await this.put(url.URL_CORE_LINES, data);\n\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\n      return undefined;\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/CoreServices/Services.js"],"names":["WatchListModel","DocumentModel","ClientInfoModel","PartiesStaffModel","ApiServiceCore","url","qs","ACT_FACILIDADACTIVOSFIJOS","OPTs","ResponseModel","moment","part","GetMontNumberByName","GetMontNameByNumber","ResourceStore","Currency","Services","postWhatchList","params","result","post","URL_CORE_WATCHLIST","status","fromJson","results","err","response","error","data","postDocument","config","headers","URL_CORE_DOCUMENTS","console","log","Status","StatusCode","dataresult","docName","Result","documentId","formType","undefined","postViewDocument","docId","DocumentHandle","ReturnBase64","URL_CORE_DOCUMENTSVIEW","Documents","DocPop","e","getPartiesInformation","stringify","get","URL_CORE_PARTIEINFO","getPartiesInformationExtra","typePerson","customerNumberT24","PartyType","Number","PartyId","length","extraInfo","activity","address","Country","CountryCode","Province","Cod","CountyDistrict","Jurisdiction","City","Desc","AddrDesc","Building","HouseNumber","Street","getPartiesStaff","URL_CORE_PARTIESTAFF","putPartiesStaff","put","getCompaniesRelations","URL_CORE_COMPANIESRELATIONS","getPaisesCatalogo","sessionStorage","getItem","JSON","parse","catalog_name","parent_catalog_name","keyword","URL_CORE_CATALOGO","setItem","catalog","ex","getProvinciasCatalogo","pais","getDistritoCatalogo","provincia","getCorregimientoCatalogo","distrito","getCiudadCatalogo","getGrupoEconomicoCatalogo","Records","unshift","Description","Code","getBancaCatalogo","getCargosCatalogo","getBancosCatalogo","getActividadEconomicaCatalogo","getSubActividadEconomicaCatalogo","codeActividad","getSectorEconomicoCatalogo","getRelacionCatalogo","getTipoGarantiaCatalogo","getMonedaCatalogo","getSucursalCatalogo","getSubProductosCatalogo","getSucursalesCatalogo","getTypeOfCreditLimitsCatalog","getInsurersCatalog","getCarBrandCatalog","getCarModelCatalog","getBrokersCatalog","getTrusteeCatalog","getSubProductCatalog","getCategoriesCatalog","getPolicyTypeCatalog","getSubTypeWarrantyCatalog","getAutoClassCatalog","getAppraiserCatalog","getFacilities","partyId","currencyData","dataResult","URL_CORE_CREDITOS_LINE","Array","isArray","Party","PartyInfo","CreditLine","forEach","item","deudas","debtype","facilityType","CreditType","bank","balance","getRealValue","AvailableAmt","Amt","approvedAmount","OnlineAmt","variation","PendingAmt","startDate","format","endDate","CreditLineId","split","replace","push","ConsultarAPCResponse","ConsultarAPCResult","DetCompromisoAPC","getRelatedClients","resultData","PartyPartyRels","PartyPartyRel","client","partyNumber","PartyPartyRelInfo","PartyRef","RelPartyRef","PartyKey","getCorporateExhibition","longTerm","name","approved","proposal","shortTerm","totalTerm","pledged","netExposition","diff","URL_CORE_FACILIDADES","AcctLoans","AcctLoan","AcctKey","ProductDesc","AcctBal","CurAmt","AcctOpeningInfo","InitialAmt","OpenDt","CreditAcctData","DueDt","URL_CORE_PIGNORADO","Collaterals","CollateralInfo","map","i","AcctReference","Collateral","CollateralAmt","getCorporateExhibitionByClients","clients","clientId","getAllTermDebts","identification","idType","longTermresult","shortTermresult","typeofId","tmpidentification","str","startsWith","substring","URL_CORE_APCINFO","dc_descr_corta_rela","dc_nom_asoc","dc_saldo_actual","dc_monto_original","dc_fec_inicio_rel","dc_fec_fin_rel","getAverages","URL_CORE_AVERAGES","getListaImportaciones","URL_CORE_IMPORTACIONES","getListaExportaciones","URL_CORE_EXPORTACIONES","getPrestamosEntrantes","URL_CORE_INGOING","getPrestamosSalientes","URL_CORE_OUTOGOING","getCreditosExistentes","URL_CORE_CREDITOS","getCreditosLine","getTransactions","AcctId","EndDt","StartDt","URL_CORE_TRANSACCTIONS","getPrestamos","URL_CORE_PRESTAMOS","getPrestamosInfo","URL_CORE_PRESTAMOS_INFORMATION","getReportingServices","FECHA","add","CLIENTE","URL_CORE_REPORTINGSERVICES","getColaterals","CollateralKey","CollateralId","collateralId","facilityAmt","getWarrantyDetails","warrantyType","InqType","URL_CORE_COLLATERALS","getAccountMovements","URL_CORE_ACCOUNTSPARTIES","ResponseT24_STATUSOK","Error","StatusDesc","Accounts","Acct","year","dtResult","dt","dataByYear","accItem","AverageBalanceDt","dtr","p","dtYear","currentYear","CUENTA","FECHA_INI","FECHA_FIN","PROMEDIO","deposits","URL_CORE_BALANCETOTALS","record","records","Fecha","toString","monthName","dataByMonth","find","x","month","indexOf","monto","toFixed","getAccountDeposits","endOf","depo","Trn","TotalCurAmt","getApcInfo","getEconomicGroup","PartyRelName","getReciprocity","resultToReturn","averageAmt","dMonth","monthNum","getReciprocityByYear","getDeposits","getLineSerial","facilityTypeCode","dataResults","filter","lineNumber","slice","lineserial","newline","URL_CORE_LINES"],"mappings":"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","sourcesContent":["\r\nimport { WatchListModel, DocumentModel, ClientInfoModel, PartiesStaffModel } from \"../../models/Core\";\r\nimport ApiServiceCore from \"../ApiServiceCore\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport qs from \"qs\";\r\nimport { ACT_FACILIDADACTIVOSFIJOS } from \"../../helpers/options_helper\";\r\nimport * as OPTs from \"../../helpers/options_helper\"\r\nimport { ResponseModel } from '../../models/Common/ResponseModel';\r\nimport moment from \"moment\";\r\nimport { part } from \"core-js/core/function\";\r\n\r\nimport {GetMontNumberByName,GetMontNameByNumber} from '../../helpers/commons'\r\nimport { ResourceStore } from \"i18next\";\r\n\r\nimport Currency from \"../../helpers/currency\"\r\n\r\nexport default class Services extends ApiServiceCore {\r\n    \r\n    //analysis/customers -> retorna la info de lista de vigilancia\r\n    //ConsultarListaCriterioCORE    \r\n    async postWhatchList(params) {\r\n        try {\r\n            /*\r\n        {\r\n      \"pCustomerId\": \"06--00711-002304\",\r\n      \"pTypeId\": \"CEDULA_IDENTIDAD\",\r\n      \"pModelId\": \"LISTA_VIGILANCIA\",\r\n      \"pCustomerListParams\": {\r\n          \"KeyValueParam\": [\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"NOMBRE\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Librada\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_NOMBRE\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Emilio\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"PRIMER_APELLIDO\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Rivera\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"SEGUNDO_APELLIDO\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"Gaviria\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"TIPO_ID\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"CEDULA_IDENTIDAD\"\r\n              },\r\n              {\r\n                  \"_x003C_Key_x003E_k__BackingField\": \"CEDULA\",\r\n                  \"_x003C_Value_x003E_k__BackingField\": \"06--00711-002304\"\r\n              }\r\n          ]\r\n      },\r\n      \"pUser\": \"wallytech_ws_user\",\r\n      \"pWaitingInterval\": 180000000,\r\n      \"pPriority\": 1\r\n  }\r\n        */\r\n            var result = await this.post(url.URL_CORE_WATCHLIST, params);\r\n\r\n            return { status: 200, result: WatchListModel.fromJson(result).results };\r\n\r\n        }\r\n        catch (err) {\r\n            return { status: err.response.status, error: err.response.data }; //errorMessage, //errorCode\r\n        }\r\n    }\r\n\r\n    //documents -> salva documento en gestor documental ONBASE\r\n    //GuardarDocumentoECM\r\n    async postDocument(data) {\r\n\r\n        var config = {\r\n            headers: {\r\n                //\"Accept\":\"*/*\",\r\n                //\"Accept-Encoding\":\"gzip, deflate, sdch, br\",\r\n                //\"Accept-Language\":\"fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4\",\r\n                //\"Access-Control-Request-Headers\":\"accept, content-type\",\r\n                //\"Content-Type\":\"text/plain\",\r\n                //\"Content-Length\":JSON.stringify(data).length.toString(),\r\n                //\"Host\":\"https://qa.api.ob.banesco.com.pa/\",\r\n                //Connection: \"keep-alive\",\r\n                //\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\r\n                \"userId\": \"mq3898\", //Usuario\r\n                \"clientDt\": \"clientDt\", //\"Fecha de ejecuciÃ³n del cliente.\"\r\n                \"appName\": \"ReactJs\",//\"Aplicacion que consume el servicio\"\r\n                \"requestId\": \"202112202\",//\"Identificador de la solicitud.\"\r\n                \"channelId\": \"channelID\", //\"Canal consumidor\",                \r\n            }\r\n        }\r\n\r\n        var result = await this.post(url.URL_CORE_DOCUMENTS, data, config);\r\n\r\n        console.log(\"Result Document: \", result);\r\n\r\n        /*\r\n        var result = {\r\n            \"Status\": {\r\n                \"StatusCode\": \"M0000\",\r\n                \"StatusDesc\": \"OK\"\r\n            },\r\n            \"Token\": \"e793-ddb2-ab0e-6626-5d3e-5f19-b79b-1f5d\",\r\n            \"Result\": {\r\n                \"DocName\": \"TDC - Contrato de TDC  (98765432)\",\r\n                \"DocumentID\": \"34589873\",\r\n                \"FormType\": \"HTML\"\r\n            }\r\n        }\r\n        */\r\n        //console.log(result);\r\n        if (result.Status.StatusCode === \"M0000\") {\r\n            var dataresult = { docName: result.Result['DocName'], documentId: result.Result['DocumentID'], formType: result.Result['FormType'] }\r\n            return dataresult;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    //documents -> Ver documento en gestor documental ONBASE\r\n    //VerDocumentoECM\r\n    async postViewDocument(docId) {\r\n\r\n        try {\r\n            console.log(docId);\r\n            var data = {\r\n                DocumentHandle: docId,\r\n                ReturnBase64: false\r\n            }\r\n\r\n            var result = await this.post(url.URL_CORE_DOCUMENTSVIEW, data);\r\n\r\n            console.log(\"Result Document: \", result);\r\n\r\n            return result.Documents[0].DocPop;\r\n        }\r\n        catch (e) { }\r\n        return null;\r\n\r\n\r\n\r\n    }\r\n\r\n    //v1/parties/information -> retorna la info del cliente\r\n    //BuscarClienteCORE\r\n    async getPartiesInformation(params) {\r\n\r\n        /*var item =[ {id:800120843,clientnumber:800120843,clientname:\"Israel Michel Gomez Alfonso\",firstname:\"Israel\",secondname:\"Michel\",\r\n        lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"CED\",idnumber:\"456123\"},\r\n        {id:800120845,clientnumber:800120845,clientname:\"Pancho Pedro Gomez Alfonso\",firstname:\"Pancho\",secondname:\"Pedro\",\r\n        lastname:\"Gomez\",secondlastname:\"Alfonso\",idtype:\"RUC\",idnumber:\"456456\"}];\r\n        return item;*/\r\n        //params = {PartyType:Juridico,PartyId:600088018}\r\n        var data = qs.stringify(params);\r\n        console.log(data);\r\n        //url.URL_CORSBYPASS +\r\n        var result = await this.get(url.URL_CORE_PARTIEINFO + \"?\" + data);\r\n        console.log(result);\r\n        if (result.Status.StatusCode === \"M0000\") {\r\n            return ClientInfoModel.fromJson(result);\r\n        }\r\n        else {\r\n            result[\"error\"] = \"Error de Servicio del Core\";//result.Status.StatusDesc;\r\n            result[\"errorCode\"] = result.Status.StatusCode;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    async getPartiesInformationExtra(typePerson,customerNumberT24){\r\n        try {\r\n            var params = { PartyType: (Number(typePerson) === 1 ? \"Natural\" : \"Juridico\"), PartyId: customerNumberT24 }\r\n            var result = await this.getPartiesInformation(params);\r\n            if (result !== undefined && result.length > 0) {\r\n                var data = result[0];\r\n                console.log(\"getPartiesInformationExtra\", data);\r\n                var extraInfo ={\r\n                    activity:{\r\n                        \"EconomicActivity\":data[\"economicActivity\"]\r\n                    },\r\n                    address: {\r\n                        \"Country\":data[\"address\"]?.Country?.CountryCode??\"\",\r\n                        \"Province\":data[\"address\"]?.Province?.Cod??\"\",\r\n                        \"CountyDistrict\":data[\"address\"]?.CountyDistrict?.Cod??\"\",\r\n                        \"Jurisdiction\":data[\"address\"]?.Jurisdiction?.Cod??\"\",\r\n                        \"City\":data[\"address\"]?.City?.Desc??\"\",\r\n                        \"AddrDesc\":data[\"address\"]?.AddrDesc??\"\",\r\n                        \"Building\":data[\"address\"]?.Building?.Desc??\"\",\r\n                        \"HouseNumber\":data[\"address\"]?.HouseNumber??\"\",\r\n                        \"Street\":data[\"address\"]?.Street??\"\"\r\n                    },\r\n                    \"PhoneNumber\":data[\"phoneNumber\"],                    \r\n                    \"Email\":data[\"email\"]\r\n                }\r\n                \r\n                return extraInfo;\r\n            }\r\n        }\r\n        catch (err) { }\r\n        return undefined\r\n    }\r\n    \r\n    //Accionistas\r\n    async getPartiesStaff(PartyId) {\r\n\r\n        if(PartyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        var params = { PartyId: PartyId }//{PartyId:600235373}\r\n        params = qs.stringify(params);\r\n        \r\n        var result = await this.get(url.URL_CORE_PARTIESTAFF + \"?\" + params);\r\n            return PartiesStaffModel.fromJson(result);\r\n            \r\n    }\r\n\r\n    ///v1/parties/staff\r\n    async putPartiesStaff(data) {\r\n\r\n        var result = await this.put(url.URL_CORE_PARTIESTAFF, data);\r\n\r\n        return PartiesStaffModel.fromJson(result);\r\n    }\r\n\r\n    //ConsultarListaEmpresasRelacionadas\r\n    async getCompaniesRelations(params) {\r\n\r\n        //params = {PartyId:600012387}\r\n        var data = qs.stringify(params);\r\n\r\n        var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\r\n\r\n        return PartiesStaffModel.fromJson(result);\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                       Api para obtener todos los paises desde el catalogo                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPaisesCatalogo() {\r\n        try {\r\n            var result = sessionStorage.getItem('catPaises');\r\n            if (result !== undefined && result !== null) {\r\n                return JSON.parse(result);\r\n            }\r\n            //sessionStorage.setItem('catPaises', JSON.stringify(result.roles));\r\n\r\n            let params = {\r\n                catalog_name: 'PAIS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n\r\n            sessionStorage.setItem('catPaises', JSON.stringify(result.catalog));\r\n\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*       Api para obtener las provincias de un pais, pasandole como parametro el id del pais      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getProvinciasCatalogo(pais) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'PROVINCIA',\r\n                parent_catalog_name: pais,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*    API para obtener los distrito de cada provincia pasandole como parametro el id provincia    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getDistritoCatalogo(provincia) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'DISTRITO',\r\n                parent_catalog_name: provincia,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                      Api para obtener los corregimientos de cada distrito                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCorregimientoCatalogo(distrito) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'CORREGIMIENTO',\r\n                parent_catalog_name: distrito,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                         Api para obtener las ciudades de cada provincia                        */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCiudadCatalogo(provincia) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'CIUDAD',\r\n                parent_catalog_name: provincia,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                      Api para obtener el grupo economico de los catalogos                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getGrupoEconomicoCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'GRUPO ECONOMICO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            result.catalog.Records.unshift({ Description: \"N/A\", Code: \"N/A\" })\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                   Api para obtener las bancas esta api proviene de catalogos                   */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getBancaCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'BANCA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                   Api muestra todos los cargos que retorna desde el catalogo                   */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCargosCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'CARGO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     Api retorna todos los bancos exitentes para el catalogo                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getBancosCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'BANCOS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getActividadEconomicaCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'ACTIVIDAD ECONOMICA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO DE ACTIVIDAD ECONOMICA                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSubActividadEconomicaCatalogo(codeActividad) {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'SUB ACTIVIDAD ECONOMICA',\r\n                parent_catalog_name: codeActividad,\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (err) { }\r\n        return null;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO DE SECTOR ECONOMICO                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSectorEconomicoCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'SECTOR ECONOMICO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO RELACION                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getRelacionCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'RELACION',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO TIPO DE GARANTIA                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getTipoGarantiaCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'TIPO DE GARANTIA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n    /*\r\n    \"catalog\": {\r\n        \"type\": \"TIPO DE GARANTIA\",\r\n        \"records\": [\r\n            {\r\n                \"CODIGO\": \"100\",\r\n                \"DESCRIPCION\": \"Garantia Hipotecaria Mueble\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"200\",\r\n                \"DESCRIPCION\": \"Garantia Hipotecaria Inmueble\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"300\",\r\n                \"DESCRIPCION\": \"Depositos Pignorados en el Banco\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"400\",\r\n                \"DESCRIPCION\": \"Depositos Pignorados en Otros Banco\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"500\",\r\n                \"DESCRIPCION\": \"Garantia Prendaria\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"600\",\r\n                \"DESCRIPCION\": \"Otras Garantias\"\r\n            },\r\n            {\r\n                \"CODIGO\": \"700\",\r\n                \"DESCRIPCION\": \"SIN GARANTIAS\"\r\n            }\r\n        ]\r\n    }\r\n    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO MONEDAS                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getMonedaCatalogo() {\r\n\r\n        try {\r\n            let params = {\r\n                catalog_name: 'MONEDA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     CATALOGO SUCURSAL  o Agencias                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSucursalCatalogo() {\r\n        try {\r\n            let params = {\r\n                catalog_name: 'SUCURSAL',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                       Api para obtener todos los subproductos catalogo                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSubProductosCatalogo() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SUBPRODUCTO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                       Api para obtener todos las sucursales o agencias catalogo                      */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getSucursalesCatalogo() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SUCURSAL',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Tipo de Limites de Credito\r\n    async getTypeOfCreditLimitsCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'LIMIT REFERENCE',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Aseguradoras\r\n    async getInsurersCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'ASEGURADORAS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Marcas de Auto\r\n    async getCarBrandCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'MARCA DE AUTOS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Modelos de Auto\r\n    async getCarModelCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'MODELO DE AUTO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Corredoras\r\n    async getBrokersCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'BROKER',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Fiduciaria\r\n    async getTrusteeCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'FIDUCIARIAS',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - SubProducto\r\n    async getSubProductCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SUBPRODUCTO',\r\n                parent_catalog_name: \"3200\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Categorias\r\n    async getCategoriesCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'CATEGORIA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Tipo de poliza\r\n    async getPolicyTypeCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'TIPO POLIZA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Sub tipo de Garantia\r\n    async getSubTypeWarrantyCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'SUB TIPO GARANTIA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Clases de Auto\r\n    async getAutoClassCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'CLASE AUTO',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    //CATALOGO - Avaluadora\r\n    async getAppraiserCatalog() {\r\n        try {\r\n            // return json;\r\n            let params = {\r\n                catalog_name: 'AVALUADORA',\r\n                parent_catalog_name: \"\",\r\n                keyword: \"\"\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_CATALOGO + \"?\" + data);\r\n            return result.catalog;\r\n        }\r\n        catch (ex) { }\r\n        return null;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------*/\r\n    ///v1/loans/details/informations\r\n    //Retorna las facilidades de un cliente ... partyId -> numero del cliente en T24\r\n    //getFacilidades\r\n    async getFacilities(partyId) {\r\n        try {\r\n            \r\n        const currencyData = new Currency();\r\n\r\n            if(partyId.length <= 0){\r\n                return undefined;\r\n            }\r\n\r\n            var dataResult = [];\r\n            /*\r\n            try {\r\n                var params = {\r\n                    PartyId: partyId\r\n                }\r\n                var data = qs.stringify(params);\r\n                var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\r\n\r\n                //Armamos la data a mostrar en pantalla\r\n                result.AcctLoans.AcctLoan.map(function (item, i) {\r\n                    try {\r\n                        dataResult.push({\r\n                            \"facilityType\": item.ProductDesc, \"approvedAmount\": item.AcctOpeningInfo.InitialAmt.Amt,\r\n                            \"approvedDate\": item.AcctOpeningInfo.OpenDt, \"actualBalance\": item.AcctBal[0].CurAmt.Amt,\r\n                            \"debtorName\": item.AcctMember[0].PartyName.ShortName\r\n                        });\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            catch (err) { console.error(err); }\r\n            */\r\n\r\n            ////// Credit - Cortos Plazos\r\n        try{\r\n            var params = { PartyId: partyId }\r\n            var data = qs.stringify(params);\r\n                    \r\n            //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \r\n            //servicio retorna las cuentas del cliente\r\n            var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);                \r\n            \r\n            //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\r\n                        \r\n            if(Array.isArray(result.Party.PartyInfo.CreditLine)) {\r\n            \r\n                result.Party.PartyInfo.CreditLine.forEach((item)=>{\r\n                    try {\r\n                        /*\r\n                        {\r\n                    \"AvailableAmt\": {\r\n                        \"Amt\": \"75,000.00\"\r\n                    },\r\n                    \"CreditLineId\": \"800048231.0010000.01\",\r\n                    \"CreditLineNum\": \"01\",\r\n                    \"CreditType\": {\r\n                        \"Desc\": \"LÃ­mite Global - rotativo\"\r\n                    },\r\n                    \"CurCode\": \"USD\",\r\n                    \"IntRateType\": {\r\n                        \"Desc\": \"Fixed\"\r\n                    },\r\n                    \"OnlineAmt\": {\r\n                        \"Amt\": \"125000.00\"\r\n                    },\r\n                    \"PendingAmt\": {\r\n                        \"Amt\": \"50,000.00\"\r\n                    },\r\n                    \"Rating\": \"01\",\r\n                    \"SecuredAmt\": {\r\n                        \"Amt\": \"0.00\"\r\n                    }\r\n                }\r\n                        */\r\n                \r\n                        var deudas = {debtype:\"short\",facilityType:item.CreditType.Desc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AvailableAmt.Amt)),approvedAmount:Number(currencyData.getRealValue(item.OnlineAmt.Amt)),variation:Number(currencyData.getRealValue(item.PendingAmt.Amt)),startDate:moment().format(\"YYYY-MM-DD\"),endDate:moment().format(\"YYYY-MM-DD\")}\r\n                        //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                        if((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length<2){\r\n                            dataResult.push({\r\n                                \"facilityType\": item.CreditType.Desc, \"approvedAmount\": Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\r\n                                \"approvedDate\": moment().format(\"YYYY-MM-DD\"), \"actualBalance\": Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\r\n                                \"debtorName\": \"\"\r\n                            });                        \r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {                    \r\n                    var deudas = {debtype:\"short\",facilityType:item.CreditType.Desc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AvailableAmt.Amt)),approvedAmount:Number(currencyData.getRealValue(item.OnlineAmt.Amt)),variation:Number(currencyData.getRealValue(item.PendingAmt.Amt)),startDate:moment().format(\"YYYY-MM-DD\"),endDate:moment().format(\"YYYY-MM-DD\")}\r\n                            //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                            if((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length<2){\r\n                            dataResult.push({\r\n                                \"facilityType\": item.CreditType.Desc, \"approvedAmount\": Number(currencyData.getRealValue(item.OnlineAmt.Amt)),\r\n                                \"approvedDate\": moment().format(\"YYYY-MM-DD\"), \"actualBalance\": Number(currencyData.getRealValue(item.AvailableAmt.Amt)),\r\n                                \"debtorName\": \"\"\r\n                            });                        \r\n                        }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch(err){}\r\n        \r\n\r\n            console.log(\"getFacilities\", dataResult)\r\n            return dataResult;\r\n        }\r\n        catch (err) { console.error(err) }\r\n        return undefined;\r\n    }\r\n\r\n    //retorna los Clientes Relacionados se le pasa el Numero de Cliente de T24\r\n    async getRelatedClients(partyId) {\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: partyId\r\n        }\r\n\r\n        let data = qs.stringify(params);\r\n\r\n        var dataResult = [];\r\n\r\n        try {\r\n            \r\n            //servicio retorna clientes relacionados\r\n            var resultData = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\r\n            //Armamos la data a mostrar en pantalla\r\n            resultData.PartyPartyRels.PartyPartyRel.forEach((client)=>{\r\n                try{\r\n                    var partyNumber = client.PartyPartyRelInfo.PartyRef[0].RelPartyRef[0].PartyKey[0].PartyId;\r\n                    if (partyNumber !== undefined && partyNumber !== null && partyNumber.length > 0) {    \r\n                        dataResult.push(partyNumber);\r\n                    }}\r\n                catch(err){}  \r\n            });\r\n        }\r\n        catch (err) {}\r\n            \r\n        return dataResult;\r\n    }\r\n\r\n    //ExposicionCorporativa se le pasa el Numero de Cliente de T24\r\n    async getCorporateExhibition(partyId) {\r\n\r\n        const currencyData = new Currency();\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n        \r\n        var dataResult = [];\r\n        var longTerm = { name: \"Facilidades Largo Plazo\", approved: 0,balance:0, proposal: 0, variation: 0};\r\n        var shortTerm = { name: \"Facilidades Corto Plazo\", approved: 0,balance:0, proposal: 0, variation: 0};\r\n        var totalTerm = { name: \"Total de Facilidades\", approved: 0,balance:0, proposal: 0, variation: 0};\r\n        var pledged = { name: \"Monto Pignorado\", approved: 0,balance:0, proposal: 0, variation: 0 };\r\n        var netExposition = { name: \"Exposicion Neta\", approved: 0,balance:0, proposal: 0, variation: 0 };\r\n\r\n        ////// Credit - Cortos Plazos\r\n        try{\r\n            var params = { PartyId: partyId }\r\n            var data = qs.stringify(params);\r\n                    \r\n            //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \r\n            //servicio retorna las cuentas del cliente\r\n            var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);                \r\n            \r\n            //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\r\n                        \r\n            if(Array.isArray(result.Party.PartyInfo.CreditLine)) {\r\n            \r\n                result.Party.PartyInfo.CreditLine.forEach((item)=>{\r\n                    try {                        \r\n                        /*\r\n                        {\r\n                    \"AvailableAmt\": {\r\n                        \"Amt\": \"75,000.00\"\r\n                    },\r\n                    \"CreditLineId\": \"800048231.0010000.01\",\r\n                    \"CreditLineNum\": \"01\",\r\n                    \"CreditType\": {\r\n                        \"Desc\": \"LÃ­mite Global - rotativo\"\r\n                    },\r\n                    \"CurCode\": \"USD\",\r\n                    \"IntRateType\": {\r\n                        \"Desc\": \"Fixed\"\r\n                    },\r\n                    \"OnlineAmt\": {\r\n                        \"Amt\": \"125000.00\"\r\n                    },\r\n                    \"PendingAmt\": {\r\n                        \"Amt\": \"50,000.00\"\r\n                    },\r\n                    \"Rating\": \"01\",\r\n                    \"SecuredAmt\": {\r\n                        \"Amt\": \"0.00\"\r\n                    }\r\n                }\r\n                        */\r\n                       \r\n                        if((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length<2){\r\n                            var deudas = {debtype:\"short\",facilityType:item.CreditType.Desc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AvailableAmt.Amt)),approved:Number(currencyData.getRealValue(item.OnlineAmt.Amt)),variation:Number(currencyData.getRealValue(item.PendingAmt.Amt)),startDate:moment().format(\"YYYY-MM-DD\"),endDate:moment().format(\"YYYY-MM-DD\")}\r\n                            //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                            if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                                //deudas.debtype=\"long\";     \r\n                                longTerm.approved += deudas.approved;\r\n                                longTerm.balance += deudas.balance;              \r\n                            }\r\n                            else{\r\n                                shortTerm.approved += deudas.approved;\r\n                                shortTerm.balance += deudas.balance;              \r\n                            }\r\n                        }                                            \r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {                    \r\n                    if((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length<2){\r\n                        var deudas = {debtype:\"short\",facilityType:item.CreditType.Desc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AvailableAmt.Amt)),approved:Number(currencyData.getRealValue(item.OnlineAmt.Amt)),variation:Number(currencyData.getRealValue(item.PendingAmt.Amt)),startDate:moment().format(\"YYYY-MM-DD\"),endDate:moment().format(\"YYYY-MM-DD\")}\r\n                        //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                        if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                            //deudas.debtype=\"long\";     \r\n                            longTerm.approved += deudas.approved;\r\n                            longTerm.balance += deudas.balance;              \r\n                        }\r\n                        else{\r\n                            shortTerm.approved += deudas.approved;\r\n                            shortTerm.balance += deudas.balance;              \r\n                        }\r\n                    }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch(err){}\r\n        \r\n        ////// loands - Cortos y Largos Plazos\r\n        try{\r\n            let params = {\r\n                PartyId: partyId\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\r\n            \r\n            if(Array.isArray(result.AcctLoans.AcctLoan)) {\r\n            \r\n                result.AcctLoans.AcctLoan.forEach((item)=>{\r\n                    if(item.AcctKey !== null){\r\n                        try {\r\n                            /*\r\n                            {\r\n                    \"Category\": \"01\",\r\n                    \"Desc\": \"340000071156\",\r\n                    \"ProductDesc\": \"Prestamo Comercia\",\r\n                    \"AcctOpeningInfo\": {\r\n                        \"InitialAmt\": {\r\n                            \"Amt\": \"120000.00\",\r\n                            \"CurCode\": \"USD\"\r\n                        },\r\n                        \"OpenDt\": \"2019-08-02\"\r\n                    },\r\n                    \"CreditAcctData\": {\r\n                        \"DueDt\": \"2028-07-05\",\r\n                        \"CreditAcctPmtInfo\": null\r\n                    },\r\n                    \"AcctKey\": {\r\n                        \"AcctId\": \"1020243542\"\r\n                    },\r\n                    \"AcctBal\": [\r\n                        {\r\n                            \"BalType\": \"Balance\",\r\n                            \"CurAmt\": {\r\n                                \"Amt\": \"87245.92\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"AcctMember\": [\r\n                        {\r\n                            \"PartyRole\": {\r\n                                \"Cod\": \"TITULAR/DEUDOR\"\r\n                            },\r\n                            \"PartyName\": {\r\n                                \"ShortName\": \"ASI DEVELOPMENT\"\r\n                            },\r\n                            \"PartyKey\": null\r\n                        }\r\n                    ]\r\n                }\r\n                            */\r\n                           \r\n                            var deudas = {debtype:\"short\",facilityType:item.ProductDesc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),approved:Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),variation:0,startDate:moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),endDate:moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")}\r\n                            deudas.variation=deudas.approved - deudas.balance;\r\n                            if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                                //deudas.debtype=\"long\";     \r\n                                longTerm.approved += deudas.approved;\r\n                                longTerm.balance += deudas.balance;              \r\n                            }\r\n                            else{\r\n                                shortTerm.approved += deudas.approved;\r\n                                shortTerm.balance += deudas.balance;              \r\n                            }                        \r\n                        }                     \r\n                        catch (err) { }\r\n                    }                    \r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                if(item.AcctKey !== null){\r\n                    try {                    \r\n                        var deudas = {debtype:\"short\",facilityType:item.ProductDesc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),approved:Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),variation:0,startDate:moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),endDate:moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")}\r\n                        deudas.variation=deudas.approved - deudas.balance;\r\n                        if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                            //deudas.debtype=\"long\";     \r\n                            longTerm.approved += deudas.approved;\r\n                            longTerm.balance += deudas.balance;              \r\n                        }\r\n                        else{\r\n                            shortTerm.approved += deudas.approved;\r\n                            shortTerm.balance += deudas.balance;              \r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                }\r\n                \r\n            }\r\n        }\r\n        catch(err){}\r\n        \r\n        longTerm.variation = longTerm.approved - longTerm.balance;\r\n        shortTerm.variation = shortTerm.approved - shortTerm.balance;\r\n\r\n        dataResult.push(longTerm);\r\n        dataResult.push(shortTerm);\r\n\r\n        totalTerm.approved = shortTerm.approved + longTerm.approved;\r\n        totalTerm.balance = shortTerm.balance + longTerm.balance;\r\n        totalTerm.variation = totalTerm.approved - totalTerm.balance;\r\n\r\n        dataResult.push(totalTerm);\r\n\r\n        try {\r\n            //servicio retorna Pignorados\r\n            var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data);\r\n\r\n            //Armamos la data a mostrar en pantalla\r\n            result.Collaterals.CollateralInfo.map(function (item, i) {\r\n                if (item.AcctKey.AcctReference !== null) {\r\n                    pledged.approved += Number(item.Collateral.CollateralAmt.Amt);\r\n                    pledged.balance += 0;\r\n                    \r\n                }\r\n            })\r\n            pledged.variation = Number(pledged.approved - pledged.balance);\r\n\r\n            dataResult.push(pledged);\r\n        }\r\n        catch (err) {\r\n            console.error(\"URL_CORE_PIGNORADO\", err);\r\n        }\r\n\r\n        if (dataResult.length > 0) {\r\n            netExposition.approved = totalTerm.approved - pledged.approved;\r\n            netExposition.proposal = totalTerm.proposal - pledged.proposal;\r\n            netExposition.variation = totalTerm.variation - pledged.variation;\r\n\r\n            dataResult.push(netExposition);\r\n        }\r\n\r\n        console.error(\"getCoporateExhibition 123\", dataResult);\r\n        \r\n        return dataResult;\r\n    }\r\n\r\n    //ExposicionCorporativa se le pasa el Numero de Cliente de T24\r\n    async getCorporateExhibitionByClients(partyId) {\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n        \r\n        let clients = await this.getRelatedClients(partyId);\r\n        var dataResult = [];\r\n        for (var i = 0; i < clients.length; i++) {\r\n            let result = await this.getCorporateExhibition(clients[i]);\r\n            if (result !== null && result.length > 0) {\r\n                dataResult.push({ clientId: \"Cliente: \" + clients[i], data: result });\r\n            }\r\n        }\r\n        return dataResult;\r\n    }\r\n\r\n    //Deudas a Corto y Largo Plazo --- APC, Credit, Loand\r\n    async getAllTermDebts(partyId,identification,idType) {\r\n        \r\n        const currencyData = new Currency();\r\n  \r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        if(identification.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        var dataResult = {longTermresult:[],shortTermresult:[]};        \r\n        \r\n        ////// APC\r\n        try{\r\n            let typeofId = \"Cedula\";\r\n            switch(idType){\r\n                case \"CED\":{\r\n                    typeofId = \"Cedula\";\r\n                    break;\r\n                }\r\n                case \"RUC\":{\r\n                    typeofId = \"RUC\";\r\n                    break;\r\n                }\r\n                case \"PAS\":{\r\n                    typeofId = \"Pasaporte\";\r\n                    break;\r\n                }\r\n            }\r\n            var tmpidentification = \"\";\r\n            identification.split('-').map((str)=> {\r\n                if(str.startsWith(\"0\")){\r\n                    tmpidentification += str.replace(/^0+/, '')+\"-\";\r\n                }\r\n                else{\r\n                    tmpidentification += str+\"-\";\r\n                }\r\n            })\r\n            if(tmpidentification.startsWith(\"-\")){\r\n                tmpidentification = tmpidentification.substring(1);\r\n            }            \r\n        \r\n            identification = tmpidentification.substring(0,tmpidentification.length-1);\r\n            var params = {\r\n                \"ConsultarAPC\": {\r\n                    \"Model\": {\r\n                        \"EsPrueba\": 0,\r\n                        \"ForzarBusqueda\": 0,\r\n                        \"IdentificacionConsulta\": identification,//\"8-773-1899\",\r\n                        \"PasswordAPC\": \"Banesco19.\",\r\n                        \"TipoCliente\":typeofId,\r\n                        \"UltimusProcess\": 7,\r\n                        \"UsuarioAPC\": \"WTIBANESCO001\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            //servicio retorna la info de APC del cliente\r\n            const result = await this.post(url.URL_CORE_APCINFO, params);\r\n            \r\n            if(Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)) {\r\n                // myVatToTest is an array\r\n                //Armamos la data a mostrar en pantalla\r\n                result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\r\n                try {\r\n                    var deudas = {debtype:\"short\",facilityType:item.dc_descr_corta_rela, bank:item.dc_nom_asoc,balance:Number(currencyData.getRealValue(item.dc_saldo_actual)),approvedAmount:Number(currencyData.getRealValue(item.dc_monto_original)),variation:0,startDate:item.dc_fec_inicio_rel,endDate:item.dc_fec_fin_rel}\r\n                    deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                    if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                        deudas.debtype=\"long\";     \r\n                        dataResult.longTermresult.push(deudas)               \r\n                    }\r\n                    else{\r\n                        dataResult.shortTermresult.push(deudas)                    \r\n                    }\r\n                    deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                    deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                        \r\n                    //dataResult.push(deudas);\r\n                }\r\n                catch (err) { }\r\n                })\r\n            } \r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {\r\n                    var deudas = {debtype:\"short\",facilityType:item.dc_descr_corta_rela, bank:item.dc_nom_asoc,balance:Number(currencyData.getRealValue(item.dc_saldo_actual)),approvedAmount:Number(currencyData.getRealValue(item.dc_monto_original)),variation:0,startDate:item.dc_fec_inicio_rel,endDate:item.dc_fec_fin_rel}\r\n                    deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                    if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                        deudas.debtype=\"long\";     \r\n                        dataResult.longTermresult.push(deudas)               \r\n                    }\r\n                    else{\r\n                        dataResult.shortTermresult.push(deudas)                    \r\n                    }\r\n                    deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                    deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                    //dataResult.push(deudas);\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch(err){}\r\n        \r\n        ////// Credit - Cortos Plazos\r\n        try{\r\n            var params = { PartyId: partyId }\r\n            var data = qs.stringify(params);\r\n                    \r\n            //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018    \r\n            //servicio retorna las cuentas del cliente\r\n            var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);                \r\n            \r\n            //var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\r\n                        \r\n            if(Array.isArray(result.Party.PartyInfo.CreditLine)) {\r\n            \r\n                result.Party.PartyInfo.CreditLine.forEach((item)=>{\r\n                    try {\r\n                        /*\r\n                        {\r\n                    \"AvailableAmt\": {\r\n                        \"Amt\": \"75,000.00\"\r\n                    },\r\n                    \"CreditLineId\": \"800048231.0010000.01\",\r\n                    \"CreditLineNum\": \"01\",\r\n                    \"CreditType\": {\r\n                        \"Desc\": \"LÃ­mite Global - rotativo\"\r\n                    },\r\n                    \"CurCode\": \"USD\",\r\n                    \"IntRateType\": {\r\n                        \"Desc\": \"Fixed\"\r\n                    },\r\n                    \"OnlineAmt\": {\r\n                        \"Amt\": \"125000.00\"\r\n                    },\r\n                    \"PendingAmt\": {\r\n                        \"Amt\": \"50,000.00\"\r\n                    },\r\n                    \"Rating\": \"01\",\r\n                    \"SecuredAmt\": {\r\n                        \"Amt\": \"0.00\"\r\n                    }\r\n                }\r\n                        */\r\n                       \r\n                        var deudas = {debtype:\"short\",facilityType:item.CreditType.Desc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AvailableAmt.Amt)),approvedAmount:Number(currencyData.getRealValue(item.OnlineAmt.Amt)),variation:Number(currencyData.getRealValue(item.PendingAmt.Amt)),startDate:moment().format(\"YYYY-MM-DD\"),endDate:moment().format(\"YYYY-MM-DD\")}\r\n                        //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                        \r\n                        if((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length<2){\r\n                            if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                                deudas.debtype=\"long\";     \r\n                                dataResult.longTermresult.push(deudas)               \r\n                            }\r\n                            else{\r\n                                dataResult.shortTermresult.push(deudas)                    \r\n                            }\r\n                        \r\n                            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {\r\n                    \r\n                    var deudas = {debtype:\"short\",facilityType:item.CreditType.Desc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AvailableAmt.Amt)),approvedAmount:Number(currencyData.getRealValue(item.OnlineAmt.Amt)),variation:Number(currencyData.getRealValue(item.PendingAmt.Amt)),startDate:moment().format(\"YYYY-MM-DD\"),endDate:moment().format(\"YYYY-MM-DD\")}\r\n                            //deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                            if((item.CreditLineId.split(\".\")[1]).replace(/0/g, '').length<2){\r\n                                if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                                    deudas.debtype=\"long\";     \r\n                                    dataResult.longTermresult.push(deudas)               \r\n                                }\r\n                                else{\r\n                                    dataResult.shortTermresult.push(deudas)                    \r\n                                }\r\n                            \r\n                                deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                                deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                            }\r\n                }\r\n                catch (err) { }\r\n            }\r\n        }\r\n        catch(err){}\r\n        \r\n        ////// loands - Cortos y Largos Plazos\r\n        try{\r\n            let params = {\r\n                PartyId: partyId\r\n            }\r\n            let data = qs.stringify(params);\r\n            var result = await this.get(url.URL_CORE_FACILIDADES + \"?\" + data);\r\n            \r\n            if(Array.isArray(result.AcctLoans.AcctLoan)) {\r\n            \r\n                result.AcctLoans.AcctLoan.forEach((item)=>{\r\n                    if(item.AcctKey !== null){\r\n                        try {\r\n                            /*\r\n                            {\r\n                    \"Category\": \"01\",\r\n                    \"Desc\": \"340000071156\",\r\n                    \"ProductDesc\": \"Prestamo Comercia\",\r\n                    \"AcctOpeningInfo\": {\r\n                        \"InitialAmt\": {\r\n                            \"Amt\": \"120000.00\",\r\n                            \"CurCode\": \"USD\"\r\n                        },\r\n                        \"OpenDt\": \"2019-08-02\"\r\n                    },\r\n                    \"CreditAcctData\": {\r\n                        \"DueDt\": \"2028-07-05\",\r\n                        \"CreditAcctPmtInfo\": null\r\n                    },\r\n                    \"AcctKey\": {\r\n                        \"AcctId\": \"1020243542\"\r\n                    },\r\n                    \"AcctBal\": [\r\n                        {\r\n                            \"BalType\": \"Balance\",\r\n                            \"CurAmt\": {\r\n                                \"Amt\": \"87245.92\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"AcctMember\": [\r\n                        {\r\n                            \"PartyRole\": {\r\n                                \"Cod\": \"TITULAR/DEUDOR\"\r\n                            },\r\n                            \"PartyName\": {\r\n                                \"ShortName\": \"ASI DEVELOPMENT\"\r\n                            },\r\n                            \"PartyKey\": null\r\n                        }\r\n                    ]\r\n                }\r\n                            */\r\n                           \r\n                            var deudas = {debtype:\"short\",facilityType:item.ProductDesc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),approvedAmount:Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),variation:0,startDate:moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),endDate:moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")}\r\n                            deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                            if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                                deudas.debtype=\"long\";     \r\n                                dataResult.longTermresult.push(deudas)               \r\n                            }\r\n                            else{\r\n                                dataResult.shortTermresult.push(deudas)                    \r\n                            }\r\n                        \r\n                            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                        }                        \r\n                        catch (err) { }\r\n                    }                    \r\n                })\r\n            }\r\n            else {\r\n                // myVarToTest is not an array\r\n                //Armamos la data a mostrar en pantalla\r\n                var item = result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                if(item.AcctKey !== null){\r\n                    try {\r\n                    \r\n                        var deudas = {debtype:\"short\",facilityType:item.ProductDesc, bank:\"Banesco\",balance:Number(currencyData.getRealValue(item.AcctBal[0].CurAmt.Amt)),approvedAmount:Number(currencyData.getRealValue(item.AcctOpeningInfo.InitialAmt.Amt)),variation:0,startDate:moment(item.AcctOpeningInfo.OpenDt).format(\"YYYY-MM-DD\"),endDate:moment(item.CreditAcctData.DueDt).format(\"YYYY-MM-DD\")}\r\n                            deudas.variation=deudas.approvedAmount - deudas.balance;\r\n                            if(moment(deudas.endDate).diff(deudas.startDate, 'years')>1){\r\n                                deudas.debtype=\"long\";     \r\n                                dataResult.longTermresult.push(deudas)               \r\n                            }\r\n                            else{\r\n                                dataResult.shortTermresult.push(deudas)                    \r\n                            }\r\n                        \r\n                            deudas.endDate = moment(deudas.endDate).format(\"YYYY-MM-DD\")\r\n                            deudas.startDate = moment(deudas.startDate).format(\"YYYY-MM-DD\")\r\n                    }   \r\n                    catch (err) { }\r\n                }\r\n                \r\n            }\r\n        }\r\n        catch(err){}\r\n        \r\n        console.log(\"getShortLongTermDebts2\",dataResult);\r\n        \r\n        return dataResult;\r\n    }\r\n    \r\n\r\n    \r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                                 Retorna los balances por meses                                 */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getAverages(AcctReference) {\r\n        if(AcctReference.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            AcctReference: AcctReference\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                     Obtenemos una lista de las importaciones que se generen                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getListaImportaciones(PartyId) {\r\n        if(PartyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_IMPORTACIONES + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                 Obtenemos una lista de las exportaciones que se hayan generado                 */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getListaExportaciones(PartyId) {\r\n\r\n        if(PartyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_EXPORTACIONES + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                          Obtenemos los prestamos entrantes existentes                          */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPrestamosEntrantes(PartyId) {\r\n\r\n        if(PartyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_INGOING + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                    Obtenemos una lista de todos los presstamos que ya salen                    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPrestamosSalientes(PartyId) {\r\n\r\n        if(PartyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_OUTOGOING + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*               Obtenemos la lista de creditos que existen en la actualidad activos              */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCreditosExistentes(PartyId) {\r\n\r\n        if(PartyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_CREDITOS + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                                        Creditos en linea                                       */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getCreditosLine(PartyId) {\r\n\r\n        if(PartyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*     Nos devuelve todas las transacciones que ha realizado el usuario por un rango de fechas    */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getTransactions(AcctId, EndDt, StartDt) {\r\n\r\n        if(AcctId.length <= 0 || EndDt.length <= 0 || StartDt.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        // ejemplo del dataField\r\n        // AcctId=1001553287&EndDt=2021-10-16T09:32:51&StartDt=2021-09-16T00:00:00\r\n        let params = {\r\n            AcctId: AcctId,\r\n            EndDt: EndDt,\r\n            StartDt: StartDt,\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*                                  Obtenemos todos los prestamos                                 */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPrestamos(PartyId) {\r\n\r\n        if(PartyId.length <= 0 ){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: PartyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        var result = await this.get(url.URL_CORE_PRESTAMOS + \"?\" + data);\r\n\r\n        return result;\r\n    }\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*               Obtenemos toda la informacion del prestamos dentro de una actividad              */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    async getPrestamosInfo(AcctId) {\r\n\r\n        if(AcctId.length <= 0 ){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            AcctId: AcctId\r\n        }\r\n        let data = qs.stringify(params);\r\n\r\n        if(AcctId.length > 0){\r\n            var result = await this.get(url.URL_CORE_PRESTAMOS_INFORMATION + \"?\" + data);\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n    /*               Obtenemos toda la informacion del Reporting Services                            */\r\n    /* ---------------------------------------------------------------------------------------------- */\r\n\r\n    //https://qa.api.ob.banesco.com.pa/APIUtil/v1/reports/atoms?FECHA=20210930&CLIENTE=600167424\r\n\r\n    async getReportingServices(partyId) { //partyId -> numero del cliente en T24\r\n\r\n        if(partyId.length <= 0 ){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            FECHA: moment().add(-2,'months').format(\"YYYYMMDD\"), //preguntar pq la fecha no se puede cambiar\r\n            CLIENTE: partyId\r\n        }\r\n        let data = qs.stringify(params);\r\n        \r\n        var result = await this.get(url.URL_CORE_REPORTINGSERVICES + \"?\" + data);\r\n\r\n        console.log(\"getReportingServices\",result);   \r\n        \r\n            return result;\r\n\r\n        /*{\r\n    \"records\": [\r\n        {\r\n            \"FECHA\": \"20210930\",\r\n            \"T_CREDITO\": \"002\",\r\n            \"T_FACILIDAD\": \"05\",\r\n            \"CLASIFICACION\": \"02\",\r\n            \"LOC_EXT\": \"L\",\r\n            \"REGION\": \"014\",\r\n            \"CLIENTE_RUC\": \"8-805-442\",\r\n            \"TNO_EMPRESA\": \"06\",\r\n            \"NOMBRE_CLIENTE\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n            \"GRUPO_ECON\": \"ROBERTO ANTONIO SANCHEZ CONCEPCION\",\r\n            \"GRUPO_RUC\": \"8-805-442\",\r\n            \"T_RELACION\": \"P999\",\r\n            \"ACT_ECON\": \"2103\",\r\n            \"TASA_INT\": \"10.5\",\r\n            \"MONTO_IN\": 5400,\r\n            \"INT_PC\": 0,\r\n            \"FECHA_INI\": \"20150616\",\r\n            \"FECHA_FIN\": \"20230116\",\r\n            \"FECHA_REFIN\": \"NA\",\r\n            \"FECHA_RENEG\": \"20200817\",\r\n            \"G1\": \"0701\",\r\n            \"MONTO_G1\": 0,\r\n            \"G2\": \"NA\",\r\n            \"MONTO_G2\": 0,\r\n            \"G3\": \"NA\",\r\n            \"MONTO_G3\": 0,\r\n            \"G4\": \"NA\",\r\n            \"MONTO_G4\": 0,\r\n            \"G5\": \"NA\",\r\n            \"MONTO_G5\": 0,\r\n            \"PROV_REG\": 0,\r\n            \"PROV_NIIF\": 119.05,\r\n            \"PROV_PAIS\": 0,\r\n            \"SALDO\": 6401.61,\r\n            \"N_CUOTAS_VENCER\": \"7\",\r\n            \"X_VENCER30\": \"100.86\",\r\n            \"X_VENCER60\": \"100.86\",\r\n            \"X_VENCER90\": \"100.86\",\r\n            \"X_VENCER120\": \"100.86\",\r\n            \"X_VENCER180\": \"100.86\",\r\n            \"X_VENCER1A\": \"100.86\",\r\n            \"X_VENCER5A\": \"5796.45\",\r\n            \"X_VENCER10A\": \"0.00\",\r\n            \"X_VENCERM10A\": \"0.00\",\r\n            \"N_CUOTA_VENCIDAS\": \"0\",\r\n            \"VENCIDOS30\": \"0.00\",\r\n            \"VENCIDOS60\": \"0.00\",\r\n            \"VENCIDOS90\": \"0.00\",\r\n            \"VENCIDOS120\": \"0.00\",\r\n            \"VENCIDOS180\": \"0.00\",\r\n            \"VENCIDOS1A\": \"0.00\",\r\n            \"VENCIDOSM1A\": \"0.00\",\r\n            \"RANGO_MORA\": \"1. Al dÃ­a\",\r\n            \"DIAS_MORA\": 0,\r\n            \"PROX_CAP\": \"20211016\",\r\n            \"PER_CAP\": \"01\",\r\n            \"PROX_INT\": \"20211016\",\r\n            \"PER_INT\": \"01\",\r\n            \"CUOTA_XPAGAR\": \"100.86\",\r\n            \"SUCURSAL\": \"201\",\r\n            \"MONEDA\": \"USD\",\r\n            \"CUENTA_CONTABLE\": \"\",\r\n            \"PRODUCTO\": \"TDC\",\r\n            \"BANCA\": \"\",\r\n            \"SECTOR1\": \"PRESTACARD\",\r\n            \"SECTOR2\": \"\",\r\n            \"SECTOR3\": \"\",\r\n            \"SECTOR4\": \"PRESTACARD\",\r\n            \"PRODUCTO1\": \"TARJETA DE CREDITO CONSUMO\",\r\n            \"PRODUCTO2\": \"TDC\",\r\n            \"PRODUCTO3\": \"Prestacard Visa\",\r\n            \"NUM_OPS\": \"4466840182907004\",\r\n            \"NUM_CLIENTE\": \"600167424\",\r\n            \"CENTRO_COSTO\": \"\",\r\n            \"NUM_LINEA\": \"\",\r\n            \"COD_OFIC\": \"\",\r\n            \"COD_OFIC2\": \"\"\r\n        }\r\n    ],\r\n    \"Status\": {\r\n        \"StatusCode\": \"M0000\",\r\n        \"StatusDesc\": \"SUCCESS\"\r\n    }\r\n} */\r\n    }\r\n\r\n\r\n    //Retorna todos los colateralsId por numero de cliente\r\n    async getColaterals(partyId) { //Numero del cliente en T24\r\n\r\n        if(partyId.length <= 0 ){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            PartyId: partyId\r\n        }\r\n\r\n        let data = qs.stringify(params);\r\n\r\n        var dataResult = [];\r\n        try {\r\n\r\n            console.log(\"plage\");\r\n\r\n            //servicio retorna Pignorados\r\n            var result = await this.get(url.URL_CORE_PIGNORADO + \"?\" + data);\r\n\r\n            //Armamos la data a mostrar en pantalla\r\n            result.Collaterals.CollateralInfo.map(function (item, i) {\r\n                if (item.Collateral.CollateralKey.CollateralId !== null) {\r\n                    dataResult.push({ collateralId: item.Collateral.CollateralKey.CollateralId, facilityAmt: item.Collateral.CollateralAmt.Amt });\r\n                }\r\n\r\n            })\r\n        }\r\n        catch (err) {\r\n            console.error(\"URL_CORE_PIGNORADO\", err);\r\n        }\r\n\r\n        console.log(\"dataResult\", dataResult);\r\n        return dataResult;\r\n    }\r\n\r\n    // retorna Detalle de Garantias\r\n    async getWarrantyDetails(collateralId, warrantyType) { //Numero del id colateral ... warrytype = Muebles, Inmuebles, Otros, Depositos\r\n\r\n        if(collateralId.length <= 0 || warrantyType.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = {\r\n            CollateralId: collateralId,\r\n            InqType: warrantyType\r\n        }\r\n\r\n        let data = qs.stringify(params);\r\n\r\n        try {\r\n            //servicio retorna Pignorados\r\n            const result = await this.get(url.URL_CORE_COLLATERALS + \"?\" + data);\r\n            return result\r\n            //Armamos la data a mostrar en pantalla\r\n            /*result.Collaterals.CollateralInfo.map(function(item, i){\r\n                if(item.Collateral.CollateralKey.CollateralId!==null){\r\n                    dataResult.push({collateralId: item.Collateral.CollateralKey.CollateralId,facilityAmt: item.Collateral.CollateralAmt.Amt});\r\n                }                                \r\n            })*/\r\n        }\r\n        catch (err) {\r\n            console.error(\"URL_CORE_PIGNORADO\", err);\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    //retorna movimientos de cuentas\r\n    async getAccountMovements(partyId) { //Numero de Cliente de T24\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n        \r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\r\n            return;\r\n        }\r\n\r\n        var dataResult = [];\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n            params = { AcctReference: item.AcctKey.AcctReference }\r\n            data = qs.stringify(params);\r\n            try {\r\n                var year = 0;                \r\n                var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n                if(dtResult.Acct.AcctBal.length>0){                   \r\n                    // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                    var dt = {AcctId:item.AcctKey.AcctId, dataByYear:[]}\r\n                    for (var accItem of dtResult.Acct.AcctBal) {\r\n                        if(year !== Number(accItem.AverageBalanceDt.split(' ')[1])){\r\n                            year = Number(accItem.AverageBalanceDt.split(' ')[1]);\r\n                            dt.dataByYear.push({year,dataresult:[]})\r\n                        }\r\n                        \r\n                        var dtr = {\r\n                            \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]), \r\n                            \"month\": accItem.AverageBalanceDt.split(' ')[0],\r\n                            \"amount\": accItem.CurAmt.Amt,\r\n                            \"deposits\": 0\r\n                        }\r\n                        dt.dataByYear[dt.dataByYear.length-1].dataresult.push(dtr);\r\n                    }\r\n                    /*dtResult.Acct.AcctBal.map(function (accItem, i) {  \r\n                        if(year !== Number(accItem.AverageBalanceDt.split(' ')[1])){\r\n                            year = Number(accItem.AverageBalanceDt.split(' ')[1]);\r\n                            dt.dataByYear.push({year,dataresult:[]})\r\n                        }                                                \r\n                        dt.dataByYear[dt.dataByYear.length-1].dataresult.push({\r\n                            \"year\": Number(accItem.AverageBalanceDt.split(' ')[1]), \r\n                            \"month\": accItem.AverageBalanceDt.split(' ')[0],\r\n                            \"amount\": accItem.CurAmt.Amt\r\n                        }); \r\n                    }) */                                       \r\n                    dataResult.push(dt);\r\n                }\r\n            }\r\n            catch (err) { }\r\n        }\r\n\r\n            //Para sacar los depositos\r\n            //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\r\n            //servicio retorna los movimientos de cuentas del cliente                        \r\n        /*try{\r\n            for (var i = 0; i < dataResult.length; ++i) {\r\n                var dtResult = dataResult[i];\r\n                for (var p = 0; p < dtResult.dataByYear.length; ++p) {\r\n                    var dtYear = dtResult.dataByYear[p];\r\n                    var currentYear =dtYear.year;\r\n                    params = null; //dtResult.AcctId\r\n                    if(currentYear === Number(moment().format(\"YYYY\"))){\r\n                        params = { AcctId: dtResult.AcctId, EndDt:moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"), StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    else{\r\n                        params = { AcctId: dtResult.AcctId, EndDt:currentYear+\"-12-31T23:59:59\", StartDt:currentYear+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    data = qs.stringify(params);\r\n                    try{\r\n                        var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data); \r\n                        for (var depo of deposits.Trn) {\r\n                            if(depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0){\r\n                                var monthName = GetMontNameByNumber(moment(depo.EffDt).format('M'));\r\n                                var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                                    if(dataByMonth!==undefined){\r\n                        \r\n                                        dataByMonth.deposits= (Number(dataByMonth.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);\r\n                                    }\r\n                            }                    \r\n                        }        \r\n                    }\r\n                    catch(err){}\r\n                }\r\n            }\r\n        }\r\n        catch(err){}\r\n        */\r\n            //Para sacar los depositos\r\n            //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals?CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\r\n        \r\n        try{\r\n            for (var i = 0; i < dataResult.length; ++i) {\r\n                var dtResult = dataResult[i];\r\n                for (var p = 0; p < dtResult.dataByYear.length; ++p) {\r\n                    var dtYear = dtResult.dataByYear[p];\r\n                    var currentYear =dtYear.year;\r\n                    params = null; //dtResult.AcctId\r\n                    if(currentYear === Number(moment().format(\"YYYY\"))){\r\n                        params = { CUENTA: dtResult.AcctId, FECHA_INI:currentYear+\"0101\",FECHA_FIN:moment().format(\"YYYYMMDD\"),PROMEDIO:\"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    else{                        \r\n                        params = { CUENTA: dtResult.AcctId, FECHA_INI:currentYear+\"0101\",FECHA_FIN:currentYear+\"1231\",PROMEDIO:\"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                    }\r\n                    data = qs.stringify(params);\r\n                    try{\r\n                        var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data); \r\n                        for (var record of deposits.records) {\r\n                            console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\r\n                                \r\n                            var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\r\n                                var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                                if(dataByMonth!==undefined){                        \r\n                                        dataByMonth.deposits= (Number(record.monto)).toFixed(2);\r\n                                    }                    \r\n                        }        \r\n                    }\r\n                    catch(err){}\r\n                }\r\n            }\r\n        }\r\n        catch(err){}\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    async getAccountDeposits(partyId,year,month) { //Numero de Cliente de T24\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n        \r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n\r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            throw new Error(result.Status.StatusCode + \" - \" + result.Status.StatusDesc);\r\n            return;\r\n        }\r\n\r\n        var dataResult = [];\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n            try{\r\n                        year =Number(year).toString(\"00\");\r\n                        month = Number(month).toString(\"00\");\r\n                        var endDate = moment(year+\"-\"+month+\"-01\").endOf('month').format('DD');\r\n                \r\n                        params = { AcctId: item.AcctKey.AcctId, EndDt:year+\"-\"+month+\"-\"+endDate+\"T23:59:59\", StartDt:year+\"-\"+month+\"-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n                        \r\n                        data = qs.stringify(params);\r\n                        try{\r\n                            var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data); \r\n                            for (var depo of deposits.Trn) {\r\n                                if(depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0){\r\n                                    dataResult.push({deposits:Number(depo.TotalCurAmt.Amt)})    \r\n                                }\r\n                            }        \r\n                        }\r\n                        catch(err){}\r\n            }\r\n            catch(err){}\r\n        }\r\n            //Para sacar los depositos\r\n            //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\r\n        \r\n        return dataResult;\r\n    }\r\n\r\n    //retorna movimientos de cuentas\r\n    async getApcInfo(identification,idType) { //Numero de identificacion del cliente\r\n\r\n        if(identification.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        let typeofId = \"Cedula\";\r\n            switch(idType){\r\n                case \"CED\":{\r\n                    typeofId = \"Cedula\";\r\n                    break;\r\n                }\r\n                case \"RUC\":{\r\n                    typeofId = \"RUC\";\r\n                    break;\r\n                }\r\n                case \"PAS\":{\r\n                    typeofId = \"Pasaporte\";\r\n                    break;\r\n                }\r\n            }\r\n            \r\n\r\n        var tmpidentification = \"\";\r\n        identification.split('-').map((str)=> {\r\n            if(str.startsWith(\"0\")){\r\n                tmpidentification += str.replace(/^0+/, '')+\"-\";\r\n            }\r\n            else{\r\n                tmpidentification += str+\"-\";\r\n            }\r\n        })\r\n\r\n        identification = tmpidentification.substring(0,tmpidentification.length-1);        \r\n        var params = {\r\n            \"ConsultarAPC\": {\r\n                \"Model\": {\r\n                    \"EsPrueba\": 0,\r\n                    \"ForzarBusqueda\": 0,\r\n                    \"IdentificacionConsulta\": identification,//\"8-773-1899\",\r\n                    \"PasswordAPC\": \"Banesco19.\",\r\n                    \"TipoCliente\":typeofId,\r\n                    \"UltimusProcess\": 7,\r\n                    \"UsuarioAPC\": \"WTIBANESCO001\"\r\n                }\r\n            }\r\n        }\r\n\r\n        //servicio retorna la info de APC del cliente\r\n        const result = await this.post(url.URL_CORE_APCINFO, params);\r\n        \r\n        var dataResult = [];\r\n        try {\r\n            if(Array.isArray(result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC)){\r\n                //Armamos la data a mostrar en pantalla\r\n                result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC.map(function (item, i) {\r\n                    try {\r\n                        dataResult.push({\r\n                            \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"), \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\r\n                            \"initialAmount\": item.dc_monto_original, \"actualAmount\": item.dc_saldo_actual, \"asociation\": item.dc_nom_asoc, \"source\": item.dc_descr_corta_rela\r\n                        });\r\n                    }\r\n                    catch (err) { }\r\n                })\r\n            }\r\n            else{\r\n                var item =result.ConsultarAPCResponse.ConsultarAPCResult.DetCompromisoAPC.DetCompromisoAPC;\r\n                try {\r\n                    dataResult.push({\r\n                        \"year\": moment(item.dc_fec_inicio_rel).format(\"YYYY\"), \"month\": moment(item.dc_fec_inicio_rel).format(\"MMMM\"),\r\n                        \"initialAmount\": item.dc_monto_original, \"actualAmount\": item.dc_saldo_actual, \"asociation\": item.dc_nom_asoc, \"source\": item.dc_descr_corta_rela\r\n                    });\r\n                }\r\n                catch (err) { }\r\n            }\r\n            \r\n        }\r\n        catch (err) { console.error(err); }\r\n\r\n        return dataResult;\r\n    }\r\n\r\n    async getEconomicGroup(partyId) { //partyId -> numero del cliente en T24\r\n        try{\r\n            let params = {PartyId: partyId}\r\n            let data = qs.stringify(params);\r\n            \r\n            var result = await this.get(url.URL_CORE_COMPANIESRELATIONS + \"?\" + data);\r\n    \r\n            console.log(\"getEconomicGroup\",result);\r\n            \r\n            return result.PartyPartyRels.PartyPartyRel[0].PartyPartyRelInfo.PartyRelName[0];    \r\n        }\r\n        catch(err){}\r\n        if(partyId.length <= 0 ){\r\n            return undefined;\r\n        }\r\n        \r\n        return null;\r\n        \r\n    }\r\n\r\n    async getReciprocity(partyId, year, month){\r\n\r\n            if(partyId.length <= 0){\r\n                return undefined;\r\n            }\r\n\r\n            year=Number(year);\r\n            \r\n            let params = { PartyId: partyId }\r\n            let data = qs.stringify(params);\r\n            \r\n            //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n        \r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            return undefined;\r\n        }\r\n\r\n        var resultToReturn={averageAmt:0 ,deposits:0}\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n            params = { AcctReference: item.AcctKey.AcctReference }\r\n            data = qs.stringify(params);\r\n            try {\r\n                var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n                if(dtResult.Acct.AcctBal.length>0){                   \r\n                    // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                    for (var accItem of dtResult.Acct.AcctBal) {\r\n                        var dMonth = accItem.AverageBalanceDt.split(' ')[0]\r\n                        if(Number(accItem.AverageBalanceDt.split(' ')[1]) === year && dMonth.indexOf(month) >= 0){\r\n                            resultToReturn.averageAmt = (Number(resultToReturn.averageAmt)+Number(accItem.CurAmt.Amt)).toFixed(2);  \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (err) { }\r\n\r\n            //Para sacar los depositos\r\n            try{\r\n                    var currentYear =year;                   \r\n                    var monthNum=GetMontNumberByName(month);\r\n                    var endDate = moment(year+\"-\"+monthNum+\"-01\").endOf('month').format('DD'); params = null; //dtResult.AcctId\r\n                    params = { CUENTA: item.AcctKey.AcctId, FECHA_INI:currentYear+monthNum+\"01\",FECHA_FIN:currentYear+monthNum+endDate,PROMEDIO:\"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n             \r\n                    data = qs.stringify(params);\r\n                    try{\r\n                        var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data); \r\n                        for (var record of deposits.records) {\r\n                            //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\r\n                                \r\n                            //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\r\n                                //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                                //if(dataByMonth!==undefined){                        \r\n                                    resultToReturn.deposits=  (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2);\r\n                                  //  }                    \r\n                        }        \r\n                    }\r\n                    catch(err){}\r\n            }\r\n            catch(err){}\r\n    \r\n        }            \r\n        return resultToReturn;\r\n    }\r\n    \r\n    async getReciprocityByYear(partyId, year){\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        year=Number(year);\r\n        \r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n        \r\n        //servicio retorna las cuentas del cliente\r\n    var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n    \r\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n        return undefined;\r\n    }\r\n\r\n    var resultToReturn={averageAmt:0 ,deposits:0}\r\n    for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n        var item = result.Accounts.Acct[i];\r\n        params = { AcctReference: item.AcctKey.AcctReference }\r\n        data = qs.stringify(params);\r\n        try {\r\n            var dtResult = await this.get(url.URL_CORE_AVERAGES + \"?\" + data);\r\n            if(dtResult.Acct.AcctBal.length>0){                   \r\n                // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                for (var accItem of dtResult.Acct.AcctBal) {\r\n                    //var dMonth = accItem.AverageBalanceDt.split(' ')[0]\r\n                    if(Number(accItem.AverageBalanceDt.split(' ')[1]) === year){\r\n                        resultToReturn.averageAmt = (Number(resultToReturn.averageAmt)+Number(accItem.CurAmt.Amt)).toFixed(2);  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        //Para sacar los depositos\r\n        try{\r\n                var currentYear =year;                   \r\n                var monthNum=year === Number(moment().format(\"YYYY\"))?moment().format(\"MM\"):\"12\";\r\n                var endDate = moment(year+\"-\"+monthNum+\"-01\").endOf('month').format('DD'); params = null; //dtResult.AcctId\r\n                params = { CUENTA: item.AcctKey.AcctId, FECHA_INI:currentYear+\"0101\",FECHA_FIN:currentYear+monthNum+endDate,PROMEDIO:\"S\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n         \r\n                data = qs.stringify(params);\r\n                try{\r\n                    var deposits = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data); \r\n                    for (var record of deposits.records) {\r\n                        //console.log(\"depositsMonth\",record.Fecha.toString().substring(4,6));\r\n                            \r\n                        //var monthName = GetMontNameByNumber(record.Fecha.toString().substring(4,6));\r\n                            //var dataByMonth = dtYear.dataresult.find(x => x.month.indexOf(monthName)>= 0);\r\n                            //if(dataByMonth!==undefined){                        \r\n                                resultToReturn.deposits=  (Number(resultToReturn.deposits) + Number(record.monto)).toFixed(2);\r\n                              //  }                    \r\n                    }        \r\n                }\r\n                catch(err){}\r\n        }\r\n        catch(err){}\r\n\r\n    }            \r\n    return resultToReturn;\r\n    }   \r\n\r\n    async getDeposits(partyId, year, month){\r\n\r\n        //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/balances/totals\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        year=Number(year);\r\n        \r\n        let params = { PartyId: partyId }\r\n        let data = qs.stringify(params);\r\n        \r\n        //servicio retorna las cuentas del cliente\r\n        var result = await this.get(url.URL_CORE_ACCOUNTSPARTIES + \"?\" + data);\r\n        \r\n        if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n            return undefined;\r\n        }\r\n\r\n        var resultToReturn={averageAmt:0 ,deposits:0}\r\n        for (var i = 0; i < result.Accounts.Acct.length; i++) {\r\n            var item = result.Accounts.Acct[i];\r\n\r\n            //CUENTA=120000086315&FECHA_INI=20220101&FECHA_FIN=20220330&PROMEDIO=S\r\n            var endDate = moment(year+\"-12-01\").endOf('month').format('DD');\r\n            params = { CUENTA: item.AcctKey.AcctId, FECHA_INI:year+\"0101\", FECHA_FIN:year+\"12\"+endDate } \r\n            data = qs.stringify(params);\r\n            try {\r\n                var dtResult = await this.get(url.URL_CORE_BALANCETOTALS + \"?\" + data);\r\n                if(dtResult.Acct.AcctBal.length>0){                   \r\n                    // queda pendiente el tema de los depositos con el servicio de banesco  \r\n                    for (var accItem of dtResult.Acct.AcctBal) {\r\n                        if(Number(accItem.AverageBalanceDt.split(' ')[1]) === year){\r\n                            resultToReturn.averageAmt= (Number(resultToReturn.averageAmt)+Number(accItem.CurAmt.Amt)).toFixed(2);  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (err) { }\r\n\r\n        //Para sacar los depositos\r\n        //https://qa.api.ob.banesco.com.pa/acct/v1/accounts/transactions?AcctId=1000129123\r\n        //servicio retorna los movimientos de cuentas del cliente                        \r\n        try{\r\n            //var monthN=GetMontNumberByName(month);\r\n            var endDate = moment(year+\"-12-01\").endOf('month').format('DD');\r\n            params = { AcctId: item.AcctKey.AcctId, EndDt:year+\"-12-\"+endDate+\"T23:59:59\", StartDt:year+\"-01-01T00:00:00\" } //EndDt=2021-10-31T09:32:51&StartDt=2021-05-01T00:00:00\r\n            data = qs.stringify(params);\r\n            var deposits = await this.get(url.URL_CORE_TRANSACCTIONS + \"?\" + data); \r\n            console.log(\"getReciprocityByYear\",deposits);\r\n            for (var depo of deposits.Trn) {\r\n                if(depo.Desc.indexOf(\"CREDITO A CONTRATO\") < 0 && depo.Desc.indexOf(\"Intereses - Capitalizables\") < 0){\r\n                    resultToReturn.deposits= (Number(resultToReturn.deposits) + Number(depo.TotalCurAmt.Amt)).toFixed(2);                                   \r\n                }                    \r\n            }\r\n        }\r\n        catch(err){}\r\n    }            \r\n    return resultToReturn;\r\n    \r\n    }\r\n\r\n    /// Obtener el serial de la linea -- Parametros: NumeroT24 y Codigo Facilidad\r\n    async getLineSerial(partyId, facilityTypeCode){\r\n\r\n        try{\r\n            //partyId=\"800048231\"; facilityTypeCode=\"10000\"\r\n            \r\n            if(partyId.length <= 0){\r\n                return undefined;\r\n            }\r\n                    \r\n            let params = { PartyId: partyId }\r\n            let data = qs.stringify(params);\r\n                    \r\n            //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018\r\n    \r\n            //servicio retorna las cuentas del cliente\r\n            var result = await this.get(url.URL_CORE_CREDITOS_LINE + \"?\" + data);                \r\n            \r\n            var dataResults = result.Party.PartyInfo.CreditLine.filter(x => x.CreditLineId.split(\".\")[1].indexOf(facilityTypeCode) >= 0)\r\n            \r\n            var lineNumber=1;\r\n            dataResults.forEach((dt)=>{\r\n                lineNumber = Number(dt.CreditLineId.split(\".\")[2])>lineNumber?Number(dt.CreditLineId.split(\".\")[2]):lineNumber;            \r\n            })\r\n                \r\n            while(facilityTypeCode.length < 7){\r\n                facilityTypeCode=\"0\"+facilityTypeCode;\r\n            }\r\n            \r\n            if(lineNumber.toString().length<2){\r\n                lineNumber = (\"0\" + (lineNumber+1).toString()).slice(-2);            \r\n            }\r\n            else{\r\n                lineNumber=lineNumber.toString();\r\n            }\r\n\r\n            var lineserial = partyId + \".\" +facilityTypeCode+\".\"+lineNumber;\r\n            console.log(\"lineas\",lineserial);\r\n\r\n            return lineserial;\r\n        }\r\n        catch(err){}\r\n\r\n        return null;\r\n    }\r\n    ///Creacion de Linea para desembolso\r\n    //numero de linea = numero de cliente + tipo de linea + serial === EJ: 600197109.0011000.01\r\n    \r\n    //https://qa.api.ob.banesco.com.pa/APIUtil/v1/catalogs?catalog_name=LIMIT REFERENCE&parent_catalog_name=&keyword=  \r\n    //===> Catalogo de Tipo de Lineas\r\n    \r\n    //https://qa.api.ob.banesco.com.pa/party/v1/parties/credits?PartyId=600088018  \r\n    //===> Obtenemos todas las lineas y tomamos el total + 1 => Mas serial\r\n    async newline(partyId, facilityType){\r\n\r\n        if(partyId.length <= 0){\r\n            return undefined;\r\n        }\r\n\r\n        // Garantia loans/Colateral\r\n        //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/collaterals\r\n    \r\n        // Desembolso\r\n        //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans\r\n        \r\n        //lineas\r\n        //https://qa.api.ob.banesco.com.pa/acctloan/v1/loans/credits/lines/limits\r\n        var data = \r\n        {\r\n     \"CreditLine\": {\r\n       \"Activity\": {\r\n         \"Cod\": \"1413\"  //-> Cod. Actividad Economica\r\n       },\r\n       \"AuthType\": \"99\", //-> ??\r\n       \"AutonomyCode\": {\r\n         \"Cod\": \"9999\" //-> Codigo de la Autonomia No lo tenemos\r\n       },\r\n       \"AutonomyUser\": \"1\", //-> Usuario de Autonomia que esta login\r\n       \"CreditLimit\": {\r\n         \"AdviseAmt\": {\r\n           \"Amt\": \"25,000.00\", //-> Monto de La Facilidad\r\n           \"CurCode\":\"USD\" //-> Codigo Moneda\r\n         },\r\n         \"Allow\":{\r\n             \"ProductData\":{\r\n                \"Product\":{\r\n                    \"Cod\":\"1000\", // -> Tipo de Facilidad\r\n                }\r\n             }\r\n         },\r\n         \"AllowNetting\": \"N\", // -> ?? FIJO\r\n         \"ApprovalDt\": \"2022-02-02\", // -> Fecha de Aprobacion\r\n         \"AvailDt\": \"2022-02-02\",    // -> Fecha de Propuesta\r\n         \"AvailMarker\": \"Y\", // -> ?? FIJO\r\n         \"CountryRisk\": [ // -> Pais de riesgo\r\n           {\r\n             \"Country\": {\r\n               \"CountryCode\": \"PA\" // -> Codigo Pais de riesgo\r\n             },\r\n             \"Percent\": \"100\" // -> ??\r\n           }\r\n         ],\r\n         \"CreditLimitKey\": {\r\n           \"CreditLimitId\": \"600197109.0011000.01\" // -> numero de cliente + tipo de linea + mas serial\r\n         },\r\n         \"CurCode\": \"USD\", //-> Tipo de Moneda\r\n         \"DeadLineDt\": \"2022-02-02\",  //Fecha del dia\r\n         \"DueDt\": \"2023-02-02\",     //Fecha de expiracion\r\n         \"LimitAmt\": {\r\n           \"Amt\": \"25,000.00\" //-> Monto de La Linea\r\n         },\r\n         \"LimitAmtType\": \"FIXED\", //-> FIXED/VARIABLE\r\n         \"LimitReject\": \"Y\", // -> YES/NO ??\r\n         \"MaxCurAmt\": {\r\n           \"Amt\": \"25,000.00\" //-> Monto de La Linea\r\n         },\r\n         \"ProposalDt\": \"2022-02-02\", //Fecha Propuesta\r\n         \"ReviewDt\": \"2023-02-02\", //Fecha Revision\r\n         \"ReviewFreq\":{\r\n             \"FreqValue\":\"20230330M1230\" // YYYY MM DD ... codigo A/M/D ... cantidad de meses, el dia especifico\r\n         },\r\n         \"Signatories\": {\r\n           \"Signatory\": [\r\n             {\r\n               \"PartyKey\": {\r\n                 \"PartyId\": \"45469\" //Numero del Cliente T24\r\n               }\r\n             }\r\n           ]\r\n         }\r\n       }\r\n     }\r\n   }\r\n   \r\n   var result = await this.put(url.URL_CORE_LINES, data);\r\n\r\n    \r\n    if (result.Status.StatusCode !== OPTs.ResponseT24_STATUSOK) {\r\n        return undefined;\r\n    }\r\n\r\n    \r\n    return result;\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}