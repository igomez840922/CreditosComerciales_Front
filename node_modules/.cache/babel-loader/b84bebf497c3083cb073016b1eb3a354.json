{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\Dashboard\\\\scatter-analytics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport ReactApexChart from \"react-apexcharts\";\nimport { Card, CardBody } from \"reactstrap\";\nimport * as moment from 'moment';\nimport { formatCurrency, translationHelpers } from '../../helpers';\nimport { BackendServices } from \"../../services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ScatterChart = props => {\n  _s();\n\n  const [series, setseries] = useState([{\n    name: \"Linea de Crédito\",\n    data: [[2, 5], [7, 2], [4, 3], [5, 2], [6, 1], [1, 3], [2, 7], [8, 0], [9, 8], [6, 0], [10, 1]]\n  }, {\n    name: \"Renovación con Cambios\",\n    data: [[15, 13], [7, 11], [5, 8], [9, 17], [11, 4], [14, 12], [13, 14], [8, 9], [4, 13], [7, 7], [5, 8], [30, 3]]\n    /*[dias 1-30, count de ese dia]*/\n\n  }]);\n  const [options, setoptions] = useState({\n    chart: {\n      height: 350,\n      type: 'scatter',\n      toolbar: {\n        show: false\n      },\n      zoom: {\n        enabled: true,\n        type: 'xy'\n      }\n    },\n    colors: ['#3b5de7', '#45cb85'],\n    xaxis: {\n      tickAmount: 10\n    },\n    legend: {\n      position: 'top'\n    },\n    yaxis: {\n      tickAmount: 7\n    }\n  });\n  const backendServices = new BackendServices();\n  const [tc, tr] = translationHelpers('commercial_credit', 'translation');\n  React.useEffect(() => {\n    inicialize();\n  }, []);\n\n  function inicialize() {\n    backendServices.getBpmStatistics().then(resp => {\n      const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let nowMonth = moment().month();\n      let beforeMonth = moment().add(-1, 'months').month();\n      let nowDate = resp.filter(statistics => moment(statistics.date).month() === nowMonth);\n      let beforeDate = resp.filter(statistics => moment(statistics.date).month() === beforeMonth);\n      nowDate = groupBy(nowDate.map(statistics => ({ ...statistics,\n        date: moment(statistics.date).format(\"DD/MM/YYYY\")\n      })), 'date');\n      beforeDate = groupBy(beforeDate.map(statistics => ({ ...statistics,\n        date: moment(statistics.date).format(\"DD/MM/YYYY\")\n      })), 'date');\n      let nowSeries = nowDate.map($date => [moment(moment($date.at(0).date).format(\"DD/MM/YYYY\")).date(), $date.length]);\n      let beforeSeries = beforeDate.map($date => [moment(moment($date.at(0).date).format(\"DD/MM/YYYY\")).date(), $date.length]);\n      let series = [{\n        name: tr(months[nowMonth]),\n        data: nowSeries\n      }, {\n        name: tr(months[beforeMonth]),\n        data: beforeSeries\n      }];\n      setseries(series);\n    }).catch(err => {});\n  }\n  /**\r\n   * groupBy, agrupa los items de un JSON\r\n   * @param {Array} collection \r\n   * @param {string} property \r\n   * @returns {Array}\r\n   */\n\n\n  function groupBy(collection, property) {\n    var i = 0,\n        val,\n        index,\n        values = [],\n        result = [];\n\n    for (; i < collection.length; i++) {\n      val = collection[i][property];\n      index = values.indexOf(val);\n      if (index > -1) result[index].push(collection[i]);else {\n        values.push(val);\n        result.push([collection[i]]);\n      }\n    }\n\n    return result;\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"card-title mb-4\",\n          children: \"Comportamiento en el Mes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n          options: options,\n          series: series,\n          height: \"225\",\n          type: \"scatter\",\n          className: \"apex-charts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ScatterChart, \"H+f0qJjT+l7saAvl0wjG3Dlvx38=\");\n\n_c = ScatterChart;\nexport default ScatterChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterChart\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/Dashboard/scatter-analytics.js"],"names":["React","useState","useRef","ReactApexChart","Card","CardBody","moment","formatCurrency","translationHelpers","BackendServices","ScatterChart","props","series","setseries","name","data","options","setoptions","chart","height","type","toolbar","show","zoom","enabled","colors","xaxis","tickAmount","legend","position","yaxis","backendServices","tc","tr","useEffect","inicialize","getBpmStatistics","then","resp","months","nowMonth","month","beforeMonth","add","nowDate","filter","statistics","date","beforeDate","groupBy","map","format","nowSeries","$date","at","length","beforeSeries","catch","err","collection","property","i","val","index","values","result","indexOf","push"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport ReactApexChart from \"react-apexcharts\"\r\nimport {\r\n    Card,\r\n    CardBody,\r\n} from \"reactstrap\"\r\nimport * as moment from 'moment';\r\nimport { formatCurrency, translationHelpers } from '../../helpers';\r\nimport { BackendServices } from \"../../services\";\r\n\r\nconst ScatterChart = (props) => {\r\n\r\n    const [series, setseries] = useState([{\r\n        name: \"Linea de Crédito\",\r\n        data: [\r\n            [2, 5], [7, 2], [4, 3], [5, 2], [6, 1], [1, 3], [2, 7], [8, 0], [9, 8], [6, 0], [10, 1]]\r\n    }, {\r\n        name: \"Renovación con Cambios\",\r\n        data: [\r\n            [15, 13], [7, 11], [5, 8], [9, 17], [11, 4], [14, 12], [13, 14], [8, 9], [4, 13], [7, 7], [5, 8], [30, 3]]\r\n        /*[dias 1-30, count de ese dia]*/\r\n    }]);\r\n\r\n    const [options, setoptions] = useState({\r\n        chart: {\r\n            height: 350,\r\n            type: 'scatter',\r\n            toolbar: {\r\n                show: false\r\n            },\r\n            zoom: {\r\n                enabled: true,\r\n                type: 'xy'\r\n            }\r\n        },\r\n\r\n        colors: ['#3b5de7', '#45cb85'],\r\n        xaxis: {\r\n            tickAmount: 10,\r\n\r\n        },\r\n        legend: {\r\n            position: 'top',\r\n        },\r\n        yaxis: {\r\n            tickAmount: 7\r\n        }\r\n    });\r\n\r\n    const backendServices = new BackendServices();\r\n    const [tc, tr] = translationHelpers('commercial_credit', 'translation');\r\n\r\n\r\n    React.useEffect(() => {\r\n        inicialize()\r\n    }, []);\r\n\r\n    function inicialize() {\r\n        backendServices.getBpmStatistics().then(resp => {\r\n\r\n            const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n            let nowMonth = moment().month();\r\n            let beforeMonth = moment().add(-1, 'months').month();\r\n\r\n            let nowDate = resp.filter(statistics => moment(statistics.date).month() === nowMonth);\r\n            let beforeDate = resp.filter(statistics => moment(statistics.date).month() === beforeMonth);\r\n\r\n            nowDate = groupBy(nowDate.map(statistics => ({ ...statistics, date: moment(statistics.date).format(\"DD/MM/YYYY\") })), 'date');\r\n            beforeDate = groupBy(beforeDate.map(statistics => ({ ...statistics, date: moment(statistics.date).format(\"DD/MM/YYYY\") })), 'date');\r\n\r\n            let nowSeries = nowDate.map($date => [moment(moment($date.at(0).date).format(\"DD/MM/YYYY\")).date(), $date.length]);\r\n            let beforeSeries = beforeDate.map($date => [moment(moment($date.at(0).date).format(\"DD/MM/YYYY\")).date(), $date.length]);\r\n\r\n            let series = [\r\n                {\r\n                    name: tr(months[nowMonth]),\r\n                    data: nowSeries\r\n                },\r\n                {\r\n                    name: tr(months[beforeMonth]),\r\n                    data: beforeSeries\r\n                }\r\n            ]\r\n            setseries(series);\r\n        }).catch(err => { })\r\n    }\r\n\r\n    /**\r\n     * groupBy, agrupa los items de un JSON\r\n     * @param {Array} collection \r\n     * @param {string} property \r\n     * @returns {Array}\r\n     */\r\n    function groupBy(collection, property) {\r\n        var i = 0, val, index,\r\n            values = [], result = [];\r\n        for (; i < collection.length; i++) {\r\n            val = collection[i][property];\r\n            index = values.indexOf(val);\r\n            if (index > -1)\r\n                result[index].push(collection[i]);\r\n            else {\r\n                values.push(val);\r\n                result.push([collection[i]]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardBody>\r\n                    <h4 className=\"card-title mb-4\">Comportamiento en el Mes</h4>\r\n\r\n                    <ReactApexChart\r\n                        options={options}\r\n                        series={series}\r\n                        height=\"225\"\r\n                        type=\"scatter\"\r\n                        className=\"apex-charts\"\r\n                    />\r\n\r\n                </CardBody>\r\n            </Card>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ScatterChart"]},"metadata":{},"sourceType":"module"}