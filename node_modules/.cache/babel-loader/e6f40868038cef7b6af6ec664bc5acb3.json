{"ast":null,"code":"import moment from \"moment\";\nimport { BackendServices, CoreServices } from \"../../../../services\";\nexport default class previewEscrow {\n  constructor(dataSession) {\n    this.backendServices = new BackendServices();\n    this.validateRoute = false;\n    this.flowType = [{\n      Code: '1',\n      Description: 'Muy Urgente'\n    }, {\n      Code: '2',\n      Description: 'Urgencia Moderada'\n    }, {\n      Code: '3',\n      Description: 'Importante'\n    }, {\n      Code: '4',\n      Description: 'Baja Urgencia'\n    }, {\n      Code: '5',\n      Description: 'Sin Urgencia'\n    }];\n    // super();\n    this.saveDataSession(dataSession);\n  }\n\n  saveDataSession(dataSession) {\n    var _this$location, _this$location2;\n\n    sessionStorage.setItem('locationData', JSON.stringify(dataSession));\n\n    if (((_this$location = this.location) === null || _this$location === void 0 ? void 0 : _this$location.data) !== null && ((_this$location2 = this.location) === null || _this$location2 === void 0 ? void 0 : _this$location2.data) !== undefined) {\n      var _this$location3, _this$location4;\n\n      if (((_this$location3 = this.location) === null || _this$location3 === void 0 ? void 0 : _this$location3.data.transactionId) === undefined || ((_this$location4 = this.location) === null || _this$location4 === void 0 ? void 0 : _this$location4.data.transactionId.length) <= 0) {\n        //this.location?.data.transactionId = 0;\n        //checkAndCreateProcedure(this.location?.data);\n        this.validateRoute = true;\n      } else {\n        var _this$location5, _this$location6, _this$location7;\n\n        sessionStorage.setItem('this.locationData', JSON.stringify((_this$location5 = this.location) === null || _this$location5 === void 0 ? void 0 : _this$location5.data));\n        this.locationData = (_this$location6 = this.location) === null || _this$location6 === void 0 ? void 0 : _this$location6.data;\n        this.dataSession = (_this$location7 = this.location) === null || _this$location7 === void 0 ? void 0 : _this$location7.data;\n      }\n    } else {\n      //chequeamos si tenemos guardado en session\n      var result = sessionStorage.getItem('locationData');\n\n      if (result !== undefined && result !== null) {\n        result = JSON.parse(result);\n        this.locationData = result;\n        this.dataSession = result;\n      }\n    }\n\n    this.LoadNumeroFideicomiso();\n    this.loadCustomerID();\n    this.loadDataGeneral();\n    this.loadDataIGR();\n    this.loadDataEnvironmentAspects();\n  }\n\n  async LoadFiduciario() {\n    return await this.backendServices.consultarSeccionServiciosFiduciario(this.locationData.transactionId);\n  }\n\n  LoadOtherFiduciario() {\n    return this.backendServices.consultarSeccionOtrosServiciosFiduciario(this.locationData.transactionId);\n  }\n\n  async LoadNumeroFideicomiso() {\n    this.basaFid = await this.backendServices.consultarNumeroFideicomiso(this.locationData.transactionId).then(resp => resp[0].trustName);\n  }\n\n  async loadCustomerID() {\n    this.customerID = await this.backendServices.consultPrincipalDebtor(this.locationData.transactionId).then(resp => resp.customerNumberT24);\n  }\n\n  async loadDataGeneral() {\n    this.dataGeneral = await this.backendServices.consultGeneralDataPropCred(this.locationData.transactionId).then(resp => {\n      var _this$flowType$find;\n\n      return { ...resp[0],\n        requestDate: this.formatDate(resp[0].requestDate),\n        lastRequestDate: this.formatDate(resp[0].lastRequestDate),\n        nextRevisionDate: this.formatDate(resp[0].nextRevisionDate),\n        proposedExpirationDate: this.formatDate(resp[0].proposedExpirationDate),\n        flow: (_this$flowType$find = this.flowType.find(flowType => flowType.Code === resp[0].flow)) === null || _this$flowType$find === void 0 ? void 0 : _this$flowType$find.Description\n      };\n    });\n  }\n\n  async loadDataIGR() {\n    this.dataGeneralIGR = await this.backendServices.consultGeneralDataIGR(this.locationData.transactionId);\n  }\n\n  async loadDataEnvironmentAspects() {\n    this.dataGeneralEnvironmentAspects = await this.backendServices.consultEnvironmentalAspectsIGR(this.locationData.transactionId).then(resp => resp.environmentalAspectsDTO);\n  }\n\n  formatDate(date) {\n    return date ? moment(date).format(\"DD/MM/YYYY\") : '';\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/CommercialCredit/10_Fideicomiso/Relacionfiduciaria/preview.model.js"],"names":["moment","BackendServices","CoreServices","previewEscrow","constructor","dataSession","backendServices","validateRoute","flowType","Code","Description","saveDataSession","sessionStorage","setItem","JSON","stringify","location","data","undefined","transactionId","length","locationData","result","getItem","parse","LoadNumeroFideicomiso","loadCustomerID","loadDataGeneral","loadDataIGR","loadDataEnvironmentAspects","LoadFiduciario","consultarSeccionServiciosFiduciario","LoadOtherFiduciario","consultarSeccionOtrosServiciosFiduciario","basaFid","consultarNumeroFideicomiso","then","resp","trustName","customerID","consultPrincipalDebtor","customerNumberT24","dataGeneral","consultGeneralDataPropCred","requestDate","formatDate","lastRequestDate","nextRevisionDate","proposedExpirationDate","flow","find","dataGeneralIGR","consultGeneralDataIGR","dataGeneralEnvironmentAspects","consultEnvironmentalAspectsIGR","environmentalAspectsDTO","date","format"],"mappings":"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","sourcesContent":["import moment from \"moment\";\r\nimport { BackendServices, CoreServices } from \"../../../../services\";\r\n\r\nexport default class previewEscrow {\r\n\r\n    backendServices = new BackendServices();\r\n    serviciosFiduciario;\r\n    otherServiciosFiduciario;\r\n    locationData;\r\n    basaFid;\r\n    dataSession;\r\n    validateRoute = false;\r\n    customerID;\r\n    dataGeneral;\r\n    dataGeneralIGR;\r\n    dataGeneralEnvironmentAspects;\r\n\r\n    flowType = [{ Code: '1', Description: 'Muy Urgente' }, { Code: '2', Description: 'Urgencia Moderada' }, { Code: '3', Description: 'Importante' }, { Code: '4', Description: 'Baja Urgencia' }, { Code: '5', Description: 'Sin Urgencia' }]\r\n\r\n\r\n    constructor(dataSession) {\r\n        // super();\r\n        this.saveDataSession(dataSession)\r\n    }\r\n\r\n    saveDataSession(dataSession) {\r\n        sessionStorage.setItem('locationData', JSON.stringify(dataSession));\r\n        if (this.location?.data !== null && this.location?.data !== undefined) {\r\n            if (this.location?.data.transactionId === undefined || this.location?.data.transactionId.length <= 0) {\r\n                //this.location?.data.transactionId = 0;\r\n                //checkAndCreateProcedure(this.location?.data);\r\n                this.validateRoute = true\r\n            }\r\n            else {\r\n                sessionStorage.setItem('this.locationData', JSON.stringify(this.location?.data));\r\n                this.locationData = this.location?.data;\r\n                this.dataSession = this.location?.data;\r\n            }\r\n        }\r\n        else {\r\n            //chequeamos si tenemos guardado en session\r\n            var result = sessionStorage.getItem('locationData');\r\n            if (result !== undefined && result !== null) {\r\n                result = JSON.parse(result);\r\n                this.locationData = result;\r\n                this.dataSession = result;\r\n            }\r\n        }\r\n        this.LoadNumeroFideicomiso();\r\n        this.loadCustomerID();\r\n        this.loadDataGeneral();\r\n        this.loadDataIGR();\r\n        this.loadDataEnvironmentAspects();\r\n    }\r\n\r\n    async LoadFiduciario() {\r\n        return await this.backendServices.consultarSeccionServiciosFiduciario(this.locationData.transactionId);\r\n    }\r\n\r\n    LoadOtherFiduciario() {\r\n        return this.backendServices.consultarSeccionOtrosServiciosFiduciario(this.locationData.transactionId);\r\n    }\r\n\r\n    async LoadNumeroFideicomiso() {\r\n        this.basaFid = await this.backendServices.consultarNumeroFideicomiso(this.locationData.transactionId).then(resp => resp[0].trustName);\r\n    }\r\n\r\n    async loadCustomerID() {\r\n        this.customerID = await this.backendServices.consultPrincipalDebtor(this.locationData.transactionId).then(resp => resp.customerNumberT24);\r\n    }\r\n\r\n    async loadDataGeneral() {\r\n        this.dataGeneral = await this.backendServices.consultGeneralDataPropCred(this.locationData.transactionId).then(resp => ({ ...resp[0], requestDate: this.formatDate(resp[0].requestDate), lastRequestDate: this.formatDate(resp[0].lastRequestDate), nextRevisionDate: this.formatDate(resp[0].nextRevisionDate), proposedExpirationDate: this.formatDate(resp[0].proposedExpirationDate), flow: this.flowType.find(flowType => flowType.Code === resp[0].flow)?.Description }));\r\n    }\r\n\r\n    async loadDataIGR() {\r\n        this.dataGeneralIGR = await this.backendServices.consultGeneralDataIGR(this.locationData.transactionId);\r\n    }\r\n    async loadDataEnvironmentAspects() {\r\n        this.dataGeneralEnvironmentAspects = await this.backendServices.consultEnvironmentalAspectsIGR(this.locationData.transactionId).then(resp => resp.environmentalAspectsDTO)\r\n    }\r\n\r\n    formatDate(date) {\r\n        return date ? moment(date).format(\"DD/MM/YYYY\") : '';\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}