{"ast":null,"code":"import TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\nimport { GetDashBoardModel } from \"../../models\";\nimport ApiServiceBpm from \"../ApiServiceBpm\";\nimport * as url from \"../../helpers/url_helper\";\nimport * as opt from \"../../helpers/options_helper\";\nimport qs from \"qs\";\nexport default class Services extends ApiServiceBpm {\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  //retorna la bandeja de entrada\n  async getDashBoard(params) {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    return GetDashBoardModel.fromJson(result);\n  } //retorna las tareas de un proceso especifico\n\n\n  async getTasksByPrcess(instanceId) {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    result = GetDashBoardModel.fromJson(result);\n    return result.results.filter(e => e.instanceId === instanceId)[0];\n  } //crea e inicia una nueva instancia de Proceso y actividad\n\n\n  async startProcess() {\n    //Estructura de la data que se le debe pasar\n    var data = {\n      \"containerId\": url.WORD_BPM_CONTAINERID,\n      \"processId\": url.WORD_BPM_PROCESSID,\n      \"parametros\": {\n        \"values\": {\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\n          \"activityId\": \"0\",\n          \"transactionId\": \"\",\n          \"customerId\": \"\",\n          \"applicationNumber\": \"\",\n          \"procedureNumber\": \"\",\n          \"requestId\": \"\",\n          \"facilityId\": \"\"\n        }\n      }\n    };\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\n\n    return result.body.processInstanceId;\n  }\n\n  async authentication(data) {\n    var result = await this.post(url.URL_BPM_LOGIN, data);\n    return result.status; //OK\n  }\n\n  async startedStatusTask(taskId) {\n    try {\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_STARTED\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async completedStatusTask(taskId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async abortProcess(instanceId) {\n    try {\n      console.log(\"abortProcess\", instanceId); //Estructura de la data que se le debe pasar\n\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId\n      };\n      console.log(\"data\", data);\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api abortProcess:\", err);\n    }\n\n    return undefined;\n  }\n\n  async updatevariables(instanceId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  } //Retorna la imagen relacionada a un proceso\n\n\n  async wacthprocess(processInstanceId) {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        data: {},\n        params: {\n          \"containerId\": url.WORD_BPM_CONTAINERID,\n          \"processInstanceId\": processInstanceId\n        }\n      };\n      var result = await this.get(url.URL_BPM_WATCHPROCESS, config);\n      console.log(respuesta);\n      return result.body.respuesta;\n    } catch (err) {\n      console.log(err);\n    }\n\n    return undefined;\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/BpmServices/Services.js"],"names":["TaskListPostownersModel","GetDashBoardModel","ApiServiceBpm","url","opt","qs","Services","getDashBoard","params","result","get","URL_BPM_DASHBOARD","fromJson","getTasksByPrcess","instanceId","results","filter","e","startProcess","data","WORD_BPM_CONTAINERID","WORD_BPM_PROCESSID","PROCESS_BUSQUEDADESCARTE","toString","post","URL_BPM_STARTPROCESS","body","processInstanceId","authentication","URL_BPM_LOGIN","status","startedStatusTask","taskId","WORD_BPM_STARTED","put","URL_BPM_STATUSTASK","err","console","error","undefined","completedStatusTask","values","WORD_BPM_COMPLETED","abortProcess","log","del","URL_BPM_ABORTPROCESS","updatevariables","URL_BPM_UPDATEVAR","wacthprocess","config","headers","URL_BPM_WATCHPROCESS","respuesta"],"mappings":"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","sourcesContent":["\r\nimport TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\r\nimport { GetDashBoardModel } from \"../../models\";\r\nimport ApiServiceBpm from \"../ApiServiceBpm\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport qs from \"qs\";\r\n\r\nexport default class Services extends ApiServiceBpm {\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  //retorna la bandeja de entrada\r\n  async getDashBoard(params) {\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n    return GetDashBoardModel.fromJson(result);\r\n  }\r\n\r\n  //retorna las tareas de un proceso especifico\r\n  async getTasksByPrcess(instanceId) {\r\n\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n\r\n    result = GetDashBoardModel.fromJson(result);\r\n\r\n    return result.results.filter((e) => e.instanceId === instanceId)[0];\r\n  }\r\n\r\n  //crea e inicia una nueva instancia de Proceso y actividad\r\n  async startProcess() {\r\n    //Estructura de la data que se le debe pasar\r\n    var data = {\r\n      \"containerId\": url.WORD_BPM_CONTAINERID,\r\n      \"processId\": url.WORD_BPM_PROCESSID,\r\n      \"parametros\": {\r\n        \"values\": {\r\n              \"processId\":opt.PROCESS_BUSQUEDADESCARTE.toString(),\r\n              \"activityId\":\"0\",                    \r\n          \"transactionId\": \"\",\r\n          \"customerId\": \"\",\r\n          \"applicationNumber\": \"\",\r\n          \"procedureNumber\": \"\",\r\n          \"requestId\":\"\",\r\n          \"facilityId\":\"\"\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\r\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\r\n\r\n    return result.body.processInstanceId;\r\n  }\r\n\r\n  async authentication(data) {\r\n    var result = await this.post(url.URL_BPM_LOGIN, data);\r\n    return result.status; //OK\r\n  }\r\n\r\n  async startedStatusTask(taskId) {\r\n    try {\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_STARTED,\r\n      }\r\n\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async completedStatusTask(taskId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async abortProcess(instanceId) {\r\n\r\n    try{\r\n      console.log(\"abortProcess\",instanceId);\r\n      //Estructura de la data que se le debe pasar\r\n    var data ={\r\n      \"containerId\":url.WORD_BPM_CONTAINERID,\r\n      \"processInstanceId\": instanceId,\r\n      } \r\n      console.log(\"data\",data);\r\n    var result = await this.del(url.URL_BPM_ABORTPROCESS,data);\r\n    \r\n      if(result.status === \"OK\"){\r\n        return result;\r\n      }\r\n\r\n    } \r\n    catch(err){\r\n      console.error(\"api abortProcess:\",err)\r\n    }   \r\n\r\n    return undefined;\r\n  }\r\n\r\n  async updatevariables(instanceId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  //Retorna la imagen relacionada a un proceso\r\n  async wacthprocess(processInstanceId) {\r\n    try{\r\n      const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        },\r\n        data: {},\r\n        params: {\r\n          \"containerId\":url.WORD_BPM_CONTAINERID,\r\n          \"processInstanceId\": processInstanceId,\r\n          } \r\n    }\r\n      var result = await this.get(url.URL_BPM_WATCHPROCESS,config);\r\n      console.log(respuesta);\r\n      return result.body.respuesta;\r\n    }\r\n    catch(err){console.log(err )}\r\n    return undefined;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}