{"ast":null,"code":"import axios from \"axios\"; //apply base url for axios\n\nconst API_URL = \"\"; // headers: {\n//   \"Content-Type\": \"application/json\",\n//   'Cache-Control': 'no-cache',\n//   'Pragma': 'no-cache',\n//   'Expires': '0',\n// },\n\nconst axiosApi = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default class ApiServiceBackend {\n  setDataError(err) {\n    /*let jsonError = {\r\n      code: err.response.status,\r\n      error: true,\r\n      message: err.response.data,\r\n      method: err.response.config.method,\r\n      serviceType: \"bk\",\r\n      url: err.response.config.url,\r\n    }\r\n      localStorage.setItem(\"jsonError\", JSON.stringify(jsonError))\r\n    const event = new CustomEvent('errorSoaint', jsonError);\r\n    event.initEvent(\"errorSoaint\", true, true);\r\n    window.dispatchEvent(event);\r\n    */\n  }\n\n  async get(url, config = {}) {\n    return await axiosApi.get(url, { ...config\n    }).then(response => response.data).catch(err => {\n      this.setDataError(err);\n    });\n  }\n\n  async getSinData(url, config = {}) {\n    return await axiosApi.get(url, { ...config\n    }).then(response => response);\n  }\n\n  async post(url, data, config = {}) {\n    return axiosApi.post(url, { ...data\n    }, { ...config\n    }).then(response => response.data).catch(err => {\n      this.setDataError(err);\n    });\n  }\n\n  async put(url, data, config = {}) {\n    return axiosApi.put(url, { ...data\n    }, { ...config\n    }).then(response => response.data).catch(err => {\n      this.setDataError(err);\n    });\n  }\n\n  async del(url, data, config = {}) {\n    return await axiosApi.delete(url, {\n      data: data\n    }, { ...config\n    }).then(response => {\n      if (response.statusCode == \"500\") {\n        this.setDataError({\n          code: 500,\n          error: true,\n          message: \"Error del servidor\",\n          method: 'Delete',\n          serviceType: \"bk\",\n          url: ''\n        });\n      }\n\n      return response.data;\n    }).catch(err => {\n      this.setDataError(err);\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/ApiServiceBackend.js"],"names":["axios","API_URL","axiosApi","create","baseURL","headers","ApiServiceBackend","setDataError","err","get","url","config","then","response","data","catch","getSinData","post","put","del","delete","statusCode","code","error","message","method","serviceType"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,MAAMC,OAAO,GAAG,EAAhB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEH,OADmB;AAE5BI,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFmB,CAAb,CAAjB;AAQA,eAAe,MAAMC,iBAAN,CAAwB;AAErCC,EAAAA,YAAY,CAACC,GAAD,EAAM;AAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEG;;AAEQ,QAAHC,GAAG,CAACC,GAAD,EAAMC,MAAM,GAAG,EAAf,EAAmB;AAC1B,WAAO,MAAMT,QAAQ,CAClBO,GADU,CACNC,GADM,EACD,EAAE,GAAGC;AAAL,KADC,EAEVC,IAFU,CAELC,QAAQ,IAAIA,QAAQ,CAACC,IAFhB,EAEsBC,KAFtB,CAE4BP,GAAG,IAAI;AAC5C,WAAKD,YAAL,CAAkBC,GAAlB;AACD,KAJU,CAAb;AAKD;;AACe,QAAVQ,UAAU,CAACN,GAAD,EAAMC,MAAM,GAAG,EAAf,EAAmB;AACjC,WAAO,MAAMT,QAAQ,CAClBO,GADU,CACNC,GADM,EACD,EAAE,GAAGC;AAAL,KADC,EAEVC,IAFU,CAELC,QAAQ,IAAIA,QAFP,CAAb;AAGD;;AAES,QAAJI,IAAI,CAACP,GAAD,EAAMI,IAAN,EAAYH,MAAM,GAAG,EAArB,EAAyB;AACjC,WAAOT,QAAQ,CACZe,IADI,CACCP,GADD,EACM,EAAE,GAAGI;AAAL,KADN,EACmB,EAAE,GAAGH;AAAL,KADnB,EAEJC,IAFI,CAECC,QAAQ,IAAIA,QAAQ,CAACC,IAFtB,EAE4BC,KAF5B,CAEkCP,GAAG,IAAI;AAC5C,WAAKD,YAAL,CAAkBC,GAAlB;AACD,KAJI,CAAP;AAKD;;AAEQ,QAAHU,GAAG,CAACR,GAAD,EAAMI,IAAN,EAAYH,MAAM,GAAG,EAArB,EAAyB;AAChC,WAAOT,QAAQ,CACZgB,GADI,CACAR,GADA,EACK,EAAE,GAAGI;AAAL,KADL,EACkB,EAAE,GAAGH;AAAL,KADlB,EAEJC,IAFI,CAECC,QAAQ,IAAIA,QAAQ,CAACC,IAFtB,EAE4BC,KAF5B,CAEkCP,GAAG,IAAI;AAC5C,WAAKD,YAAL,CAAkBC,GAAlB;AACD,KAJI,CAAP;AAKD;;AAEQ,QAAHW,GAAG,CAACT,GAAD,EAAMI,IAAN,EAAYH,MAAM,GAAG,EAArB,EAAyB;AAChC,WAAO,MAAMT,QAAQ,CAClBkB,MADU,CACHV,GADG,EACE;AAAEI,MAAAA,IAAI,EAAEA;AAAR,KADF,EACkB,EAAE,GAAGH;AAAL,KADlB,EAEVC,IAFU,CAELC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACQ,UAAT,IAAuB,KAA3B,EAAkC;AAChC,aAAKd,YAAL,CAAkB;AAChBe,UAAAA,IAAI,EAAE,GADU;AAEhBC,UAAAA,KAAK,EAAE,IAFS;AAGhBC,UAAAA,OAAO,EAAE,oBAHO;AAIhBC,UAAAA,MAAM,EAAE,QAJQ;AAKhBC,UAAAA,WAAW,EAAE,IALG;AAMhBhB,UAAAA,GAAG,EAAE;AANW,SAAlB;AAQD;;AACD,aAAOG,QAAQ,CAACC,IAAhB;AACD,KAdU,EAcRC,KAdQ,CAcFP,GAAG,IAAI;AACd,WAAKD,YAAL,CAAkBC,GAAlB;AACD,KAhBU,CAAb;AAiBD;;AAlEoC","sourcesContent":["import axios from \"axios\"\r\n//apply base url for axios\r\nconst API_URL = \"\"\r\n// headers: {\r\n//   \"Content-Type\": \"application/json\",\r\n//   'Cache-Control': 'no-cache',\r\n//   'Pragma': 'no-cache',\r\n//   'Expires': '0',\r\n// },\r\nconst axiosApi = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n})\r\n\r\n\r\nexport default class ApiServiceBackend {\r\n\r\n  setDataError(err) {\r\n    /*let jsonError = {\r\n      code: err.response.status,\r\n      error: true,\r\n      message: err.response.data,\r\n      method: err.response.config.method,\r\n      serviceType: \"bk\",\r\n      url: err.response.config.url,\r\n    }\r\n\r\n    localStorage.setItem(\"jsonError\", JSON.stringify(jsonError))\r\n    const event = new CustomEvent('errorSoaint', jsonError);\r\n    event.initEvent(\"errorSoaint\", true, true);\r\n    window.dispatchEvent(event);\r\n    */\r\n  }\r\n\r\n  async get(url, config = {}) {\r\n    return await axiosApi\r\n      .get(url, { ...config })\r\n      .then(response => response.data).catch(err => {\r\n        this.setDataError(err);\r\n      });\r\n  }\r\n  async getSinData(url, config = {}) {\r\n    return await axiosApi\r\n      .get(url, { ...config })\r\n      .then(response => response)\r\n  }\r\n\r\n  async post(url, data, config = {}) {\r\n    return axiosApi\r\n      .post(url, { ...data }, { ...config })\r\n      .then(response => response.data).catch(err => {\r\n        this.setDataError(err);\r\n      });\r\n  }\r\n\r\n  async put(url, data, config = {}) {\r\n    return axiosApi\r\n      .put(url, { ...data }, { ...config })\r\n      .then(response => response.data).catch(err => {\r\n        this.setDataError(err);\r\n      });\r\n  }\r\n\r\n  async del(url, data, config = {}) {\r\n    return await axiosApi\r\n      .delete(url, { data: data }, { ...config })\r\n      .then(response => {\r\n        if (response.statusCode == \"500\") {\r\n          this.setDataError({\r\n            code: 500,\r\n            error: true,\r\n            message: \"Error del servidor\",\r\n            method: 'Delete',\r\n            serviceType: \"bk\",\r\n            url: '',\r\n          });\r\n        }\r\n        return response.data\r\n      }).catch(err => {\r\n        this.setDataError(err);\r\n      });\r\n  }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}