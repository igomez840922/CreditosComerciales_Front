{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\CommercialCredit\\\\1_Presolicitud\\\\ClienteBusquedaDescarte.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from 'prop-types'; //i18n\n\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useHistory } from 'react-router-dom';\nimport * as OPTs from \"../../../helpers/options_helper\";\nimport * as url from \"../../../helpers/url_helper\";\nimport { Row, Col, Card, CardBody, Button, Label } from \"reactstrap\";\nimport { BackendServices, CoreServices, BpmServices } from \"../../../services\";\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClienteBusquedaDescarte = props => {\n  _s();\n\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [selectClient, setselectClient] = useState(props.clientSelected);\n  const [identificationTypeList, setIdentificationTypeList] = useState([]);\n  const [identificationTypeSelected, setIdentificationTypeSelected] = useState(undefined);\n  const [personTypeList, setPersonTypeList] = useState(undefined);\n  const [personTypeSelected, setPersonTypeSelected] = useState([]);\n  const apiServiceBackend = new BackendServices(); //On Mounting (componentDidMount)\n\n  React.useEffect(() => {\n    if (selectClient !== undefined && selectClient !== null) {}\n\n    initializeData();\n  }, [selectClient]); //Caraga Inicial\n\n  function initializeData() {\n    apiServiceBackend.consultarCatalogoTipoIdentificacion().then(data => {\n      if (data !== null && data !== undefined) {\n        let json = [];\n\n        for (let i = 0; i < data.length; i++) {\n          json.push({\n            label: t(data[i][\"description\"]),\n            value: data[i][\"id\"]\n          });\n        }\n\n        setIdentificationTypeList(json);\n      }\n    }).catch(error => {});\n    var dataJson = apiServiceBackend.consultarCatalogoTipoPersona();\n\n    if (dataJson !== null && dataJson !== undefined) {\n      setPersonTypeList(dataJson);\n    }\n  }\n  /*\r\n    // Form Submission\r\n    function handleSubmitFrmSearch(event, errors, values) {\r\n      event.preventDefault();\r\n      if (errors.length > 0) {\r\n        return;\r\n      }\r\n      \r\n      const form = document.getElementById('frmSearch');    \r\n      let dataModel = watchlist.getRequestModel();\r\n      switch (form.identificationType.value) {\r\n        case \"RUC\": {\r\n          dataModel.pTypeId = 'JURIDICA';\r\n          dataModel.pCustomerId = form.customerDocumentId.value;\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n          break;\r\n        }\r\n        case \"CED\": {\r\n          dataModel.pTypeId = 'CEDULA';\r\n          dataModel.pCustomerId = form.customerDocumentId.value;\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n          break;\r\n        }      \r\n        default: {\r\n          dataModel.pTypeId = 'PASAPORTE';\r\n          dataModel.pCustomerId = form.customerDocumentId.value;\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n          dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n          break;\r\n        }\r\n      }\r\n      \r\n      props.onSubmit(dataModel);\r\n    }\r\n  \r\n    //On change Inputs\r\n    function handleChangeInputfrmSearch(e) {\r\n      selectedData[e.target.name] = e.target.value;\r\n      props.updateDataModel(selectedData);    \r\n  \r\n      switch(e.target.name){\r\n        case \"identificationType\":{\r\n          setidentificationType(e.target.value);    \r\n          break;\r\n        }\r\n      }\r\n    }\r\n  \r\n    function handleGoogleSearch() {\r\n      const form = document.getElementById('frmSearch');\r\n      let query;\r\n      \r\n      switch (form.identificationType.value) {\r\n        case \"RUC\": {\r\n          query = [\r\n            form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n            form.customerDocumentId.value,\r\n            form.firstName.value\r\n          ];\r\n          break;\r\n        }\r\n        default: {\r\n          query = [\r\n            form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n            form.customerDocumentId.value,\r\n            form.firstName.value,\r\n            form.secondName.value!==undefined?form.secondName.value:\"\",\r\n            form.firstLastName.value!==undefined?form.firstLastName.value:\"\",\r\n            form.secondLastName.value!==undefined?form.secondLastName.value:\"\"\r\n          ];\r\n          break;\r\n        }\r\n      }\r\n      props.onGoogleSearch(query);\r\n    }\r\n  \r\n    function getSearchForm(){\r\n            //segun tipo de identiicaci√≥n\r\n            switch(identificationType){\r\n              case \"RUC\":{ //RUC\r\n              return(\r\n                <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                      <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                      { identificationList.map((dt) => (\r\n                        <option value={dt.id}>{props.t(dt.description)}</option>\r\n                      )) }\r\n                      </select>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                      <AvField\r\n                        className=\"form-control\"\r\n                        name=\"customerDocumentId\"\r\n                        type=\"text\" onChange={handleChangeInputfrmSearch}\r\n                        errorMessage={props.t(\"Required Field\")}\r\n                        validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  \r\n                  <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"firstName\">{props.t(\"Name\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"firstName\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n      \r\n                  </Row>\r\n      \r\n                <Row>\r\n                  <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                    <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                    <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                    </Button>\r\n                    <Button id=\"btnGoogle\" color=\"warning\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                    <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                    </Button>                                    \r\n                  </Col>\r\n                </Row>\r\n              </AvForm>         \r\n              )\r\n              }\r\n              default:{ //Cedula o Pasaporte \r\n                  return(\r\n  \r\n                    <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                      <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                      { identificationList.map((dt) => (\r\n                        <option value={dt.id}>{props.t(dt.description)}</option>\r\n                      )) }\r\n                      </select>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                      <AvField\r\n                        className=\"form-control\"\r\n                        name=\"customerDocumentId\"\r\n                        type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                        errorMessage={props.t(\"Required Field\")}\r\n                        validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  \r\n                  <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"firstName\">{props.t(\"First Name\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"firstName\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"secondName\">{props.t(\"SecondName\")}</Label>\r\n                    <AvField\r\n                      name=\"secondName\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      className=\"form-control\" value={selectedData!== undefined?selectedData.secondName:\"\"}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"firstLastName\">{props.t(\"FirstLastName\")}</Label>\r\n                    <AvField\r\n                      name=\"firstLastName\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      className=\"form-control\" \r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstLastName:\"\"}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"secondLastName\">{props.t(\"SecondLastName\")}</Label>\r\n                    <AvField\r\n                      name=\"secondLastName\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      className=\"form-control\"  value={selectedData!== undefined?selectedData.secondLastName:\"\"}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                  </Row>\r\n      \r\n                <Row>\r\n                  <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                    <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                    <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                    </Button>\r\n                    <Button id=\"btnGoogle\" color=\"success\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                    <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                    </Button>   \r\n                  </Col>\r\n                </Row>\r\n              </AvForm>         \r\n  \r\n                  )\r\n              }\r\n          }\r\n    }\r\n    */\n\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      lg: \"12\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"card-title\",\n        children: props.t(\"Surveillance List\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-title-desc  border-bottom\",\n        children: props.t(\"Search and Discard your Customers\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ClienteBusquedaDescarte, \"0KNMYt1bah0mQk1homSgE5Tacbc=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ClienteBusquedaDescarte;\nClienteBusquedaDescarte.propTypes = {\n  onSaveClient: PropTypes.func,\n  //salvar Cliente\n  onSaveClientToCompliance: PropTypes.func,\n  //salvar Cliente a Cumplimiento\n  onCancel: PropTypes.func,\n  //cancelamos\n  clientSelected: PropTypes.any\n};\nexport default ClienteBusquedaDescarte;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClienteBusquedaDescarte\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/CommercialCredit/1_Presolicitud/ClienteBusquedaDescarte.js"],"names":["React","useState","PropTypes","useTranslation","useLocation","useHistory","OPTs","url","Row","Col","Card","CardBody","Button","Label","BackendServices","CoreServices","BpmServices","AvForm","AvField","ClienteBusquedaDescarte","props","t","i18n","selectClient","setselectClient","clientSelected","identificationTypeList","setIdentificationTypeList","identificationTypeSelected","setIdentificationTypeSelected","undefined","personTypeList","setPersonTypeList","personTypeSelected","setPersonTypeSelected","apiServiceBackend","useEffect","initializeData","consultarCatalogoTipoIdentificacion","then","data","json","i","length","push","label","value","catch","error","dataJson","consultarCatalogoTipoPersona","propTypes","onSaveClient","func","onSaveClientToCompliance","onCancel","any"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from 'prop-types';\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLocation,useHistory } from 'react-router-dom'\r\nimport * as OPTs from \"../../../helpers/options_helper\"\r\nimport * as url from \"../../../helpers/url_helper\"\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Label,\r\n} from \"reactstrap\"\r\n\r\nimport {BackendServices,CoreServices,BpmServices,} from \"../../../services\";\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\"\r\n\r\nconst ClienteBusquedaDescarte = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n  \r\n    const [selectClient, setselectClient] = useState(props.clientSelected);\r\n\r\n    const [identificationTypeList, setIdentificationTypeList] = useState([]);\r\n    const [identificationTypeSelected, setIdentificationTypeSelected] = useState(undefined);\r\n\r\n    const [personTypeList, setPersonTypeList] = useState(undefined);\r\n    const [personTypeSelected, setPersonTypeSelected] = useState([]);\r\n      \r\n    const apiServiceBackend = new BackendServices();\r\n\r\n  //On Mounting (componentDidMount)\r\n  React.useEffect(() => {\r\n    if(selectClient!==undefined && selectClient!==null){\r\n        \r\n    }\r\n    initializeData();\r\n  }, [selectClient]);\r\n\r\n  //Caraga Inicial\r\n  function initializeData() {\r\n\r\n    apiServiceBackend.consultarCatalogoTipoIdentificacion()\r\n        .then((data) => {\r\n            if (data !== null && data !== undefined) {\r\n                let json = [];\r\n                for (let i = 0; i < data.length; i++) {\r\n                  json.push({ label: t(data[i][\"description\"]), value: data[i][\"id\"] })\r\n                }\r\n                setIdentificationTypeList(json)\r\n            }          \r\n      }).catch((error) => { });\r\n    \r\n    var dataJson = apiServiceBackend.consultarCatalogoTipoPersona();\r\n    if (dataJson !== null && dataJson !== undefined) {\r\n        setPersonTypeList(dataJson)\r\n    }\r\n    \r\n  }\r\n/*\r\n  // Form Submission\r\n  function handleSubmitFrmSearch(event, errors, values) {\r\n    event.preventDefault();\r\n    if (errors.length > 0) {\r\n      return;\r\n    }\r\n    \r\n    const form = document.getElementById('frmSearch');    \r\n    let dataModel = watchlist.getRequestModel();\r\n    switch (form.identificationType.value) {\r\n      case \"RUC\": {\r\n        dataModel.pTypeId = 'JURIDICA';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        break;\r\n      }\r\n      case \"CED\": {\r\n        dataModel.pTypeId = 'CEDULA';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n        break;\r\n      }      \r\n      default: {\r\n        dataModel.pTypeId = 'PASAPORTE';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n        break;\r\n      }\r\n    }\r\n    \r\n    props.onSubmit(dataModel);\r\n  }\r\n\r\n  //On change Inputs\r\n  function handleChangeInputfrmSearch(e) {\r\n    selectedData[e.target.name] = e.target.value;\r\n    props.updateDataModel(selectedData);    \r\n\r\n    switch(e.target.name){\r\n      case \"identificationType\":{\r\n        setidentificationType(e.target.value);    \r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleGoogleSearch() {\r\n    const form = document.getElementById('frmSearch');\r\n    let query;\r\n    \r\n    switch (form.identificationType.value) {\r\n      case \"RUC\": {\r\n        query = [\r\n          form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n          form.customerDocumentId.value,\r\n          form.firstName.value\r\n        ];\r\n        break;\r\n      }\r\n      default: {\r\n        query = [\r\n          form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n          form.customerDocumentId.value,\r\n          form.firstName.value,\r\n          form.secondName.value!==undefined?form.secondName.value:\"\",\r\n          form.firstLastName.value!==undefined?form.firstLastName.value:\"\",\r\n          form.secondLastName.value!==undefined?form.secondLastName.value:\"\"\r\n        ];\r\n        break;\r\n      }\r\n    }\r\n    props.onGoogleSearch(query);\r\n  }\r\n\r\n  function getSearchForm(){\r\n          //segun tipo de identiicaci√≥n\r\n          switch(identificationType){\r\n            case \"RUC\":{ //RUC\r\n            return(\r\n              <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n              <Row>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                    <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                    { identificationList.map((dt) => (\r\n                      <option value={dt.id}>{props.t(dt.description)}</option>\r\n                    )) }\r\n                    </select>\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"customerDocumentId\"\r\n                      type=\"text\" onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                \r\n                <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstName\">{props.t(\"Name\")}</Label>\r\n                  <AvField\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n    \r\n                </Row>\r\n    \r\n              <Row>\r\n                <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                  <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                  <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                  </Button>\r\n                  <Button id=\"btnGoogle\" color=\"warning\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                  <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                  </Button>                                    \r\n                </Col>\r\n              </Row>\r\n            </AvForm>         \r\n            )\r\n            }\r\n            default:{ //Cedula o Pasaporte \r\n                return(\r\n\r\n                  <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n              <Row>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                    <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                    { identificationList.map((dt) => (\r\n                      <option value={dt.id}>{props.t(dt.description)}</option>\r\n                    )) }\r\n                    </select>\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"customerDocumentId\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                \r\n                <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstName\">{props.t(\"First Name\")}</Label>\r\n                  <AvField\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"secondName\">{props.t(\"SecondName\")}</Label>\r\n                  <AvField\r\n                    name=\"secondName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\" value={selectedData!== undefined?selectedData.secondName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstLastName\">{props.t(\"FirstLastName\")}</Label>\r\n                  <AvField\r\n                    name=\"firstLastName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\" \r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstLastName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"secondLastName\">{props.t(\"SecondLastName\")}</Label>\r\n                  <AvField\r\n                    name=\"secondLastName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\"  value={selectedData!== undefined?selectedData.secondLastName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n                </Row>\r\n    \r\n              <Row>\r\n                <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                  <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                  <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                  </Button>\r\n                  <Button id=\"btnGoogle\" color=\"success\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                  <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                  </Button>   \r\n                </Col>\r\n              </Row>\r\n            </AvForm>         \r\n\r\n                )\r\n            }\r\n        }\r\n  }\r\n  */\r\n  return (\r\n   \r\n      <Row>\r\n          <Col lg=\"12\">\r\n          <h4 className=\"card-title\">{props.t(\"Surveillance List\")}</h4>\r\n        <p className=\"card-title-desc  border-bottom\">\r\n          {props.t(\"Search and Discard your Customers\")}\r\n        </p>\r\n        \r\n\r\n        {/*getSearchForm()*/}\r\n\r\n\r\n          </Col>\r\n      </Row>\r\n       );\r\n\r\n};\r\n\r\nClienteBusquedaDescarte.propTypes = {\r\n  onSaveClient: PropTypes.func, //salvar Cliente\r\n  onSaveClientToCompliance: PropTypes.func,//salvar Cliente a Cumplimiento\r\n  onCancel: PropTypes.func, //cancelamos\r\n  clientSelected:PropTypes.any\r\n}\r\n\r\nexport default ClienteBusquedaDescarte;\r\n"]},"metadata":{},"sourceType":"module"}