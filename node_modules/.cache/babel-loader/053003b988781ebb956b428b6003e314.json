{"ast":null,"code":"import TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\nimport { GetDashBoardModel } from \"../../models\";\nimport ApiServiceBpm from \"../ApiServiceBpm\";\nimport * as url from \"../../helpers/url_helper\";\nimport * as opt from \"../../helpers/options_helper\";\nimport qs from \"qs\";\nimport { result } from \"lodash\";\nexport default class Services extends ApiServiceBpm {\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  //creamos un nueva instancia de proceso en BPM...    \n  async createNewInstance() {\n    try {\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \n\n      if (number !== null && number !== undefined && number > 0) {\n        var result1 = await this.getTasksByPrcess(number); //buscamos la tarea que crea el nuevo proceso\n\n        if (result1 !== undefined) {\n          var result2 = await this.startedStatusTask(result1.taskId); //iniciamos la tarea\n\n          if (result2 !== undefined) {\n            return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\n          }\n        }\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  } //retorna la bandeja de entrada\n\n\n  async getDashBoard() {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    return GetDashBoardModel.fromJson(result);\n  } //Chequea e Inicializa la tarea\n\n\n  async checkAndStartTask(locationData) {\n    try {\n      console.log(\"checkAndStartTask -----------------> \" + locationData.taskId);\n      await this.startedStatusTask(locationData.taskId);\n      return true; //chequear si la tarea no ha sido iniciada\n\n      /*if(locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\"){        \r\n        //Iniciamos la nueva tarea en BPM   \r\n        await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      }\r\n      else{\r\n        return true;\r\n      }      */\n    } catch (err) {\n      console.error(err);\n    }\n\n    return false;\n  } //retorna las tareas de un proceso especifico\n\n\n  async getTasksByPrcess(instanceId) {\n    try {\n      var result = await this.get(url.URL_BPM_DASHBOARD);\n      result = GetDashBoardModel.fromJson(result);\n      return result.results.filter(e => e.instanceId === instanceId)[0];\n    } catch (err) {\n      console.error(\"getTasksByPrcess\", err);\n    }\n\n    return undefined;\n  } //crea e inicia una nueva instancia de Proceso y actividad\n\n\n  async startProcess() {\n    //Estructura de la data que se le debe pasar\n    var data = {\n      \"containerId\": url.WORD_BPM_CONTAINERID,\n      \"processId\": url.WORD_BPM_PROCESSID,\n      \"parametros\": {\n        \"values\": {\n          \"info\": \"\",\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\n          \"activityId\": \"0\",\n          \"transactionId\": \"\",\n          \"customerId\": \"\",\n          \"applicationNumber\": \"\",\n          \"procedureNumber\": \"\",\n          \"requestId\": \"\",\n          \"facilityId\": \"\",\n          \"dambientalparalelo\": \"\",\n          \"decision\": \"\",\n          \"id\": \"\",\n          \"monto\": 0,\n          \"status\": \"\",\n          \"decicionforma\": \"\",\n          \"cargo\": \"cargo\",\n          \"statuscredito\": \"\",\n          \"statusadm\": \"\",\n          \"statusformali\": \"\",\n          \"tiposolicitud\": \"\",\n          \"origensolicitud\": \"\",\n          \"dcreditoparalelo\": \"\",\n          \"regresar\": \"\",\n          \"rol\": \"\"\n        }\n      }\n    };\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\n\n    return result.body.processInstanceId;\n  }\n\n  async authentication(data) {\n    var result = await this.post(url.URL_BPM_LOGIN, data);\n    return result.status; //OK\n  }\n\n  async startedStatusTask(taskId) {\n    try {\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_STARTED\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n      console.log(result);\n\n      if ((result === null || result === void 0 ? void 0 : result.status) === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api startedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async completedStatusTask(taskId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async abortProcess(instanceId) {\n    try {\n      console.log(\"abortProcess\", instanceId); //Estructura de la data que se le debe pasar\n\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId\n      };\n      console.log(\"data\", data);\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api abortProcess:\", err);\n    }\n\n    return undefined;\n  }\n\n  async updatevariables(instanceId, values) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  } //Retorna la imagen relacionada a un proceso\n\n\n  async wacthprocess(processInstanceId) {\n    try {\n      var params = {\n        containerId: url.WORD_BPM_CONTAINERID,\n        processInstanceId: processInstanceId\n      };\n      var data = qs.stringify(params);\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\n      console.log(\"wacthprocess\", result);\n      return result.body.response;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  }\n\n  async saveAutonomy(amount) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": \"CreditosComerciales_1.0.0-SNAPSHOT\",\n        \"parametros\": {\n          \"values\": {\n            \"model-namespace\": \"https://kiegroup.org/dmn/_6CB4FBE1-7BA0-4963-80A0-166EFED1410A\",\n            \"model-name\": \"ReglaAsginacionAutonomia\",\n            \"dmn-context\": {\n              \"monto\": amount\n            }\n          }\n        }\n      };\n      var result = await this.post(url.URL_BPM_checketapa, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n      return undefined;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/BpmServices/Services.js"],"names":["TaskListPostownersModel","GetDashBoardModel","ApiServiceBpm","url","opt","qs","result","Services","createNewInstance","number","startProcess","undefined","result1","getTasksByPrcess","result2","startedStatusTask","taskId","err","console","error","getDashBoard","get","URL_BPM_DASHBOARD","fromJson","checkAndStartTask","locationData","log","instanceId","results","filter","e","data","WORD_BPM_CONTAINERID","WORD_BPM_PROCESSID","PROCESS_BUSQUEDADESCARTE","toString","post","URL_BPM_STARTPROCESS","body","processInstanceId","authentication","URL_BPM_LOGIN","status","WORD_BPM_STARTED","put","URL_BPM_STATUSTASK","completedStatusTask","values","WORD_BPM_COMPLETED","abortProcess","del","URL_BPM_ABORTPROCESS","updatevariables","URL_BPM_UPDATEVAR","wacthprocess","params","containerId","stringify","URL_BPM_WATCHPROCESS","response","saveAutonomy","amount","URL_BPM_checketapa"],"mappings":"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","sourcesContent":["\r\nimport TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\r\nimport { GetDashBoardModel } from \"../../models\";\r\nimport ApiServiceBpm from \"../ApiServiceBpm\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport qs from \"qs\";\r\nimport { result } from \"lodash\";\r\n\r\nexport default class Services extends ApiServiceBpm {\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n\r\n\r\n  //creamos un nueva instancia de proceso en BPM...    \r\n  async createNewInstance() {\r\n    try {\r\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \r\n      if (number !== null && number !== undefined && number > 0) {\r\n        var result1 = await this.getTasksByPrcess(number);//buscamos la tarea que crea el nuevo proceso\r\n        if (result1 !== undefined) {\r\n          var result2 = await this.startedStatusTask(result1.taskId);//iniciamos la tarea\r\n          if (result2 !== undefined) {\r\n            return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  //retorna la bandeja de entrada\r\n  async getDashBoard() {\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n    return GetDashBoardModel.fromJson(result);\r\n  }\r\n\r\n  //Chequea e Inicializa la tarea\r\n  async checkAndStartTask(locationData) {\r\n    try {\r\n\r\n\r\n      console.log(\"checkAndStartTask -----------------> \" + locationData.taskId);\r\n      await this.startedStatusTask(locationData.taskId)\r\n      return true;\r\n      //chequear si la tarea no ha sido iniciada\r\n      /*if(locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\"){        \r\n        //Iniciamos la nueva tarea en BPM   \r\n        await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      }\r\n      else{\r\n        return true;\r\n      }      */\r\n    }\r\n    catch (err) { console.error(err) }\r\n    return false;\r\n  }\r\n\r\n  //retorna las tareas de un proceso especifico\r\n  async getTasksByPrcess(instanceId) {\r\n    try {\r\n      var result = await this.get(url.URL_BPM_DASHBOARD);\r\n      result = GetDashBoardModel.fromJson(result);\r\n      return result.results.filter((e) => e.instanceId === instanceId)[0];\r\n    }\r\n    catch (err) { console.error(\"getTasksByPrcess\", err) }\r\n    return undefined;\r\n  }\r\n\r\n  //crea e inicia una nueva instancia de Proceso y actividad\r\n  async startProcess() {\r\n    //Estructura de la data que se le debe pasar\r\n    var data = {\r\n      \"containerId\": url.WORD_BPM_CONTAINERID,\r\n      \"processId\": url.WORD_BPM_PROCESSID,\r\n      \"parametros\": {\r\n        \"values\": {\r\n          \"info\": \"\",\r\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\r\n          \"activityId\": \"0\",\r\n          \"transactionId\": \"\",\r\n          \"customerId\": \"\",\r\n          \"applicationNumber\": \"\",\r\n          \"procedureNumber\": \"\",\r\n          \"requestId\": \"\",\r\n          \"facilityId\": \"\",\r\n          \"dambientalparalelo\": \"\",\r\n          \"decision\": \"\",\r\n          \"id\": \"\",\r\n          \"monto\": 0,\r\n          \"status\": \"\",\r\n          \"decicionforma\": \"\",\r\n          \"cargo\": \"cargo\",\r\n          \"statuscredito\": \"\",\r\n          \"statusadm\": \"\",\r\n          \"statusformali\": \"\",\r\n          \"tiposolicitud\": \"\",\r\n          \"origensolicitud\": \"\",\r\n          \"dcreditoparalelo\": \"\",\r\n          \"regresar\": \"\",\r\n          \"rol\": \"\"\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\r\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\r\n\r\n    return result.body.processInstanceId;\r\n  }\r\n\r\n  async authentication(data) {\r\n    var result = await this.post(url.URL_BPM_LOGIN, data);\r\n    return result.status; //OK\r\n  }\r\n\r\n  async startedStatusTask(taskId) {\r\n    try {\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_STARTED,\r\n      }\r\n\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      console.log(result);\r\n      if (result?.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api startedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async completedStatusTask(taskId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async abortProcess(instanceId) {\r\n\r\n    try {\r\n      console.log(\"abortProcess\", instanceId);\r\n      //Estructura de la data que se le debe pasar\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n      }\r\n      console.log(\"data\", data);\r\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\r\n\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api abortProcess:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async updatevariables(instanceId, values) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  //Retorna la imagen relacionada a un proceso\r\n  async wacthprocess(processInstanceId) {\r\n    try {\r\n\r\n      var params = { containerId: url.WORD_BPM_CONTAINERID, processInstanceId: processInstanceId }\r\n      var data = qs.stringify(params);\r\n\r\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\r\n\r\n      console.log(\"wacthprocess\", result);\r\n\r\n      return result.body.response;\r\n    }\r\n    catch (err) { console.error(err); }\r\n    return undefined;\r\n  }\r\n\r\n  async saveAutonomy(amount) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": \"CreditosComerciales_1.0.0-SNAPSHOT\",\r\n        \"parametros\": {\r\n          \"values\": {\r\n            \"model-namespace\": \"https://kiegroup.org/dmn/_6CB4FBE1-7BA0-4963-80A0-166EFED1410A\",\r\n            \"model-name\": \"ReglaAsginacionAutonomia\",\r\n            \"dmn-context\": { \"monto\": amount }\r\n          }\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_checketapa, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}