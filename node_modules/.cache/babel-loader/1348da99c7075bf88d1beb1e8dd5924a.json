{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\Dashboard\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { Button, Label, Input, CardHeader, CardTitle, InputGroup, Table, CardFooter, Row, Col, Card, CardBody } from \"reactstrap\";\nimport { Accordion } from 'react-bootstrap';\nimport SalesAnalytics from \"./sales-analytics\";\nimport ScatterChart from \"./scatter-analytics\";\nimport CreditProposalPage from '../CommercialCredit/5_PropuestaCredito/CreditProposalPage';\nimport ApiServiceBpm from \"../../services/BpmServices/Services\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport ApiServiceCore from \"../../services/CoreServices/Services\";\nimport * as opt from \"../../helpers/options_helper\";\nimport { ResultadoChecklistCentroArchivoModel } from \"../../models\";\nimport ModalWatchProces from \"./ModalWacthProcess\";\nimport { formatCurrency, translationHelpers } from '../../helpers';\nimport LoadingOverlay from \"react-loading-overlay\"; //import ActiveDirectoryService from \"../../services/ActiveDirectory\";\n\nimport TaskStatus from \"../../components/ActivityTask/taskStatus\";\nimport Currency from \"../../helpers/currency\";\nimport ModalTransferProcess from \"./ModalTransferProcess\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  SearchBar\n} = Search;\n\nconst Dashboard = () => {\n  _s();\n\n  const history = useHistory();\n  const ordernar = new Currency();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [tc, tr] = translationHelpers('commercial_credit', 'translation');\n\n  const customTotal = (from, to, size) => /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"react-bootstrap-table-pagination-total\",\n    children: [t('Showing'), \" \", from, \" \", t('to'), \" \", to, \" \", t('of'), \" \", size, \" \", t('Results')]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n\n  React.useEffect(() => {\n    /* ------------------------------------------------------------------------------------------------------------------ */\n\n    /*                       Llamamos a la funcion para que se pueda renderizar y llenar la tabla                      */\n\n    /* ------------------------------------------------------------------------------------------------------------------ */\n    const fixedDashboard = process.env.REACT_APP_FIXED_DASHBOARD;\n\n    if (fixedDashboard) {// If .env has REACT_APP_FIXED_DASHBOARD, load fixed data\n      // LoadData();\n    } else {\n      getDashBoard();\n    } //LoadData();\n\n  }, []);\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                                Variables de estados                                                */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  const [showResults, setShowResults] = useState(false);\n  const [dataList, setDataLista] = useState([]);\n  const [dataOptions, setDataOptions] = useState([]);\n  const [dataHeader, setDataHeader] = useState([]);\n  const [dataBody, setDataBody] = useState([]);\n  const [ShowDisplayModal, setShowDisplayModal] = useState(false);\n  const [processInstanceId, setProcessInstanceId] = useState(null);\n  const [isActiveLoading, setisActiveLoading] = useState(false);\n  const [svg, setSvg] = useState(null);\n  const [ShowModalTransfer, setShowModalTransfer] = useState(false);\n  const [transferData, settransferData] = useState(null);\n  const jsonPrioridad = [{\n    value: \"1\",\n    label: \"Muy Urgente\"\n  }, {\n    value: \"2\",\n    label: \"Urgencia Moderada\"\n  }, {\n    value: \"3\",\n    label: \"Importante\"\n  }, {\n    value: \"4\",\n    label: \"Baja Urgencia\"\n  }, {\n    value: \"5\",\n    label: \" Sin Urgencia\"\n  }];\n  const [dataRows, setdataRows] = useState(null);\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                         Permite cargar los datos a la tabla                                        */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  async function getDashBoard() {\n    setisActiveLoading(true);\n    /* ------------------------------------------------------------------------------------------------------------------ */\n\n    /*   Instanciamos la api para el result de la api y asi enviar al modelo para retornar un json armado para la tabla   */\n\n    /* ------------------------------------------------------------------------------------------------------------------ */\n\n    const api = new ApiServiceBpm(); //api.getLineSerial(\"asd\",\"asd\");\n\n    api.getDashBoard().then(data => {\n      setisActiveLoading(false);\n      console.log(\"getDashBoard\", data);\n      /* ------------------------------------------------------------------------------------------------------------------ */\n\n      /*             Seteamos los valores de las columnas y filas a la variable que va al componene de la tabla             */\n\n      /* ------------------------------------------------------------------------------------------------------------------ */\n\n      data.results = [...ordernar.orderByJSON(data.results.filter(x => +x.priority > 0), \"priority\", \"asc\"), ...data.results.filter(x => +x.priority == 0)];\n      console.log(\"getDashBoard\", data);\n      setDataBody([...data.results.map($$ => {\n        $$.action = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [$$.action, /*#__PURE__*/_jsxDEV(Link, {\n            to: \"#\",\n            onClick: e => {\n              settransferData($$);\n              setShowModalTransfer(true);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"mdi mdi-transit-transfer mdi-24px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"#\",\n            onClick: e => {\n              setProcessInstanceId($$.instanceId);\n              toggleModalWatchProcess();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"mdi mdi-eye mdi-24px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TaskStatus, {\n            taskStatus: $$.status,\n            pathname: $$.pathname,\n            data: $$.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true);\n        return $$;\n      })]);\n    }).catch(error => {\n      setisActiveLoading(false);\n      console.error(error);\n    });\n    /* ------------------------------------------------------------------------------------------------------------------ */\n\n    /*        Creamos un json con los datos que va a tener la tabla en general para mostrar resultados o paginacion       */\n\n    /* ------------------------------------------------------------------------------------------------------------------ */\n\n    let options = {\n      textLabels: {\n        body: {\n          noMatch: t(\"SorryNoMatchingRecordsWereFfound\"),\n          toolTip: t(\"Order\"),\n          columnHeaderTooltip: column => `${t(\"OrderBy\")} ${column.label}`\n        },\n        pagination: {\n          next: t(\"Next\"),\n          previous: t(\"Prev\"),\n          rowsPerPage: t(\"RowsPerPage\"),\n          displayRows: t(\"From\"),\n          sizePerPage: 5,\n          sizePerPageList: [{\n            text: '5th',\n            value: 5\n          }, {\n            text: '10th',\n            value: 10\n          }, {\n            text: 'All',\n            value: 20\n          }]\n        },\n        toolbar: {\n          search: t(\"Search\"),\n          downloadCsv: t(\"DownloadCSV\"),\n          print: t(\"Print\"),\n          viewColumns: t(\"ViewColumns\"),\n          filterTable: t(\"FilterTable\")\n        },\n        filter: {\n          all: t(\"All\"),\n          title: t(\"Filter\"),\n          reset: t(\"Restore\")\n        },\n        viewColumns: {\n          title: t(\"ShowColumns\"),\n          titleAria: t(\"ShowHideColumns\")\n        },\n        selectedRows: {\n          text: t(\"SelectedRows\"),\n          delete: t(\"Delete\"),\n          deleteAria: t(\"DeleteSelectedRows\")\n        }\n      }\n    }; //Header de la Tabla de Bandeja de Entrada\n\n    const columns = [//  { text: \"ID\", dataField: 'uniqueData' },\n    {\n      text: t(\"Date\"),\n      dataField: 'date',\n      sort: true\n    }, {\n      text: t(\"Process\"),\n      dataField: 'instanceId',\n      sort: true\n    }, {\n      text: t(\"Procedure\"),\n      dataField: 'transactionId',\n      sort: true\n    }, {\n      text: t(\"AssignedTo\"),\n      dataField: 'asignedTo',\n      sort: true\n    }, {\n      text: t(\"Client\"),\n      dataField: 'personName',\n      sort: true\n    }, {\n      text: t(\"Activity\"),\n      dataField: 'activity',\n      sort: true\n    }, {\n      text: t(\"Status\"),\n      dataField: 'status',\n      sort: true\n    }, {\n      text: t(\"Prioridad\"),\n      dataField: 'priorityName',\n      sort: true\n    }, {\n      text: \"\",\n      dataField: 'action'\n    }];\n    setDataHeader(columns);\n    setDataOptions(options);\n  }\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                               Funcion temporal para poder navegar entre las pantallas                              */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n\n  function NewInstance() {\n    //creamos un nueva instancia de proceso en BPM...\n    const apiServiceBPM = new ApiServiceBpm();\n    apiServiceBPM.startProcess().then(number => {\n      if (number !== null && number !== undefined && number > 0) {\n        //buscamos la tarea que crea el nuevo proceso\n        apiServiceBPM.getTasksByPrcess(number).then(result => {\n          if (result !== undefined) {\n            //Inicializamos la nueva tarea en BPM\n            apiServiceBPM.startedStatusTask(result.taskId).then(iniresult => {\n              if (iniresult !== undefined) {\n                //datos que le enviamos a la pantalla de busqueda y descarte\n                history.push({\n                  pathname: '/creditocomercial/busquedadescarte',\n                  data: {\n                    customerId: \"\",\n                    transactionId: \"\",\n                    processId: opt.PROCESS_BUSQUEDADESCARTE.toString(),\n                    activityId: opt.ACT_NONE.toString(),\n                    instanceId: result.instanceId,\n                    taskId: result.taskId,\n                    taskStatus: result.status\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    }).catch(error => {\n      //Mostrar Mensaje Proceso no instanciado\n      console.error('api error: ', error);\n    });\n  }\n\n  function toggleModalWatchProcess() {\n    setShowDisplayModal(!ShowDisplayModal);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-content\",\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        title: t(\"Dashboard\"),\n        breadcrumbItem: t(\"Inbox\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"h4\",\n            children: t(\"Management\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-title-desc\",\n            children: t(\"Inboxofthecommercialcreditprocess\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n            active: isActiveLoading,\n            spinner: true,\n            text: t(\"Processinginformation\"),\n            children: dataHeader.length > 0 ? /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n              keyField: \"uniqueData\",\n              data: dataBody,\n              columns: dataHeader,\n              search: true,\n              children: props => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"\",\n                children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                  className: \"custome-search-field float-end\",\n                  delay: 1000,\n                  placeholder: t(\"Search\"),\n                  ...props.searchProps\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, {\n                  keyField: \"uniqueData\",\n                  bootstrap4: true,\n                  bordered: false,\n                  striped: true,\n                  hover: true,\n                  condensed: true,\n                  classes: \"styled-table\",\n                  style: {\n                    cursor: \"pointer\"\n                  },\n                  data: dataBody,\n                  columns: dataHeader,\n                  ...props.baseProps,\n                  pagination: paginationFactory({\n                    sizePerPage: 30,\n                    sizePerPageList: [30]\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), showResults && /*#__PURE__*/_jsxDEV(CreditProposalPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), processInstanceId && /*#__PURE__*/_jsxDEV(ModalWatchProces, {\n      isOpen: ShowDisplayModal,\n      toggle: () => {\n        toggleModalWatchProcess();\n      },\n      svg: svg,\n      processInstanceId: processInstanceId,\n      t: tr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(ModalTransferProcess, {\n      isOpen: ShowModalTransfer,\n      toggle: () => {\n        setShowModalTransfer(!ShowModalTransfer);\n      },\n      data: transferData,\n      updateData: () => {\n        console.log(\"updateData\");\n        let timer = setTimeout(() => {\n          getDashBoard();\n        }, 2000);\n        return () => clearTimeout(timer);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"U5GDY2q/xMzowgLxLWGEoQxpxy8=\", false, function () {\n  return [useHistory, useTranslation];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/Dashboard/index.js"],"names":["React","useState","Link","PropTypes","Breadcrumbs","useTranslation","useLocation","useHistory","Button","Label","Input","CardHeader","CardTitle","InputGroup","Table","CardFooter","Row","Col","Card","CardBody","Accordion","SalesAnalytics","ScatterChart","CreditProposalPage","ApiServiceBpm","BootstrapTable","ToolkitProvider","Search","paginationFactory","ApiServiceCore","opt","ResultadoChecklistCentroArchivoModel","ModalWatchProces","formatCurrency","translationHelpers","LoadingOverlay","TaskStatus","Currency","ModalTransferProcess","SearchBar","Dashboard","history","ordernar","t","i18n","tc","tr","customTotal","from","to","size","useEffect","fixedDashboard","process","env","REACT_APP_FIXED_DASHBOARD","getDashBoard","showResults","setShowResults","dataList","setDataLista","dataOptions","setDataOptions","dataHeader","setDataHeader","dataBody","setDataBody","ShowDisplayModal","setShowDisplayModal","processInstanceId","setProcessInstanceId","isActiveLoading","setisActiveLoading","svg","setSvg","ShowModalTransfer","setShowModalTransfer","transferData","settransferData","jsonPrioridad","value","label","dataRows","setdataRows","api","then","data","console","log","results","orderByJSON","filter","x","priority","map","$$","action","e","instanceId","toggleModalWatchProcess","status","pathname","catch","error","options","textLabels","body","noMatch","toolTip","columnHeaderTooltip","column","pagination","next","previous","rowsPerPage","displayRows","sizePerPage","sizePerPageList","text","toolbar","search","downloadCsv","print","viewColumns","filterTable","all","title","reset","titleAria","selectedRows","delete","deleteAria","columns","dataField","sort","NewInstance","apiServiceBPM","startProcess","number","undefined","getTasksByPrcess","result","startedStatusTask","taskId","iniresult","push","customerId","transactionId","processId","PROCESS_BUSQUEDADESCARTE","toString","activityId","ACT_NONE","taskStatus","length","props","searchProps","cursor","baseProps","timer","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport PropTypes from 'prop-types';\r\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport {\r\n  Button,\r\n  Label,\r\n  Input,\r\n  CardHeader,\r\n  CardTitle,\r\n  InputGroup,\r\n  Table,\r\n  CardFooter,\r\n  Row, Col, Card, CardBody\r\n} from \"reactstrap\"\r\nimport { Accordion } from 'react-bootstrap';\r\nimport SalesAnalytics from \"./sales-analytics\"\r\nimport ScatterChart from \"./scatter-analytics\"\r\nimport CreditProposalPage from '../CommercialCredit/5_PropuestaCredito/CreditProposalPage'\r\nimport ApiServiceBpm from \"../../services/BpmServices/Services\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ApiServiceCore from \"../../services/CoreServices/Services\";\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport { ResultadoChecklistCentroArchivoModel } from \"../../models\";\r\n\r\nimport ModalWatchProces from \"./ModalWacthProcess\";\r\nimport { formatCurrency, translationHelpers } from '../../helpers';\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\n//import ActiveDirectoryService from \"../../services/ActiveDirectory\";\r\nimport TaskStatus from \"../../components/ActivityTask/taskStatus\";\r\nimport Currency from \"../../helpers/currency\";\r\nimport ModalTransferProcess from \"./ModalTransferProcess\";\r\n\r\nconst { SearchBar } = Search;\r\n\r\nconst Dashboard = () => {\r\n  const history = useHistory();\r\n  const ordernar = new Currency()\r\n  const { t, i18n } = useTranslation();\r\n  const [tc, tr] = translationHelpers('commercial_credit', 'translation');\r\n\r\n  const customTotal = (from, to, size) => (\r\n    <span className=\"react-bootstrap-table-pagination-total\">\r\n      {t('Showing')} {from} {t('to')} {to} {t('of')} {size} {t('Results')}\r\n    </span>\r\n  );\r\n  React.useEffect(() => {\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n    /*                       Llamamos a la funcion para que se pueda renderizar y llenar la tabla                      */\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n\r\n    const fixedDashboard = process.env.REACT_APP_FIXED_DASHBOARD;\r\n    if (fixedDashboard) {\r\n      // If .env has REACT_APP_FIXED_DASHBOARD, load fixed data\r\n      // LoadData();\r\n    }\r\n    else {\r\n      getDashBoard();\r\n    }\r\n    //LoadData();\r\n  }, []);\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                                Variables de estados                                                */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [dataList, setDataLista] = useState([]);\r\n  const [dataOptions, setDataOptions] = useState([]);\r\n\r\n  const [dataHeader, setDataHeader] = useState([]);\r\n  const [dataBody, setDataBody] = useState([]);\r\n  const [ShowDisplayModal, setShowDisplayModal] = useState(false);\r\n  const [processInstanceId, setProcessInstanceId] = useState(null);\r\n  const [isActiveLoading, setisActiveLoading] = useState(false);\r\n  const [svg, setSvg] = useState(null);\r\n\r\n  const [ShowModalTransfer, setShowModalTransfer] = useState(false);\r\n  const [transferData, settransferData] = useState(null);  \r\n\r\n  const jsonPrioridad = [\r\n    { value: \"1\", label: \"Muy Urgente\" },\r\n    { value: \"2\", label: \"Urgencia Moderada\" },\r\n    { value: \"3\", label: \"Importante\" },\r\n    { value: \"4\", label: \"Baja Urgencia\" },\r\n    { value: \"5\", label: \" Sin Urgencia\" }]\r\n  const [dataRows, setdataRows] = useState(null);\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                         Permite cargar los datos a la tabla                                        */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  async function getDashBoard() {\r\n    \r\n    setisActiveLoading(true)\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n    /*   Instanciamos la api para el result de la api y asi enviar al modelo para retornar un json armado para la tabla   */\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n    const api = new ApiServiceBpm();\r\n    //api.getLineSerial(\"asd\",\"asd\");\r\n\r\n    api.getDashBoard()\r\n      .then((data) => {\r\n        setisActiveLoading(false)\r\n        console.log(\"getDashBoard\", data);\r\n        /* ------------------------------------------------------------------------------------------------------------------ */\r\n        /*             Seteamos los valores de las columnas y filas a la variable que va al componene de la tabla             */\r\n        /* ------------------------------------------------------------------------------------------------------------------ */\r\n        data.results = [...ordernar.orderByJSON(data.results.filter(x => (+x.priority) > 0), \"priority\", \"asc\"), ...data.results.filter(x => (+x.priority) == 0)]\r\n        console.log(\"getDashBoard\", data);\r\n        setDataBody([...data.results.map($$ => {\r\n          $$.action = (\r\n            <>\r\n              {$$.action}\r\n              <Link to=\"#\" onClick={(e) => { settransferData($$); setShowModalTransfer(true) }}>\r\n                <i className=\"mdi mdi-transit-transfer mdi-24px\"></i>\r\n              </Link>\r\n              <Link to=\"#\" onClick={(e) => { setProcessInstanceId($$.instanceId); toggleModalWatchProcess(); }}>\r\n                <i className=\"mdi mdi-eye mdi-24px\"></i>\r\n              </Link>\r\n              <TaskStatus taskStatus={$$.status}\r\n                pathname={$$.pathname}\r\n                data={$$.data}\r\n              />\r\n            </>\r\n          )\r\n          return $$;\r\n        })]);\r\n\r\n\r\n      })\r\n      .catch((error) => {\r\n        setisActiveLoading(false)\r\n        console.error(error);\r\n      });\r\n\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n    /*        Creamos un json con los datos que va a tener la tabla en general para mostrar resultados o paginacion       */\r\n    /* ------------------------------------------------------------------------------------------------------------------ */\r\n    let options = {\r\n      textLabels: {\r\n        body: {\r\n          noMatch: t(\"SorryNoMatchingRecordsWereFfound\"),\r\n          toolTip: t(\"Order\"),\r\n          columnHeaderTooltip: (column) => `${t(\"OrderBy\")} ${column.label}`,\r\n        },\r\n        pagination: {\r\n          next: t(\"Next\"),\r\n          previous: t(\"Prev\"),\r\n          rowsPerPage: t(\"RowsPerPage\"),\r\n          displayRows: t(\"From\"),\r\n          sizePerPage: 5,\r\n          sizePerPageList: [{\r\n            text: '5th', value: 5\r\n          }, {\r\n            text: '10th', value: 10\r\n          }, {\r\n            text: 'All', value: 20\r\n          }]\r\n        },\r\n        toolbar: {\r\n          search: t(\"Search\"),\r\n          downloadCsv: t(\"DownloadCSV\"),\r\n          print: t(\"Print\"),\r\n          viewColumns: t(\"ViewColumns\"),\r\n          filterTable: t(\"FilterTable\"),\r\n        },\r\n        filter: {\r\n          all: t(\"All\"),\r\n          title: t(\"Filter\"),\r\n          reset: t(\"Restore\"),\r\n        },\r\n        viewColumns: {\r\n          title: t(\"ShowColumns\"),\r\n          titleAria: t(\"ShowHideColumns\"),\r\n        },\r\n        selectedRows: {\r\n          text: t(\"SelectedRows\"),\r\n          delete: t(\"Delete\"),\r\n          deleteAria: t(\"DeleteSelectedRows\"),\r\n        },\r\n      },\r\n    };\r\n\r\n    //Header de la Tabla de Bandeja de Entrada\r\n    const columns = [\r\n      //  { text: \"ID\", dataField: 'uniqueData' },\r\n      { text: t(\"Date\"), dataField: 'date', sort: true },\r\n      { text: t(\"Process\"), dataField: 'instanceId', sort: true },\r\n      { text: t(\"Procedure\"), dataField: 'transactionId', sort: true },\r\n      { text: t(\"AssignedTo\"), dataField: 'asignedTo', sort: true },\r\n      { text: t(\"Client\"), dataField: 'personName', sort: true },\r\n      { text: t(\"Activity\"), dataField: 'activity', sort: true },\r\n      { text: t(\"Status\"), dataField: 'status', sort: true },\r\n      { text: t(\"Prioridad\"), dataField: 'priorityName', sort: true },\r\n      { text: \"\", dataField: 'action' }\r\n    ];\r\n    setDataHeader(columns);\r\n    setDataOptions(options);\r\n  }\r\n\r\n\r\n\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                               Funcion temporal para poder navegar entre las pantallas                              */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n\r\n  function NewInstance() {\r\n\r\n    //creamos un nueva instancia de proceso en BPM...\r\n    const apiServiceBPM = new ApiServiceBpm();\r\n    apiServiceBPM.startProcess()\r\n      .then((number) => {\r\n\r\n        if (number !== null && number !== undefined && number > 0) {\r\n          //buscamos la tarea que crea el nuevo proceso\r\n          apiServiceBPM.getTasksByPrcess(number)\r\n            .then((result) => {\r\n              if (result !== undefined) {\r\n\r\n                //Inicializamos la nueva tarea en BPM\r\n                apiServiceBPM.startedStatusTask(result.taskId)\r\n                  .then((iniresult) => {\r\n                    if (iniresult !== undefined) {\r\n                      //datos que le enviamos a la pantalla de busqueda y descarte\r\n                      history.push({\r\n                        pathname: '/creditocomercial/busquedadescarte',\r\n                        data: { customerId: \"\", transactionId: \"\", processId: opt.PROCESS_BUSQUEDADESCARTE.toString(), activityId: opt.ACT_NONE.toString(), instanceId: result.instanceId, taskId: result.taskId, taskStatus: result.status },\r\n                      });\r\n                    }\r\n                  })\r\n              }\r\n            })\r\n        }\r\n      })\r\n      .catch((error) => {\r\n\r\n        //Mostrar Mensaje Proceso no instanciado\r\n        console.error('api error: ', error);\r\n      });\r\n  }\r\n\r\n  function toggleModalWatchProcess() {\r\n    setShowDisplayModal(!ShowDisplayModal)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <Breadcrumbs title={t(\"Dashboard\")} breadcrumbItem={t(\"Inbox\")} />\r\n\r\n        <Card>\r\n          <CardBody>\r\n\r\n            <CardTitle className=\"h4\">{t(\"Management\")}</CardTitle>\r\n            <p className=\"card-title-desc\">\r\n              {t(\"Inboxofthecommercialcreditprocess\")}\r\n            </p>\r\n\r\n            <LoadingOverlay active={isActiveLoading} spinner text={t(\"Processinginformation\")}>\r\n              {dataHeader.length > 0 ?\r\n                <ToolkitProvider\r\n                  keyField=\"uniqueData\"\r\n                  data={dataBody}\r\n                  columns={dataHeader}\r\n                  search\r\n                >\r\n                  {\r\n                    props => (\r\n                      <div className=\"\">\r\n\r\n                        <SearchBar className=\"custome-search-field float-end\" delay={1000} placeholder={t(\"Search\")} {...props.searchProps} />\r\n                        <BootstrapTable\r\n                          keyField=\"uniqueData\"\r\n                          bootstrap4\r\n                          bordered={false}\r\n                          striped\r\n                          hover\r\n                          condensed\r\n                          classes='styled-table'\r\n                          style={{ cursor: \"pointer\" }}\r\n                          data={dataBody} columns={dataHeader}\r\n                          {...props.baseProps}\r\n                          pagination={paginationFactory({\r\n                            sizePerPage: 30,\r\n                            sizePerPageList: [30]\r\n                          })}\r\n                        />\r\n                      </div>\r\n                    )\r\n                  }\r\n                </ToolkitProvider>\r\n                : null}\r\n            </LoadingOverlay>\r\n            {showResults && <CreditProposalPage />}\r\n\r\n\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n      {processInstanceId && (<ModalWatchProces isOpen={ShowDisplayModal} toggle={() => { toggleModalWatchProcess() }} svg={svg} processInstanceId={processInstanceId} t={tr} />)}\r\n    \r\n      <ModalTransferProcess isOpen={ShowModalTransfer} toggle={() => { setShowModalTransfer(!ShowModalTransfer) }} data={transferData} \r\n        updateData={()=> { console.log(\"updateData\");\r\n          let timer = setTimeout(() => { getDashBoard();}, 2000);\r\n          return () => clearTimeout(timer);}  \r\n        }  />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Dashboard\r\n"]},"metadata":{},"sourceType":"module"}