{"ast":null,"code":"import { BackendServices, CoreServices } from \"../services\";\nconst backendServices = new BackendServices();\nconst coreServices = new CoreServices();\nexport default class AutoSaveData {\n  //salvamos deudas de un tramite\n  async saveInitialData(transactionId) {\n    this.saveDebts(transactionId);\n    this.saveAccountMovements(transactionId);\n    this.saveCorporateExhibition(transactionId);\n    this.saveCorporateExhibitionByClients(transactionId);\n    this.saveFacilities(transactionId);\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibition(transactionId) {\n    try {\n      /*var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\n      //Borrar de BD todas las Exposicion Corporativa con \"t24\"= true\n      await backendServices.eliminarExposicionCorporativaBD(transactionId);\n      var dataResult = await coreServices.getCorporateExhibition(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        let datoSent = {\n          \"transactId\": Number(transactionId),\n          //\"accountNumber\": data.name,\n          //\"t24ClientId\": data.customerNumberT24,\n          \"description\": dataResult[i].name,\n          \"approved\": dataResult[i].approved,\n          \"currentBalance\": dataResult[i].balance,\n          \"proposed\": dataResult[i].proposal,\n          \"ltv\": 0,\n          t24: true,\n          \"difference\": dataResult[i].variation,\n          \"guarantee\": 0\n        };\n        await backendServices.saveExposicionCorporativaBD(datoSent);\n      }\n    } catch (err) {}\n  } //salvamos exposicion por tramite\n\n\n  async saveCorporateExhibitionByClients(transactionId) {\n    try {\n      /*var dataResult = await backendServices.getExposicionCorporativaClienteBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\n      backendServices.eliminarExposicionCorporativaClienteBD(transactionId);\n      var debtors = await backendServices.consultarDeudores(transactionId);\n\n      if (debtors === null || debtors === undefined) {\n        return undefined;\n      } //Borrar de BD todas las Exposicion Corporativa Cliente con \"t24\"= true\n\n\n      for (var i = 0; i < debtors.length; i++) {\n        var partyId = debtors[i].customerNumberT24;\n        var debtorName = debtors[i] !== undefined ? debtors[i].typePerson == \"2\" ? debtors[i].name : debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2 : \"\";\n        var dataResult = await coreServices.getCorporateExhibitionByClients(partyId);\n\n        for (let p = 0; p < dataResult.length; p++) {\n          let datoSent = {\n            \"transactId\": Number(transactionId),\n            \"accountNumber\": debtorName,\n            \"t24ClientId\": partyId,\n            \"description\": dataResult[p].name,\n            \"approved\": dataResult[p].approved,\n            \"currentBalance\": dataResult[p].balance,\n            \"proposed\": dataResult[p].proposal,\n            \"ltv\": 0,\n            t24: true,\n            \"difference\": dataResult[p].variation,\n            \"guarantee\": 0\n          };\n          console.log(\"saveCorporateExhibitionByClients\", datoSent);\n          await backendServices.saveExposicionCorporativaClienteBD(datoSent);\n        }\n      }\n    } catch (err) {}\n  } //salvamos facilidades por tramite\n\n\n  async saveFacilities(transactionId) {\n    try {\n      var request = await backendServices.consultGeneralDataPropCred(transactionId);\n      var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\n      /*if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\n      //Borrar de BD todas las Facilidades con \"t24\"= true\n\n      console.log(\"saveFacilities\", dataResult);\n      backendServices.eliminarFacilidadesFisica(request[0].requestId);\n      var dataResult = await coreServices.getFacilitiesByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        var _dataResult$i$facilit, _request$0$requestId;\n\n        let datoSent = {\n          \"facilityNumber\": dataResult[i].AcctId,\n          \"cr\": dataResult[i].AcctId,\n          \"amount\": dataResult[i].approvedAmount,\n          \"debtor\": dataResult[i].debtorName,\n          \"clientTypeId\": dataResult[i].debtorId,\n          \"balance\": dataResult[i].actualBalance,\n          \"purpose\": \"\",\n          \"sublimits\": \"\",\n          \"proposalRate\": 0,\n          \"noSubsidyRate\": 0,\n          \"effectiveRate\": 0,\n          \"feci\": false,\n          \"termDays\": 0,\n          \"termDescription\": \"\",\n          \"ltv\": 0,\n          \"finantialConditions\": \" \",\n          \"environmentRiskCategory\": 0,\n          \"covenant\": \" \",\n          \"environmentRiskOpinion\": \" \",\n          \"finantialCovenant\": \" \",\n          \"legalDocumentation\": \"  \",\n          \"otherConditions\": \" \",\n          \"creditRiskOpinion\": \" \",\n          \"provision\": \" \",\n          \"proposalTypeId\": \"\",\n          \"proposalTypeName\": \"\",\n          \"facilityTypeId\": (_dataResult$i$facilit = dataResult[i].facilityType) !== null && _dataResult$i$facilit !== void 0 ? _dataResult$i$facilit : \"\",\n          \"termType\": \"\",\n          \"origin\": \"CORE\",\n          \"applyEscrow\": false,\n          \"facilityId\": 0,\n          \"requestId\": (_request$0$requestId = request[0].requestId) !== null && _request$0$requestId !== void 0 ? _request$0$requestId : \"\",\n          \"startingAmount\": 0,\n          t24: true,\n          \"term\": \"\"\n        };\n        await backendServices.newFacilityPropCred(datoSent);\n        console.log(\"saveFacilities\", dataResult);\n      }\n    } catch (err) {}\n  } //salvamos deudas a Corto y largo Plazo\n\n\n  async saveDebts(transactionId) {\n    try {\n      var checkCP = false;\n      var checkLP = false;\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\n\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {} else {\n        checkCP = true;\n      }\n\n      var dataResultLP = await backendServices.consultBankRelationsDebtsLP(transactionId);\n\n      if (dataResultLP !== undefined && dataResultLP !== null && dataResultLP.bankingRelationLPDTOList.length > 0) {} else {\n        checkLP = true;\n      }\n\n      if (!checkCP && !checkLP) {\n        return;\n      }\n\n      var dataResultCore = await coreServices.getAllTermDebtsByTransaction(transactionId);\n\n      if (checkCP) {\n        for (var short of dataResultCore.shortTermresult) {\n          console.log(\"shortTermresult\", short);\n\n          if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {\n            dataResult = dataResult.getBankingRelationCPDTOList;\n            let record = dataResult.find(x => {\n              var _ref;\n\n              return (_ref = x.codeT24 == (short === null || short === void 0 ? void 0 : short.codeT24)) !== null && _ref !== void 0 ? _ref : \"\";\n            });\n\n            if (record !== undefined && record != null) {\n              var _short$dateT;\n\n              if ((_short$dateT = short === null || short === void 0 ? void 0 : short.dateT24) !== null && _short$dateT !== void 0 ? _short$dateT : \"\" > record.dateT24) {\n                var _record$codeT, _short$dateT2;\n\n                //Verificar si existe un record en dataResult.getBankingRelationCPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\n                let dataSet = {\n                  \"facilityType\": record.facilityType,\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),\n                  //ACTUALIZA\n                  \"date\": record.startDate,\n                  \"expirationDate\": record.endDate,\n                  \"debitBalance1\": Number(record.balance.toFixed(2)),\n                  \"debitBalance2\": record.debitBalance2,\n                  \"debitBalance3\": record.debitBalance3,\n                  \"paymentHistory\": record.paymentHistory,\n                  \"rate\": record.rate,\n                  \"fee\": record.fee,\n                  \"bail\": record.bail,\n                  \"fundDestiny\": record.fundDestiny,\n                  status: true,\n                  t24: true,\n                  \"bank\": record.bank,\n                  \"transactId\": Number(transactionId),\n                  \"codeT24\": (_record$codeT = record === null || record === void 0 ? void 0 : record.codeT24) !== null && _record$codeT !== void 0 ? _record$codeT : \"\",\n                  \"dateT24\": (_short$dateT2 = short === null || short === void 0 ? void 0 : short.dateT24) !== null && _short$dateT2 !== void 0 ? _short$dateT2 : \"\",\n                  //ACTUALIZA\n                  \"debtId\": record === null || record === void 0 ? void 0 : record.debtId\n                };\n                await backendServices.updateBankRelationsDebtsCP(dataSet);\n              } else if ((short === null || short === void 0 ? void 0 : short.dateT24) == \"\" || (short === null || short === void 0 ? void 0 : short.dateT24) == null) {\n                var _short$codeT, _short$dateT3;\n\n                //si no tiene fecha actualizar todo\n                let dataSet = {\n                  \"facilityType\": short.facilityType,\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),\n                  //ACTUALIZA\n                  \"date\": short.startDate,\n                  //ACTUALIZA\n                  \"expirationDate\": short.endDate,\n                  //ACTUALIZA\n                  \"debitBalance1\": Number(short.balance.toFixed(2)),\n                  //ACTUALIZA\n                  \"debitBalance2\": record.debitBalance2,\n                  \"debitBalance3\": record.debitBalance3,\n                  \"paymentHistory\": short.paymentHistory,\n                  //ACTUALIZA\n                  \"rate\": record.rate,\n                  \"fee\": record.fee,\n                  \"bail\": record.bail,\n                  \"fundDestiny\": record.fundDestiny,\n                  status: true,\n                  t24: true,\n                  \"bank\": short.bank,\n                  //ACTUALIZA\n                  \"transactId\": Number(transactionId),\n                  \"codeT24\": (_short$codeT = short === null || short === void 0 ? void 0 : short.codeT24) !== null && _short$codeT !== void 0 ? _short$codeT : \"\",\n                  //ACTUALIZA\n                  \"dateT24\": (_short$dateT3 = short === null || short === void 0 ? void 0 : short.dateT24) !== null && _short$dateT3 !== void 0 ? _short$dateT3 : \"\",\n                  //ACTUALIZA\n                  \"debtId\": record === null || record === void 0 ? void 0 : record.debtId\n                };\n                await backendServices.updateBankRelationsDebtsCP(dataSet);\n              }\n            } else {\n              var _short$codeT2, _short$dateT4;\n\n              // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\n              let dataSet = {\n                \"facilityType\": short.facilityType,\n                //NUEVO\n                \"amount\": Number(short.approvedAmount.toFixed(2)),\n                //NUEVO\n                \"date\": short.startDate,\n                //NUEVO\n                \"expirationDate\": short.endDate,\n                //NUEVO\n                \"debitBalance1\": Number(short.balance.toFixed(2)),\n                //NUEVO\n                \"debitBalance2\": 0,\n                //NUEVO\n                \"debitBalance3\": 0,\n                //NUEVO\n                \"paymentHistory\": short.paymentHistory,\n                //NUEVO\n                \"rate\": 0,\n                //NUEVO\n                \"fee\": 0,\n                //NUEVO\n                \"bail\": 0,\n                //NUEVO\n                \"fundDestiny\": \"\",\n                //NUEVO\n                status: true,\n                //NUEVO\n                t24: true,\n                //NUEVO\n                \"bank\": short.bank,\n                //NUEVO\n                \"transactId\": Number(transactionId),\n                //NUEVO\n                \"codeT24\": (_short$codeT2 = short === null || short === void 0 ? void 0 : short.codeT24) !== null && _short$codeT2 !== void 0 ? _short$codeT2 : \"\",\n                //NUEVO\n                \"dateT24\": (_short$dateT4 = short === null || short === void 0 ? void 0 : short.dateT24) !== null && _short$dateT4 !== void 0 ? _short$dateT4 : \"\" //NUEVO\n\n              };\n              await backendServices.newBankingRelationsDebtsCP(dataSet);\n            }\n          }\n        }\n      }\n\n      if (checkLP) {\n        for (var long of dataResultCore.longTermresult) {\n          if (dataResultLP !== undefined && dataResultLP !== null && dataResultLP.bankingRelationLPDTOList.length > 0) {\n            dataResultLP = dataResultLP.bankingRelationLPDTOList;\n            let record = dataResult.find(x => {\n              var _ref2;\n\n              return (_ref2 = x.codeT24 == (long === null || long === void 0 ? void 0 : long.codeT24)) !== null && _ref2 !== void 0 ? _ref2 : \"\";\n            });\n\n            if (record !== undefined && record != null) {\n              var _long$dateT;\n\n              if ((_long$dateT = long === null || long === void 0 ? void 0 : long.dateT24) !== null && _long$dateT !== void 0 ? _long$dateT : \"\" > record.dateT24) {\n                var _short$codeT3, _short$dateT5;\n\n                //Verificar si existe un record en dataResult.getBankingRelationCPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\n                let dataSet = {\n                  \"facilityType\": record.facilityType,\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),\n                  //ACTUALIZA\n                  \"date\": record.startDate,\n                  \"expirationDate\": record.endDate,\n                  \"debitBalance1\": Number(record.balance.toFixed(2)),\n                  \"debitBalance2\": record.debitBalance2,\n                  \"debitBalance3\": record.debitBalance3,\n                  \"paymentHistory\": record.paymentHistory,\n                  \"rate\": record.rate,\n                  \"fee\": record.fee,\n                  \"bail\": record.bail,\n                  \"fundDestiny\": record.fundDestiny,\n                  status: true,\n                  t24: true,\n                  \"bank\": record.bank,\n                  \"transactId\": Number(transactionId),\n                  \"codeT24\": (_short$codeT3 = short === null || short === void 0 ? void 0 : short.codeT24) !== null && _short$codeT3 !== void 0 ? _short$codeT3 : \"\",\n                  //ACTUALIZA\n                  \"dateT24\": (_short$dateT5 = short === null || short === void 0 ? void 0 : short.dateT24) !== null && _short$dateT5 !== void 0 ? _short$dateT5 : \"\",\n                  //ACTUALIZA\n                  \"debtId\": record === null || record === void 0 ? void 0 : record.debtId\n                };\n                await backendServices.updateBankRelationsDebtsLP(dataSet);\n              } else if ((long === null || long === void 0 ? void 0 : long.dateT24) == \"\" || (long === null || long === void 0 ? void 0 : long.dateT24) == null) {\n                var _short$codeT4, _short$dateT6;\n\n                //si no tiene fecha actualizar todo\n                let dataSet = {\n                  \"facilityType\": short.facilityType,\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),\n                  //ACTUALIZA\n                  \"date\": short.startDate,\n                  //ACTUALIZA\n                  \"expirationDate\": short.endDate,\n                  //ACTUALIZA\n                  \"debitBalance1\": Number(short.balance.toFixed(2)),\n                  //ACTUALIZA\n                  \"debitBalance2\": record.debitBalance2,\n                  \"debitBalance3\": record.debitBalance3,\n                  \"paymentHistory\": short.paymentHistory,\n                  //ACTUALIZA\n                  \"rate\": record.rate,\n                  \"fee\": record.fee,\n                  \"bail\": record.bail,\n                  \"fundDestiny\": record.fundDestiny,\n                  status: true,\n                  t24: true,\n                  \"bank\": short.bank,\n                  //ACTUALIZA\n                  \"transactId\": Number(transactionId),\n                  \"codeT24\": (_short$codeT4 = short === null || short === void 0 ? void 0 : short.codeT24) !== null && _short$codeT4 !== void 0 ? _short$codeT4 : \"\",\n                  \"dateT24\": (_short$dateT6 = short === null || short === void 0 ? void 0 : short.dateT24) !== null && _short$dateT6 !== void 0 ? _short$dateT6 : \"\",\n                  //ACTUALIZA\n                  \"debtId\": record === null || record === void 0 ? void 0 : record.debtId\n                };\n                await backendServices.updateBankRelationsDebtsLP(dataSet);\n              }\n            } else {\n              var _long$codeT, _long$dateT2;\n\n              // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\n              let dataSet = {\n                \"facilityType\": long.facilityType,\n                \"amount\": Number(long.approvedAmount.toFixed(2)),\n                \"date\": long.startDate,\n                \"expirationDate\": long.endDate,\n                \"debitBalance1\": Number(long.balance.toFixed(2)),\n                \"debitBalance2\": 0,\n                \"debitBalance3\": 0,\n                \"paymentHistory\": long.paymentHistory,\n                \"rate\": 0,\n                \"fee\": 0,\n                \"bail\": 0,\n                \"fundDestiny\": \"\",\n                status: true,\n                t24: true,\n                \"bank\": long.bank,\n                \"transactId\": Number(transactionId),\n                \"codeT24\": (_long$codeT = long === null || long === void 0 ? void 0 : long.codeT24) !== null && _long$codeT !== void 0 ? _long$codeT : \"\",\n                \"dateT24\": (_long$dateT2 = long === null || long === void 0 ? void 0 : long.dateT24) !== null && _long$dateT2 !== void 0 ? _long$dateT2 : \"\"\n              };\n              await backendServices.newBankingRelationsDebtsLP(dataSet);\n            }\n          }\n        }\n      }\n    } catch (err) {\n      console.error(\"newBankingRelationsDebts\", err);\n    }\n  } //salvamos facilidades por tramite\n\n\n  async saveAccountMovements(transactionId) {\n    try {\n      //var dataResult = await backendServices.consultMovementsBank(transactionId);\n      //if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\n      //return;\n      //}\n      //Borrar de BD todos los Movimientos de Cuenta cuyo \"t24\"= true\n      backendServices.deleteFisicalMovementsAccountsIGR(transactionId);\n      var dataResult = await coreServices.getAccountMovementsByTransaction(transactionId);\n\n      for (let i = 0; i < dataResult.length; i++) {\n        //aqui cargamos por cuentas\n        let cuenta = dataResult[i].AcctId;\n\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\n\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\n            let jsonSet = {\n              \"trasactId\": Number(transactionId),\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\n              \"observations\": \"\",\n              \"accountNumber\": cuenta,\n              \"t24\": true\n            };\n            await backendServices.newMovementsAccountsIGR(jsonSet);\n          }\n        }\n      }\n    } catch (err) {}\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/helpers/AutoSaveData.js"],"names":["BackendServices","CoreServices","backendServices","coreServices","AutoSaveData","saveInitialData","transactionId","saveDebts","saveAccountMovements","saveCorporateExhibition","saveCorporateExhibitionByClients","saveFacilities","eliminarExposicionCorporativaBD","dataResult","getCorporateExhibition","i","length","datoSent","Number","name","approved","balance","proposal","t24","variation","saveExposicionCorporativaBD","err","eliminarExposicionCorporativaClienteBD","debtors","consultarDeudores","undefined","partyId","customerNumberT24","debtorName","typePerson","name2","lastName","lastName2","getCorporateExhibitionByClients","p","console","log","saveExposicionCorporativaClienteBD","request","consultGeneralDataPropCred","consultarFacilidadesT24","requestId","eliminarFacilidadesFisica","getFacilitiesByTransaction","AcctId","approvedAmount","debtorId","actualBalance","facilityType","newFacilityPropCred","checkCP","checkLP","consultBankingRelationsDebtsCP","getBankingRelationCPDTOList","dataResultLP","consultBankRelationsDebtsLP","bankingRelationLPDTOList","dataResultCore","getAllTermDebtsByTransaction","short","shortTermresult","record","find","x","codeT24","dateT24","dataSet","toFixed","startDate","endDate","debitBalance2","debitBalance3","paymentHistory","rate","fee","bail","fundDestiny","status","bank","debtId","updateBankRelationsDebtsCP","newBankingRelationsDebtsCP","long","longTermresult","updateBankRelationsDebtsLP","newBankingRelationsDebtsLP","error","deleteFisicalMovementsAccountsIGR","getAccountMovementsByTransaction","cuenta","j","dataByYear","k","dataresult","jsonSet","year","month","deposits","amount","newMovementsAccountsIGR"],"mappings":"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","sourcesContent":["\r\nimport { BackendServices, CoreServices } from \"../services\";\r\n\r\nconst backendServices = new BackendServices();\r\nconst coreServices = new CoreServices();\r\n\r\nexport default class AutoSaveData {\r\n\r\n\r\n  //salvamos deudas de un tramite\r\n  async saveInitialData(transactionId) {\r\n    this.saveDebts(transactionId);\r\n    this.saveAccountMovements(transactionId);\r\n    this.saveCorporateExhibition(transactionId);\r\n    this.saveCorporateExhibitionByClients(transactionId);\r\n    this.saveFacilities(transactionId);\r\n  }\r\n\r\n  //salvamos exposicion por tramite\r\n  async saveCorporateExhibition(transactionId) {\r\n    try {\r\n\r\n      /*var dataResult = await backendServices.getExposicionCorporativaBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\r\n\r\n      //Borrar de BD todas las Exposicion Corporativa con \"t24\"= true\r\n      await backendServices.eliminarExposicionCorporativaBD(transactionId);\r\n\r\n      var dataResult = await coreServices.getCorporateExhibition(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        let datoSent = {\r\n          \"transactId\": Number(transactionId),\r\n          //\"accountNumber\": data.name,\r\n          //\"t24ClientId\": data.customerNumberT24,\r\n          \"description\": dataResult[i].name,\r\n          \"approved\": dataResult[i].approved,\r\n          \"currentBalance\": dataResult[i].balance,\r\n          \"proposed\": dataResult[i].proposal,\r\n          \"ltv\": 0,\r\n          t24: true,\r\n          \"difference\": dataResult[i].variation,\r\n          \"guarantee\": 0,\r\n        }\r\n        await backendServices.saveExposicionCorporativaBD(datoSent)\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos exposicion por tramite\r\n  async saveCorporateExhibitionByClients(transactionId) {\r\n    try {\r\n\r\n      /*var dataResult = await backendServices.getExposicionCorporativaClienteBD(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\r\n\r\n      backendServices.eliminarExposicionCorporativaClienteBD(transactionId)\r\n\r\n      var debtors = await backendServices.consultarDeudores(transactionId);\r\n      if (debtors === null || debtors === undefined) {\r\n        return undefined;\r\n      }\r\n\r\n      //Borrar de BD todas las Exposicion Corporativa Cliente con \"t24\"= true\r\n\r\n      for (var i = 0; i < debtors.length; i++) {\r\n        var partyId = debtors[i].customerNumberT24;\r\n        var debtorName = debtors[i] !== undefined ? (debtors[i].typePerson == \"2\" ? debtors[i].name : (debtors[i].name + \" \" + debtors[i].name2 + \" \" + debtors[i].lastName + \" \" + debtors[i].lastName2)) : \"\";\r\n        var dataResult = await coreServices.getCorporateExhibitionByClients(partyId)\r\n        for (let p = 0; p < dataResult.length; p++) {\r\n          let datoSent = {\r\n            \"transactId\": Number(transactionId),\r\n            \"accountNumber\": debtorName,\r\n            \"t24ClientId\": partyId,\r\n            \"description\": dataResult[p].name,\r\n            \"approved\": dataResult[p].approved,\r\n            \"currentBalance\": dataResult[p].balance,\r\n            \"proposed\": dataResult[p].proposal,\r\n            \"ltv\": 0,\r\n            t24: true,\r\n            \"difference\": dataResult[p].variation,\r\n            \"guarantee\": 0,\r\n          }\r\n          console.log(\"saveCorporateExhibitionByClients\", datoSent);\r\n          await backendServices.saveExposicionCorporativaClienteBD(datoSent)\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  async saveFacilities(transactionId) {\r\n    try {\r\n\r\n      var request = await backendServices.consultGeneralDataPropCred(transactionId);\r\n      var dataResult = await backendServices.consultarFacilidadesT24(request[0].requestId);\r\n      /*if (dataResult !== undefined && dataResult !== null && dataResult.length > 0) {\r\n        return;\r\n      }*/\r\n\r\n      //Borrar de BD todas las Facilidades con \"t24\"= true\r\n      console.log(\"saveFacilities\", dataResult);\r\n      backendServices.eliminarFacilidadesFisica(request[0].requestId);\r\n\r\n      var dataResult = await coreServices.getFacilitiesByTransaction(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        let datoSent = {\r\n          \"facilityNumber\": dataResult[i].AcctId,\r\n          \"cr\": dataResult[i].AcctId,\r\n          \"amount\": dataResult[i].approvedAmount,\r\n          \"debtor\": dataResult[i].debtorName,\r\n          \"clientTypeId\": dataResult[i].debtorId,\r\n          \"balance\": dataResult[i].actualBalance,\r\n          \"purpose\": \"\",\r\n          \"sublimits\": \"\",\r\n          \"proposalRate\": 0,\r\n          \"noSubsidyRate\": 0,\r\n          \"effectiveRate\": 0,\r\n          \"feci\": false,\r\n          \"termDays\": 0,\r\n          \"termDescription\": \"\",\r\n          \"ltv\": 0,\r\n          \"finantialConditions\": \" \",\r\n          \"environmentRiskCategory\": 0,\r\n          \"covenant\": \" \",\r\n          \"environmentRiskOpinion\": \" \",\r\n          \"finantialCovenant\": \" \",\r\n          \"legalDocumentation\": \"  \",\r\n          \"otherConditions\": \" \",\r\n          \"creditRiskOpinion\": \" \",\r\n          \"provision\": \" \",\r\n          \"proposalTypeId\": \"\",\r\n          \"proposalTypeName\": \"\",\r\n          \"facilityTypeId\": dataResult[i].facilityType ?? \"\",\r\n          \"termType\": \"\",\r\n          \"origin\": \"CORE\",\r\n          \"applyEscrow\": false,\r\n          \"facilityId\": 0,\r\n          \"requestId\": request[0].requestId ?? \"\",\r\n          \"startingAmount\": 0,\r\n          t24: true,\r\n          \"term\": \"\"\r\n        }\r\n        await backendServices.newFacilityPropCred(datoSent)\r\n        console.log(\"saveFacilities\", dataResult);\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n  //salvamos deudas a Corto y largo Plazo\r\n  async saveDebts(transactionId) {\r\n    try {\r\n\r\n      var checkCP = false;\r\n      var checkLP = false;\r\n\r\n      var dataResult = await backendServices.consultBankingRelationsDebtsCP(transactionId);\r\n      if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) { }\r\n      else {\r\n        checkCP = true;\r\n      }\r\n      var dataResultLP = await backendServices.consultBankRelationsDebtsLP(transactionId);\r\n      if (dataResultLP !== undefined && dataResultLP !== null && dataResultLP.bankingRelationLPDTOList.length > 0) { }\r\n      else {\r\n        checkLP = true;\r\n      }\r\n\r\n      if (!checkCP && !checkLP) {\r\n        return;\r\n      }\r\n\r\n      var dataResultCore = await coreServices.getAllTermDebtsByTransaction(transactionId);\r\n\r\n      if (checkCP) {\r\n        for (var short of dataResultCore.shortTermresult) {\r\n          console.log(\"shortTermresult\", short);\r\n          if (dataResult !== undefined && dataResult !== null && dataResult.getBankingRelationCPDTOList.length > 0) {\r\n            dataResult = dataResult.getBankingRelationCPDTOList;\r\n            let record = dataResult.find(x => x.codeT24 == short?.codeT24 ?? \"\");\r\n            if (record !== undefined && record != null) {\r\n              if (short?.dateT24 ?? \"\" > record.dateT24) {\r\n                //Verificar si existe un record en dataResult.getBankingRelationCPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\r\n                let dataSet = {\r\n                  \"facilityType\": record.facilityType,\r\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),//ACTUALIZA\r\n                  \"date\": record.startDate,\r\n                  \"expirationDate\": record.endDate,\r\n                  \"debitBalance1\": Number(record.balance.toFixed(2)),\r\n                  \"debitBalance2\": record.debitBalance2,\r\n                  \"debitBalance3\": record.debitBalance3,\r\n                  \"paymentHistory\": record.paymentHistory,\r\n                  \"rate\": record.rate,\r\n                  \"fee\": record.fee,\r\n                  \"bail\": record.bail,\r\n                  \"fundDestiny\": record.fundDestiny,\r\n                  status: true,\r\n                  t24: true,\r\n                  \"bank\": record.bank,\r\n                  \"transactId\": Number(transactionId),\r\n                  \"codeT24\": record?.codeT24 ?? \"\",\r\n                  \"dateT24\": short?.dateT24 ?? \"\",//ACTUALIZA\r\n                  \"debtId\": record?.debtId,\r\n                }\r\n                await backendServices.updateBankRelationsDebtsCP(dataSet)\r\n              } else if (short?.dateT24 == \"\" || short?.dateT24 == null) {\r\n                //si no tiene fecha actualizar todo\r\n                let dataSet = {\r\n                  \"facilityType\": short.facilityType,\r\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),//ACTUALIZA\r\n                  \"date\": short.startDate,//ACTUALIZA\r\n                  \"expirationDate\": short.endDate,//ACTUALIZA\r\n                  \"debitBalance1\": Number(short.balance.toFixed(2)),//ACTUALIZA\r\n                  \"debitBalance2\": record.debitBalance2,\r\n                  \"debitBalance3\": record.debitBalance3,\r\n                  \"paymentHistory\": short.paymentHistory,//ACTUALIZA\r\n                  \"rate\": record.rate,\r\n                  \"fee\": record.fee,\r\n                  \"bail\": record.bail,\r\n                  \"fundDestiny\": record.fundDestiny,\r\n                  status: true,\r\n                  t24: true,\r\n                  \"bank\": short.bank,//ACTUALIZA\r\n                  \"transactId\": Number(transactionId),\r\n                  \"codeT24\": short?.codeT24 ?? \"\",//ACTUALIZA\r\n                  \"dateT24\": short?.dateT24 ?? \"\",//ACTUALIZA\r\n                  \"debtId\": record?.debtId,\r\n                }\r\n                await backendServices.updateBankRelationsDebtsCP(dataSet)\r\n              }\r\n            } else {\r\n              // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\r\n              let dataSet = {\r\n                \"facilityType\": short.facilityType,//NUEVO\r\n                \"amount\": Number(short.approvedAmount.toFixed(2)),//NUEVO\r\n                \"date\": short.startDate,//NUEVO\r\n                \"expirationDate\": short.endDate,//NUEVO\r\n                \"debitBalance1\": Number(short.balance.toFixed(2)),//NUEVO\r\n                \"debitBalance2\": 0,//NUEVO\r\n                \"debitBalance3\": 0,//NUEVO\r\n                \"paymentHistory\": short.paymentHistory,//NUEVO\r\n                \"rate\": 0,//NUEVO\r\n                \"fee\": 0,//NUEVO\r\n                \"bail\": 0,//NUEVO\r\n                \"fundDestiny\": \"\",//NUEVO\r\n                status: true,//NUEVO\r\n                t24: true,//NUEVO\r\n                \"bank\": short.bank,//NUEVO\r\n                \"transactId\": Number(transactionId),//NUEVO\r\n                \"codeT24\": short?.codeT24 ?? \"\",//NUEVO\r\n                \"dateT24\": short?.dateT24 ?? \"\",//NUEVO\r\n              }\r\n              await backendServices.newBankingRelationsDebtsCP(dataSet)\r\n            }\r\n\r\n          }\r\n        }\r\n      }\r\n\r\n      if (checkLP) {\r\n        for (var long of dataResultCore.longTermresult) {\r\n          if (dataResultLP !== undefined && dataResultLP !== null && dataResultLP.bankingRelationLPDTOList.length > 0) {\r\n            dataResultLP = dataResultLP.bankingRelationLPDTOList;\r\n            let record = dataResult.find(x => x.codeT24 == long?.codeT24 ?? \"\");\r\n            if (record !== undefined && record != null) {\r\n              if (long?.dateT24 ?? \"\" > record.dateT24) {\r\n                //Verificar si existe un record en dataResult.getBankingRelationCPDTOList con el mismo codeT24 .... si la fecha es mayor, actualizar amount, dateT24\r\n                let dataSet = {\r\n                  \"facilityType\": record.facilityType,\r\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),//ACTUALIZA\r\n                  \"date\": record.startDate,\r\n                  \"expirationDate\": record.endDate,\r\n                  \"debitBalance1\": Number(record.balance.toFixed(2)),\r\n                  \"debitBalance2\": record.debitBalance2,\r\n                  \"debitBalance3\": record.debitBalance3,\r\n                  \"paymentHistory\": record.paymentHistory,\r\n                  \"rate\": record.rate,\r\n                  \"fee\": record.fee,\r\n                  \"bail\": record.bail,\r\n                  \"fundDestiny\": record.fundDestiny,\r\n                  status: true,\r\n                  t24: true,\r\n                  \"bank\": record.bank,\r\n                  \"transactId\": Number(transactionId),\r\n                  \"codeT24\": short?.codeT24 ?? \"\",//ACTUALIZA\r\n                  \"dateT24\": short?.dateT24 ?? \"\",//ACTUALIZA\r\n                  \"debtId\": record?.debtId,\r\n                }\r\n                await backendServices.updateBankRelationsDebtsLP(dataSet)\r\n              } else if (long?.dateT24 == \"\" || long?.dateT24 == null) {\r\n                //si no tiene fecha actualizar todo\r\n                let dataSet = {\r\n                  \"facilityType\": short.facilityType,\r\n                  \"amount\": Number(short.approvedAmount.toFixed(2)),//ACTUALIZA\r\n                  \"date\": short.startDate,//ACTUALIZA\r\n                  \"expirationDate\": short.endDate,//ACTUALIZA\r\n                  \"debitBalance1\": Number(short.balance.toFixed(2)),//ACTUALIZA\r\n                  \"debitBalance2\": record.debitBalance2,\r\n                  \"debitBalance3\": record.debitBalance3,\r\n                  \"paymentHistory\": short.paymentHistory,//ACTUALIZA\r\n                  \"rate\": record.rate,\r\n                  \"fee\": record.fee,\r\n                  \"bail\": record.bail,\r\n                  \"fundDestiny\": record.fundDestiny,\r\n                  status: true,\r\n                  t24: true,\r\n                  \"bank\": short.bank,//ACTUALIZA\r\n                  \"transactId\": Number(transactionId),\r\n                  \"codeT24\": short?.codeT24 ?? \"\",\r\n                  \"dateT24\": short?.dateT24 ?? \"\",//ACTUALIZA\r\n                  \"debtId\": record?.debtId,\r\n                }\r\n                await backendServices.updateBankRelationsDebtsLP(dataSet)\r\n\r\n              }\r\n            } else {\r\n              // si no existe un record en dataResult.getBankingRelationCPDTOList... siempre agregamos\r\n              let dataSet = {\r\n                \"facilityType\": long.facilityType,\r\n                \"amount\": Number(long.approvedAmount.toFixed(2)),\r\n                \"date\": long.startDate,\r\n                \"expirationDate\": long.endDate,\r\n                \"debitBalance1\": Number(long.balance.toFixed(2)),\r\n                \"debitBalance2\": 0,\r\n                \"debitBalance3\": 0,\r\n                \"paymentHistory\": long.paymentHistory,\r\n                \"rate\": 0,\r\n                \"fee\": 0,\r\n                \"bail\": 0,\r\n                \"fundDestiny\": \"\",\r\n                status: true,\r\n                t24: true,\r\n                \"bank\": long.bank,\r\n                \"transactId\": Number(transactionId),\r\n                \"codeT24\": long?.codeT24 ?? \"\",\r\n                \"dateT24\": long?.dateT24 ?? \"\",\r\n              }\r\n              await backendServices.newBankingRelationsDebtsLP(dataSet)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n    catch (err) { console.error(\"newBankingRelationsDebts\", err) }\r\n  }\r\n\r\n  //salvamos facilidades por tramite\r\n  async saveAccountMovements(transactionId) {\r\n    try {\r\n\r\n      //var dataResult = await backendServices.consultMovementsBank(transactionId);\r\n      //if (dataResult !== undefined && dataResult !== null && (dataResult.bankBanesco.length > 0 || dataResult.bankOthersBank.length > 0)) {\r\n      //return;\r\n      //}\r\n\r\n      //Borrar de BD todos los Movimientos de Cuenta cuyo \"t24\"= true\r\n      backendServices.deleteFisicalMovementsAccountsIGR(transactionId);\r\n\r\n      var dataResult = await coreServices.getAccountMovementsByTransaction(transactionId)\r\n      for (let i = 0; i < dataResult.length; i++) {\r\n        //aqui cargamos por cuentas\r\n        let cuenta = dataResult[i].AcctId;\r\n        for (let j = 0; j < dataResult[i].dataByYear.length; j++) {\r\n          console.log(\"data[i].dataByYear\", dataResult[i].dataByYear);\r\n          for (let k = 0; k < dataResult[i].dataByYear[j].dataresult.length; k++) {\r\n            let jsonSet = {\r\n              \"trasactId\": Number(transactionId),\r\n              \"year\": dataResult[i].dataByYear[j].dataresult[k].year,\r\n              \"month\": dataResult[i].dataByYear[j].dataresult[k].month,\r\n              \"deposits\": dataResult[i].dataByYear[j].dataresult[k].deposits,\r\n              \"averageBalance\": dataResult[i].dataByYear[j].dataresult[k].amount,\r\n              \"observations\": \"\",\r\n              \"accountNumber\": cuenta,\r\n              \"t24\": true\r\n            }\r\n            await backendServices.newMovementsAccountsIGR(jsonSet);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}