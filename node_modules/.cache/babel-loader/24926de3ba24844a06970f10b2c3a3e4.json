{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport ApiServiceAuth from \"../../services/ApiServiceAuth\";\nimport BackendServices from \"../../services/BackendServices/Services\";\nimport toastr from \"toastr\";\nimport \"toastr/build/toastr.min.css\";\nimport LocalStorageHelper from \"../../helpers/LocalStorageHelper\";\nimport * as opt from \"../../helpers/options_helper\";\nimport { calenderDefaultCategories, events, tasks } from \"../../common/data\";\nlet users = [{\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesbrand.com\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adap ter on the default instance\n  const mock = new MockAdapter(axios);\n  const localStorageHelper = new LocalStorageHelper();\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(async config => {\n    const user = JSON.parse(config[\"data\"]);\n    const usr = user.email;\n    const psw = user.password;\n    const auth = {\n      headers: {\n        username: usr,\n        password: psw\n      }\n    };\n    const header = {\n      login: \"ok\",\n      autorizatrion: \"true\"\n    };\n    let validatorLogin = false;\n    let instancia = new ApiServiceAuth();\n    const api = new BackendServices();\n    var dataUser = await api.getUserInfo(usr, psw); //     validatorLogin=false;\n    //   }else{\n    //     header.dataUser=resp\n    //     validatorLogin=true\n    //   }\n    // },reject=>{\n    //   validatorLogin=false\n    // });\n    //console.log(\"dataUser\",dataUser)\n    //localStorageHelper.save(opt.VARNAME_USRCREDENTIAL,{usr:usr,psw:psw});\n\n    console.log(\"dataUser\", dataUser);\n\n    if (dataUser !== undefined) {\n      if (dataUser.status == 200) {\n        var menberof = dataUser.result.menberOf;\n\n        if (menberof != null && menberof.indexOf('OU=RHPAM') >= 0) {\n          await instancia.post(url.URL_BPM_LOGIN, {}, {}, auth).then(resp => {\n            validatorLogin = resp.data.body != null && resp.data.body.Autentication == true ? true : false;\n          }, reject => {\n            var businessStatus = reject.response.data.businessStatus;\n\n            if (businessStatus == 401) {\n              toastr.error(\"El usuario no esta autorizado en el bussines central\", 'Error!');\n            } else {\n              toastr.error(reject.response.data.message, 'Error!');\n            }\n\n            validatorLogin = false;\n          });\n        } else {\n          toastr.error(\"El usuario no esta configurado en los grupos para acceder a la aplicacion\", 'Error!');\n        }\n      } else {\n        toastr.error(dataUser.error.exceptionMessage, 'Error!');\n      }\n    }\n\n    if (validatorLogin === true) {\n      if (validatorLogin === true) {\n        localStorageHelper.save(opt.VARNAME_USRCREDENTIAL, {\n          usr: usr,\n          psw: psw\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        toastr.options = {\n          positionClass: 'toast-top-right',\n          closeButton: true,\n          progressBar: true,\n          showEasing: 'swing',\n          hideEasing: 'linear',\n          showMethod: 'fadeIn',\n          hideMethod: 'fadeOut',\n          showDuration: '9599',\n          hideDuration: '500995'\n        };\n\n        if (validatorLogin) {\n          resolve([200, header]);\n        } else {\n          toastr.error('Usuario o contraseÃ±a no validas', 'Error!');\n          reject([400, \"Error al ingresar al portal\"]);\n        }\n      });\n    }\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Editted successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Editted successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Editted successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Editted successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...user[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks]);\n        } else {\n          reject([400, \"Cannot get tasks\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","ApiServiceAuth","BackendServices","toastr","LocalStorageHelper","opt","calenderDefaultCategories","events","tasks","users","uid","username","role","password","email","fakeBackend","mock","localStorageHelper","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","usr","psw","auth","headers","header","login","autorizatrion","validatorLogin","instancia","api","dataUser","getUserInfo","console","log","undefined","status","menberof","result","menberOf","indexOf","post","URL_BPM_LOGIN","then","resp","data","body","Autentication","businessStatus","response","error","message","exceptionMessage","save","VARNAME_USRCREDENTIAL","options","positionClass","closeButton","progressBar","showEasing","hideEasing","showMethod","hideMethod","showDuration","hideDuration","one","finalToken","Authorization","validUser","filter","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","token","tokenObj","validUserObj","onGet","GET_TASKS","GET_EVENTS","ADD_NEW_EVENT","event","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","GET_CATEGORIES"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport MockAdapter from \"axios-mock-adapter\"\r\nimport * as url from \"../url_helper\"\r\nimport accessToken from \"../jwt-token-access/accessToken\"\r\nimport ApiServiceAuth from \"../../services/ApiServiceAuth\";\r\nimport BackendServices from \"../../services/BackendServices/Services\";\r\nimport toastr from \"toastr\";\r\nimport \"toastr/build/toastr.min.css\"\r\n\r\nimport LocalStorageHelper from \"../../helpers/LocalStorageHelper\";\r\nimport * as opt from \"../../helpers/options_helper\"\r\n\r\nimport {\r\n  calenderDefaultCategories,\r\n  events,\r\n  tasks,\r\n} from \"../../common/data\"\r\n\r\nlet users = [\r\n  {\r\n    uid: 1,\r\n    username: \"admin\",\r\n    role: \"admin\",\r\n    password: \"123456\",\r\n    email: \"admin@themesbrand.com\",\r\n  },\r\n]\r\n\r\nconst fakeBackend = () => {\r\n  // This sets the mock adap ter on the default instance\r\n  const mock = new MockAdapter(axios)\r\n  const localStorageHelper = new LocalStorageHelper();\r\n\r\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n    users.push(user)\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve([200, user])\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/post-fake-login\").reply(async config => {\r\n\r\n    const user = JSON.parse(config[\"data\"])\r\n    const usr = user.email\r\n    const psw = user.password\r\n    const auth = {\r\n      headers: {\r\n        username: usr,\r\n        password: psw\r\n\r\n      }\r\n    }\r\n\r\n    const header = {\r\n      login: \"ok\",\r\n      autorizatrion: \"true\"\r\n    }\r\n\r\n    let validatorLogin = false;\r\n    let instancia = new ApiServiceAuth();\r\n\r\n    const api=new BackendServices();    \r\n    var dataUser =  await api.getUserInfo(usr,psw);\r\n    //     validatorLogin=false;\r\n    //   }else{\r\n    //     header.dataUser=resp\r\n    //     validatorLogin=true\r\n    //   }\r\n    // },reject=>{\r\n    //   validatorLogin=false\r\n    // });\r\n    //console.log(\"dataUser\",dataUser)\r\n    //localStorageHelper.save(opt.VARNAME_USRCREDENTIAL,{usr:usr,psw:psw});\r\n\r\n    console.log(\"dataUser\", dataUser)\r\n    if (dataUser !== undefined) {\r\n      if (dataUser.status == 200) {\r\n\r\n        var menberof = dataUser.result.menberOf;\r\n        if (menberof != null && menberof.indexOf('OU=RHPAM') >= 0) {\r\n          await instancia.post(url.URL_BPM_LOGIN, {}, {}, auth).then(resp => {\r\n            validatorLogin = resp.data.body != null && resp.data.body.Autentication == true ? true : false;\r\n          }, reject => {\r\n            var businessStatus = reject.response.data.businessStatus;\r\n            if (businessStatus == 401) {\r\n              toastr.error(\"El usuario no esta autorizado en el bussines central\", 'Error!');\r\n            } else {\r\n              toastr.error(reject.response.data.message, 'Error!');\r\n            }\r\n            validatorLogin = false\r\n          });\r\n        } else {\r\n          toastr.error(\"El usuario no esta configurado en los grupos para acceder a la aplicacion\", 'Error!');\r\n        }\r\n      } else {\r\n        toastr.error(dataUser.error.exceptionMessage, 'Error!');\r\n      }\r\n    }\r\n\r\n    if (validatorLogin === true) {\r\n      if (validatorLogin === true) {\r\n        localStorageHelper.save(opt.VARNAME_USRCREDENTIAL, { usr: usr, psw: psw });\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        toastr.options = {\r\n          positionClass: 'toast-top-right',\r\n          closeButton: true,\r\n          progressBar: true,\r\n          showEasing: 'swing',\r\n          hideEasing: 'linear',\r\n          showMethod: 'fadeIn',\r\n          hideMethod: 'fadeOut',\r\n          showDuration: '9599',\r\n          hideDuration: '500995'\r\n        }\r\n        if (validatorLogin) {\r\n          resolve([200, header])\r\n        } else {\r\n          toastr.error('Usuario o contraseÃ±a no validas', 'Error!');\r\n          reject([\r\n            400,\r\n            \"Error al ingresar al portal\",\r\n          ])\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n\r\n    const one = config.headers\r\n\r\n    let finalToken = one.Authorization\r\n\r\n    const validUser = users.filter(usr => usr.uid === user.idx)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        // Verify Jwt token from header.Authorization\r\n        if (finalToken === accessToken) {\r\n          if (validUser[\"length\"] === 1) {\r\n            let objIndex\r\n\r\n            //Find index of specific object using findIndex method.\r\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\r\n\r\n            //Update object's name property.\r\n            users[objIndex].username = user.username\r\n\r\n            // Assign a value to locastorage\r\n            localStorage.removeItem(\"authUser\")\r\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\r\n\r\n            resolve([200, \"Profile Editted successfully\"])\r\n          } else {\r\n            reject([400, \"Something wrong for edit profile\"])\r\n          }\r\n        } else {\r\n          reject([400, \"Invalid Token !!\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/post-fake-profile\").reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n\r\n    const validUser = users.filter(usr => usr.uid === user.idx)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (validUser[\"length\"] === 1) {\r\n          let objIndex\r\n\r\n          //Find index of specific object using findIndex method.\r\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\r\n\r\n          //Update object's name property.\r\n          users[objIndex].username = user.username\r\n\r\n          // Assign a value to locastorage\r\n          localStorage.removeItem(\"authUser\")\r\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\r\n\r\n          resolve([200, \"Profile Editted successfully\"])\r\n        } else {\r\n          reject([400, \"Something wrong for edit profile\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve([200, \"Check you mail and reset your password.\"])\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/post-jwt-register\").reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n    users.push(user)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve([200, user])\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/post-jwt-login\").reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n    const validUser = users.filter(\r\n      usr => usr.email === user.email && usr.password === user.password\r\n    )\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (validUser[\"length\"] === 1) {\r\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\r\n          const token = accessToken\r\n\r\n          // JWT AccessToken\r\n          const tokenObj = { accessToken: token } // Token Obj\r\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\r\n\r\n          resolve([200, validUserObj])\r\n        } else {\r\n          reject([\r\n            400,\r\n            \"Username and password are invalid. Please enter correct username and password\",\r\n          ])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n\r\n    const one = config.headers\r\n\r\n    let finalToken = one.Authorization\r\n\r\n    const validUser = users.filter(usr => usr.uid === user.idx)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        // Verify Jwt token from header.Authorization\r\n        if (finalToken === accessToken) {\r\n          if (validUser[\"length\"] === 1) {\r\n            let objIndex\r\n\r\n            //Find index of specific object using findIndex method.\r\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\r\n\r\n            //Update object's name property.\r\n            users[objIndex].username = user.username\r\n\r\n            // Assign a value to locastorage\r\n            localStorage.removeItem(\"authUser\")\r\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\r\n\r\n            resolve([200, \"Profile Editted successfully\"])\r\n          } else {\r\n            reject([400, \"Something wrong for edit profile\"])\r\n          }\r\n        } else {\r\n          reject([400, \"Invalid Token !!\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/post-fake-profile\").reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n\r\n    const validUser = users.filter(usr => usr.uid === user.idx)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (validUser[\"length\"] === 1) {\r\n          let objIndex\r\n\r\n          //Find index of specific object using findIndex method.\r\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\r\n\r\n          //Update object's name property.\r\n          users[objIndex].username = user.username\r\n\r\n          // Assign a value to locastorage\r\n          localStorage.removeItem(\"authUser\")\r\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\r\n\r\n          resolve([200, \"Profile Editted successfully\"])\r\n        } else {\r\n          reject([400, \"Something wrong for edit profile\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve([200, \"Check you mail and reset your password.\"])\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(\"/social-login\").reply(config => {\r\n    const user = JSON.parse(config[\"data\"])\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (user && user.token) {\r\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\r\n          const token = accessToken\r\n\r\n          // JWT AccessToken\r\n          const tokenObj = { accessToken: token } // Token Obj\r\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\r\n\r\n          resolve([200, validUserObj])\r\n        } else {\r\n          reject([\r\n            400,\r\n            \"Username and password are invalid. Please enter correct username and password\",\r\n          ])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_TASKS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (tasks) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, tasks])\r\n        } else {\r\n          reject([400, \"Cannot get tasks\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_EVENTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (events) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, events])\r\n        } else {\r\n          reject([400, \"Cannot get events\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data])\r\n        } else {\r\n          reject([400, \"Cannot add event\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data])\r\n        } else {\r\n          reject([400, \"Cannot update event\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config && config.headers) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.headers.event])\r\n        } else {\r\n          reject([400, \"Cannot delete event\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (calenderDefaultCategories) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, calenderDefaultCategories])\r\n        } else {\r\n          reject([400, \"Cannot get categories\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n}\r\n\r\nexport default fakeBackend\r\n"]},"metadata":{},"sourceType":"module"}