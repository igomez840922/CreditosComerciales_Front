{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\CommercialCredit\\\\1_Presolicitud\\\\BlackListForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from 'prop-types'; //i18n\n\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useHistory } from 'react-router-dom';\nimport * as OPTs from \"../../../helpers/options_helper\";\nimport * as url from \"../../../helpers/url_helper\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Col, Card, CardBody, CardFooter, Button, Label, Table, Alert, UncontrolledAlert, Modal } from \"reactstrap\";\nimport Switch from \"react-switch\";\nimport { BackendServices, CoreServices, BpmServices } from \"../../../services\";\nimport { AvForm, AvField, AvGroup, AvInput, AvCheckbox } from \"availity-reactstrap-validation\";\nimport { PersonModel } from '../../../models/Common/PersonModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlackListForm = props => {\n  _s();\n\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [selectClient, setselectClient] = useState(props.clientSelected);\n  const [identificationTypeList, setidentificationTypeList] = useState([]);\n  const [identificationTypeSelected, setidentificationTypeSelected] = useState(undefined);\n  const [personTypeList, setpersonTypeList] = useState([]);\n  const [personTypeSelected, setpersonTypeSelected] = useState(undefined); //Lista de resultados de BlackList\n\n  const [dataBlackListResult, setdataBlackListResult] = useState([]);\n  const [apiServiceBackend, setapiServiceBackend] = useState(new BackendServices());\n  const [apiCoreServices, setCoreServices] = useState(new CoreServices());\n  const [msgData, setmsgData] = useState({\n    show: false,\n    msg: \"\",\n    isError: false\n  }); //On Mounting (componentDidMount)\n\n  React.useEffect(() => {\n    fetchData();\n  }, []); //Caraga Inicial de datos\n\n  function fetchData() {\n    loadIdentificationTypes();\n    loadPersonTypes();\n  } //cargar lista de tipo de identificacion\n\n\n  function loadIdentificationTypes() {\n    apiServiceBackend.consultarCatalogoTipoIdentificacion().then(data => {\n      if (data !== null && data !== undefined) {\n        let json = [];\n\n        for (let i = 0; i < data.length; i++) {\n          json.push({\n            label: t(data[i][\"description\"]),\n            value: data[i][\"id\"]\n          });\n        }\n\n        setidentificationTypeList(json);\n        setidentificationTypeSelected(selectClient !== undefined ? json.find(x => x.value === selectClient.idType) : json[0]);\n      }\n    }).catch(error => {});\n  } //cargar lista de tipo de personas\n\n\n  function loadPersonTypes() {\n    apiServiceBackend.consultarCatalogoTipoPersona().then(data => {\n      if (data !== null && data !== undefined) {\n        let json = [];\n\n        for (let i = 0; i < data.length; i++) {\n          json.push({\n            label: t(data[i][\"label\"]),\n            value: data[i][\"code\"]\n          });\n        }\n\n        setpersonTypeList(json);\n        setpersonTypeSelected(selectClient !== undefined ? json.find(x => x.value === selectClient.personType) : json[0]);\n      }\n    }).catch(error => {});\n  } //Actualizar valores de Cliente cada vez que se actualiza un campo\n\n\n  function handleChangeInputFormBlackList(e) {\n    var clientPerson = selectClient !== undefined ? selectClient : new PersonModel();\n    clientPerson[e.target.name] = e.target.value;\n    setselectClient(clientPerson); //si la persona es juridica auto seleccionamos RUC\n\n    if (clientPerson.personType === 2) {\n      setidentificationTypeSelected(identificationTypeList.find(x => x.value === \"RUC\"));\n    }\n  } //Guardar el Cliente\n\n\n  function handleSubmitFormBlackList(event, errors, values) {\n    event.preventDefault();\n\n    if (errors.length > 0) {\n      return;\n    } //retornar los datos recolectados \n\n  } //Retorna los campos a mostrar en pantalla segun el tipo de persona seleccionada\n\n\n  function getClientDataFormByPersonType(personType) {\n    if (personType === undefined) {\n      return null;\n    }\n\n    switch (personType.value) {\n      case 1:\n        {\n          //Natural\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: \"6\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  htmlFor: \"name\",\n                  children: t(\"FirstName\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                  className: \"form-control\",\n                  name: \"name\",\n                  type: \"text\",\n                  onChange: handleChangeInputFormBlackList,\n                  value: selectClient !== undefined ? selectClient.name : '',\n                  errorMessage: t(\"Required Field\"),\n                  validate: {\n                    required: {\n                      value: true\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: \"6\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  htmlFor: \"secondName\",\n                  children: t(\"SecondName\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                  className: \"form-control\",\n                  name: \"secondName\",\n                  type: \"text\",\n                  onChange: handleChangeInputFormBlackList,\n                  value: selectClient !== undefined ? selectClient.secondName : '' //errorMessage={t(\"Required Field\")}\n                  //validate={{ required: { value: true } }} \n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: \"6\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  htmlFor: \"lastName\",\n                  children: t(\"FirstLastName\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                  className: \"form-control\",\n                  name: \"lastName\",\n                  type: \"text\",\n                  onChange: handleChangeInputFormBlackList,\n                  value: selectClient !== undefined ? selectClient.lastName : '',\n                  errorMessage: t(\"Required Field\"),\n                  validate: {\n                    required: {\n                      value: true\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: \"6\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  htmlFor: \"secondSurname\",\n                  children: t(\"SecondLastName\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                  className: \"form-control\",\n                  name: \"secondSurname\",\n                  type: \"text\",\n                  onChange: handleChangeInputFormBlackList,\n                  value: selectClient !== undefined ? selectClient.secondSurname : '' //errorMessage={t(\"Required Field\")}\n                  //validate={{ required: { value: true } }} \n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 18\n          }, this);\n        }\n\n      case 2:\n        {\n          //Juridica\n          return /*#__PURE__*/_jsxDEV(Col, {\n            md: \"12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"name\",\n                children: t(\"SocialReason\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                className: \"form-control\",\n                name: \"name\",\n                type: \"text\",\n                onChange: handleChangeInputFormBlackList,\n                value: selectClient !== undefined ? selectClient.name : '',\n                errorMessage: t(\"Required Field\"),\n                validate: {\n                  required: {\n                    value: true\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 11\n          }, this);\n        }\n    }\n\n    return null;\n  } //Show Message \n\n\n  function showMessage(message, isError = false) {\n    msgData.show = false;\n    setmsgData(msgData);\n    setmsgData({\n      show: true,\n      msg: message,\n      isError: isError\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    size: \"xl\",\n    isOpen: props.isOpen,\n    toggle: props.toggle,\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"modal-title mt-0\",\n        children: t(\"WatchListCheck\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.toggle,\n        className: \"close\",\n        \"data-dismiss\": \"modal\",\n        \"aria-label\": \"Close\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          \"aria-hidden\": \"true\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-body\",\n      style: {\n        minHeight: '500px'\n      },\n      children: /*#__PURE__*/_jsxDEV(AvForm, {\n        id: \"frmBlackList\",\n        className: \"needs-validation\",\n        onSubmit: handleSubmitFormBlackList,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardBody, {\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: \"6\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"personType\",\n                    children: t(\"PersonType\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    onChange: e => {\n                      setpersonTypeSelected(personTypeList.find(x => x.value === e.value));\n                      handleChangeInputFormBlackList({\n                        target: {\n                          name: 'personType',\n                          value: e.value\n                        }\n                      });\n                    },\n                    options: personTypeList,\n                    classNamePrefix: \"select2-selection\",\n                    value: personTypeSelected,\n                    name: \"personType\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 235,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: getClientDataFormByPersonType(personTypeSelected)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"6\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    children: t(\"IdType\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    onChange: e => {\n                      setidentificationTypeSelected(identificationTypeList.find(x => x.value === e.value));\n                      handleChangeInputFormBlackList({\n                        target: {\n                          name: 'idType',\n                          value: e.value\n                        }\n                      });\n                    },\n                    options: identificationTypeList,\n                    classNamePrefix: \"select2-selection\",\n                    value: identificationTypeSelected,\n                    name: \"idType\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 252,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"6\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"idnumber\",\n                    children: t(\"IdNumber\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                    onChange: handleChangeInputFormBlackList,\n                    className: \"form-control\",\n                    name: \"clientDocumentId\",\n                    type: \"text\",\n                    validate: {\n                      required: {\n                        value: true,\n                        errorMessage: t(\"Required Field\")\n                      }\n                    },\n                    value: selectClient !== undefined ? selectClient.clientDocumentId : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }, this), msgData.show ? /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: \"12\",\n                children: /*#__PURE__*/_jsxDEV(UncontrolledAlert, {\n                  color: \"danger\",\n                  role: msgData.isError ? \"alert\" : \"success\",\n                  dismissible: true,\n                  onClose: () => {\n                    msgData.show = false;\n                    setmsgData(msgData);\n                  },\n                  children: msgData.msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 13\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: \"12\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    children: t(\"Results\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                    onChange: handleChangeInputFormBlackList,\n                    className: \"form-control\",\n                    name: \"clientDocumentId\",\n                    type: \"text\",\n                    validate: {\n                      required: {\n                        value: true,\n                        errorMessage: t(\"Required Field\")\n                      }\n                    },\n                    value: selectClient !== undefined ? selectClient.clientDocumentId : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"table-responsive\",\n                  children: /*#__PURE__*/_jsxDEV(Table, {\n                    className: \"table mb-0\",\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      className: \"table-light\",\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                          children: t(\"#\")\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 301,\n                          columnNumber: 19\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: t(\"FullName\")\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 302,\n                          columnNumber: 19\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: t(\"Evaluation\")\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 303,\n                          columnNumber: 19\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 300,\n                        columnNumber: 17\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 299,\n                      columnNumber: 15\n                    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                      children: dataBlackListResult.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: item.id\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 309,\n                          columnNumber: 21\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: item.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 310,\n                          columnNumber: 21\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: item.evaluation\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 311,\n                          columnNumber: 21\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 308,\n                        columnNumber: 19\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 306,\n                      columnNumber: 15\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 11\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n            style: {\n              textAlign: \"right\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"dark\",\n              type: \"button\",\n              style: {\n                margin: '5px'\n              },\n              onClick: props.onCancel,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"mdi mdi mdi-cancel mid-12px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 21\n              }, this), \" \", t(\"Cancel\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              type: \"submit\",\n              style: {\n                margin: '5px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"mdi mdi-content-save mdi-12px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 83\n              }, this), \" \", t(\"Save\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BlackListForm, \"iD6jLVPVlSxzVuD74VmcQfm7a94=\", false, function () {\n  return [useTranslation];\n});\n\n_c = BlackListForm;\nBlackListForm.propTypes = {\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  onCancel: PropTypes.func,\n  clientSelected: PropTypes.any\n};\nexport default BlackListForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlackListForm\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/CommercialCredit/1_Presolicitud/BlackListForm.js"],"names":["React","useState","PropTypes","useTranslation","useLocation","useHistory","OPTs","url","moment","Select","Link","Row","Col","Card","CardBody","CardFooter","Button","Label","Table","Alert","UncontrolledAlert","Modal","Switch","BackendServices","CoreServices","BpmServices","AvForm","AvField","AvGroup","AvInput","AvCheckbox","PersonModel","BlackListForm","props","t","i18n","selectClient","setselectClient","clientSelected","identificationTypeList","setidentificationTypeList","identificationTypeSelected","setidentificationTypeSelected","undefined","personTypeList","setpersonTypeList","personTypeSelected","setpersonTypeSelected","dataBlackListResult","setdataBlackListResult","apiServiceBackend","setapiServiceBackend","apiCoreServices","setCoreServices","msgData","setmsgData","show","msg","isError","useEffect","fetchData","loadIdentificationTypes","loadPersonTypes","consultarCatalogoTipoIdentificacion","then","data","json","i","length","push","label","value","find","x","idType","catch","error","consultarCatalogoTipoPersona","personType","handleChangeInputFormBlackList","e","clientPerson","target","name","handleSubmitFormBlackList","event","errors","values","preventDefault","getClientDataFormByPersonType","required","secondName","lastName","secondSurname","showMessage","message","isOpen","toggle","minHeight","errorMessage","clientDocumentId","map","item","index","id","evaluation","textAlign","margin","onCancel","propTypes","bool","func","any"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from 'prop-types';\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLocation,useHistory } from 'react-router-dom'\r\nimport * as OPTs from \"../../../helpers/options_helper\"\r\nimport * as url from \"../../../helpers/url_helper\"\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  Button,\r\n  Label,\r\n  Table,\r\n  Alert,  \r\n  UncontrolledAlert,\r\n  Modal,\r\n} from \"reactstrap\"\r\n\r\nimport Switch from \"react-switch\";\r\nimport {BackendServices,CoreServices,BpmServices,} from \"../../../services\";\r\nimport { AvForm, AvField, AvGroup, AvInput, AvCheckbox} from \"availity-reactstrap-validation\";\r\nimport {PersonModel} from '../../../models/Common/PersonModel';\r\n\r\n\r\nconst BlackListForm = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n  \r\n    const [selectClient, setselectClient] = useState(props.clientSelected);\r\n\r\n    const [identificationTypeList, setidentificationTypeList] = useState([]);\r\n    const [identificationTypeSelected, setidentificationTypeSelected] = useState(undefined);\r\n\r\n    const [personTypeList, setpersonTypeList] = useState([]);\r\n    const [personTypeSelected, setpersonTypeSelected] = useState(undefined);\r\n\r\n    //Lista de resultados de BlackList\r\n    const [dataBlackListResult, setdataBlackListResult ] = useState([]);\r\n      \r\n    const [apiServiceBackend, setapiServiceBackend] = useState(new BackendServices());\r\n    const [apiCoreServices, setCoreServices] = useState(new CoreServices());\r\n    \r\n    const [msgData, setmsgData] = useState({show:false,msg:\"\",isError:false});\r\n\r\n  //On Mounting (componentDidMount)\r\n  React.useEffect(() => {    \r\n    fetchData();\r\n  }, []);\r\n\r\n  //Caraga Inicial de datos\r\n  function fetchData() {\r\n    loadIdentificationTypes();\r\n    loadPersonTypes();\r\n  } \r\n\r\n  //cargar lista de tipo de identificacion\r\n  function loadIdentificationTypes(){\r\n    apiServiceBackend.consultarCatalogoTipoIdentificacion()\r\n        .then((data) => {\r\n            if (data !== null && data !== undefined) {\r\n                let json = [];\r\n                for (let i = 0; i < data.length; i++) {\r\n                  json.push({ label: t(data[i][\"description\"]), value: data[i][\"id\"] })\r\n                }\r\n                setidentificationTypeList(json)\r\n                setidentificationTypeSelected(selectClient!==undefined?json.find(x => x.value === selectClient.idType):json[0]);\r\n            }          \r\n      }).catch((error) => { });    \r\n  }\r\n  //cargar lista de tipo de personas\r\n  function loadPersonTypes(){\r\n    apiServiceBackend.consultarCatalogoTipoPersona()\r\n        .then((data) => {\r\n            if (data !== null && data !== undefined) {\r\n                let json = [];\r\n                for (let i = 0; i < data.length; i++) {\r\n                  json.push({ label: t(data[i][\"label\"]), value: data[i][\"code\"] })\r\n                }\r\n                setpersonTypeList(json);                \r\n                setpersonTypeSelected(selectClient!==undefined?json.find(x => x.value === selectClient.personType):json[0]);\r\n            }          \r\n      }).catch((error) => { });    \r\n  }\r\n  //Actualizar valores de Cliente cada vez que se actualiza un campo\r\n  function handleChangeInputFormBlackList(e) {\r\n\r\n    var clientPerson = selectClient!==undefined?selectClient:new PersonModel();\r\n        \r\n    clientPerson[e.target.name] = e.target.value;\r\n    setselectClient(clientPerson);\r\n\r\n    //si la persona es juridica auto seleccionamos RUC\r\n    if(clientPerson.personType === 2){\r\n      setidentificationTypeSelected(identificationTypeList.find(x => x.value === \"RUC\"));          \r\n    }\r\n  }\r\n  //Guardar el Cliente\r\n  function handleSubmitFormBlackList(event, errors, values){\r\n    \r\n    event.preventDefault();\r\n    if (errors.length > 0) {\r\n      return;\r\n    }\r\n\r\n   //retornar los datos recolectados \r\n\r\n  }\r\n  //Retorna los campos a mostrar en pantalla segun el tipo de persona seleccionada\r\n  function getClientDataFormByPersonType(personType){\r\n    if(personType === undefined){\r\n      return null;\r\n    }\r\n\r\n    switch(personType.value){\r\n        case 1:{//Natural\r\n         return( <React.Fragment>\r\n          <Col md=\"6\">\r\n            <div className=\"mb-3\">\r\n              <Label htmlFor=\"name\">{t(\"FirstName\")}</Label>\r\n              <AvField\r\n                className=\"form-control\"\r\n                name=\"name\"\r\n                type=\"text\" onChange={handleChangeInputFormBlackList}\r\n                  value={selectClient !== undefined?selectClient.name:''}\r\n                  errorMessage={t(\"Required Field\")}\r\n                  validate={{ required: { value: true } }} \r\n                  />\r\n            </div>\r\n          </Col>\r\n          <Col md=\"6\">\r\n            <div className=\"mb-3\">\r\n              <Label htmlFor=\"secondName\">{t(\"SecondName\")}</Label>\r\n              <AvField\r\n                className=\"form-control\"\r\n                name=\"secondName\"\r\n                type=\"text\" onChange={handleChangeInputFormBlackList}\r\n                value={selectClient !== undefined?selectClient.secondName:''}\r\n                //errorMessage={t(\"Required Field\")}\r\n                //validate={{ required: { value: true } }} \r\n                />\r\n            </div>\r\n          </Col>\r\n          <Col md=\"6\">\r\n            <div className=\"mb-3\">\r\n              <Label htmlFor=\"lastName\">{t(\"FirstLastName\")}</Label>\r\n              <AvField\r\n                className=\"form-control\"\r\n                name=\"lastName\"\r\n                type=\"text\" onChange={handleChangeInputFormBlackList}\r\n                value={selectClient !== undefined?selectClient.lastName:''}\r\n                errorMessage={t(\"Required Field\")}\r\n                validate={{ required: { value: true } }} \r\n                />\r\n            </div>\r\n          </Col>\r\n          <Col md=\"6\">\r\n            <div className=\"mb-3\">\r\n              <Label htmlFor=\"secondSurname\">{t(\"SecondLastName\")}</Label>\r\n              <AvField\r\n                className=\"form-control\"\r\n                name=\"secondSurname\"\r\n                type=\"text\" onChange={handleChangeInputFormBlackList}\r\n                value={selectClient !== undefined?selectClient.secondSurname:''}\r\n                //errorMessage={t(\"Required Field\")}\r\n                //validate={{ required: { value: true } }} \r\n                />\r\n            </div>\r\n          </Col>\r\n         \r\n        </React.Fragment>)\r\n        } \r\n        case 2:{//Juridica\r\n          return(\r\n          <Col md=\"12\">\r\n              <div className=\"mb-3\">\r\n                <Label htmlFor=\"name\">{t(\"SocialReason\")}</Label>\r\n                <AvField\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  type=\"text\" onChange={handleChangeInputFormBlackList}\r\n                  value={selectClient !== undefined?selectClient.name:''}\r\n                  errorMessage={t(\"Required Field\")}\r\n                  validate={{ required: { value: true } }} />\r\n              </div>\r\n            </Col>\r\n            )\r\n        } \r\n    }\r\n\r\n    return null;\r\n  }  \r\n  //Show Message \r\n  function showMessage(message,isError=false){\r\n    \r\n    msgData.show=false;\r\n\r\n    setmsgData(msgData);   \r\n   \r\n    setmsgData({show:true,msg:message,isError:isError});\r\n  }  \r\n\r\n  return (\r\n   \r\n    <Modal\r\n      size=\"xl\"\r\n      isOpen={ props.isOpen }\r\n      toggle={ props.toggle }\r\n      centered={true}>\r\n      <div className=\"modal-header\">\r\n        <h5 className=\"modal-title mt-0\">{t(\"WatchListCheck\")}</h5>\r\n        <button\r\n          type=\"button\"\r\n          onClick={ props.toggle }\r\n          className=\"close\"\r\n          data-dismiss=\"modal\"\r\n          aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\" style={{ minHeight: '500px' }}>\r\n      <AvForm id=\"frmBlackList\" className=\"needs-validation\" onSubmit={handleSubmitFormBlackList}>\r\n        <Card>\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col md=\"6\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"personType\">{t(\"PersonType\")}</Label>\r\n                        <Select\r\n                          onChange={(e) => { setpersonTypeSelected(personTypeList.find(x => x.value === e.value)); handleChangeInputFormBlackList({target: { name:'personType', value: e.value }}) }}\r\n                          options={personTypeList}\r\n                          classNamePrefix=\"select2-selection\"\r\n                          value={personTypeSelected}\r\n                          name=\"personType\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    {getClientDataFormByPersonType(personTypeSelected)}                      \r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"6\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>{t(\"IdType\")}</Label>\r\n                        <Select\r\n                          onChange={(e) => { setidentificationTypeSelected(identificationTypeList.find(x => x.value === e.value)); handleChangeInputFormBlackList({target: { name:'idType', value: e.value }}) }}\r\n                          options={identificationTypeList}\r\n                          classNamePrefix=\"select2-selection\"\r\n                          value={identificationTypeSelected}\r\n                          name=\"idType\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n\r\n                    <Col md=\"6\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"idnumber\">{t(\"IdNumber\")}</Label>\r\n                        <AvField onChange={handleChangeInputFormBlackList} className=\"form-control\"\r\n                          name=\"clientDocumentId\" type=\"text\"\r\n                          validate={{required: { value: true, errorMessage: t(\"Required Field\") }}}\r\n                          value={selectClient !== undefined?selectClient.clientDocumentId:''}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>                  \r\n                  \r\n                  {msgData.show ? (\r\n            <Row>\r\n            <Col md=\"12\">\r\n            <UncontrolledAlert color=\"danger\" role={msgData.isError?\"alert\":\"success\"} dismissible onClose={() =>{ msgData.show=false; setmsgData(msgData)}}>\r\n              {msgData.msg}\r\n            </UncontrolledAlert>\r\n            </Col>   \r\n             </Row>\r\n          ) : null}     \r\n\r\n                </CardBody>\r\n                <CardBody>\r\n                    <Row>\r\n                    <Col md=\"12\">\r\n                    <div className=\"mb-3\">\r\n                        <Label>{t(\"Results\")}</Label>\r\n                        <AvField onChange={handleChangeInputFormBlackList} className=\"form-control\"\r\n                          name=\"clientDocumentId\" type=\"text\"\r\n                          validate={{required: { value: true, errorMessage: t(\"Required Field\") }}}\r\n                          value={selectClient !== undefined?selectClient.clientDocumentId:''}\r\n                        />\r\n                      </div>\r\n\r\n                    <div className=\"table-responsive\">\r\n          <Table className=\"table mb-0\">\r\n              <thead className=\"table-light\">\r\n                <tr>\r\n                  <th>{t(\"#\")}</th>\r\n                  <th>{t(\"FullName\")}</th>\r\n                  <th>{t(\"Evaluation\")}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              {dataBlackListResult.map((item, index) => (\r\n                  <tr>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name }</td>\r\n                    <td>{item.evaluation}</td>                 \r\n                  </tr>                   \r\n                  ))}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n                    </Col>\r\n                    </Row>\r\n                </CardBody>\r\n                <CardFooter style={{ textAlign: \"right\" }}>\r\n                  <Button color=\"dark\" type=\"button\" style={{ margin: '5px' }} onClick={props.onCancel}>\r\n                    <i className=\"mdi mdi mdi-cancel mid-12px\"></i>{\" \"}{t(\"Cancel\")}\r\n                  </Button>\r\n                  <Button color=\"success\" type=\"submit\" style={{ margin: '5px' }}><i className=\"mdi mdi-content-save mdi-12px\"></i>\r\n                    {\" \"}{t(\"Save\")}\r\n                  </Button>\r\n                </CardFooter>\r\n              </Card>\r\n      </AvForm>\r\n      </div>\r\n    </Modal>\r\n\r\n    \r\n\r\n       );\r\n};\r\n\r\nBlackListForm.propTypes = {\r\n    isOpen: PropTypes.bool,\r\n  toggle: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n  clientSelected:PropTypes.any\r\n}\r\n\r\nexport default BlackListForm;\r\n"]},"metadata":{},"sourceType":"module"}