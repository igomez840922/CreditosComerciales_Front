{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\Statistics\\\\sales-analytics.js\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card, CardBody } from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsPDF } from \"jspdf\";\nimport { BackendServices } from \"../../services\";\nimport * as moment from 'moment';\nimport { translationHelpers } from '../../helpers/translation-helper';\nimport { Button, Label, Input, CardHeader, CardTitle, InputGroup, Table, CardFooter } from \"reactstrap\";\nimport ApexCharts from \"apexcharts\";\nimport \"jspdf-autotable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [t] = translationHelpers('translation');\n\nclass SalesAnalytics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.downloadExcel = function () {\n      let uri = 'data:application/vnd.ms-excel;charset=utf-8;base64,',\n          template = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta charset=\"utf-8\"></meta><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',\n          base64 = function (s) {\n        return window.btoa(unescape(encodeURIComponent(s)));\n      },\n          format = function (s, c) {\n        return s.replace(/{(\\w+)}/g, function (m, p) {\n          return c[p];\n        });\n      };\n\n      return function (table, name) {\n        ApexCharts.exec(\"chartStatistics\", \"dataURI\").then(({\n          imgURI\n        }) => {\n          const byteCharacters = atob(imgURI.replace('data:image/png;base64,', ''));\n          if (!table.nodeType) table = document.getElementById(table);\n          var ctx = {\n            worksheet: name || 'Worksheet',\n            table: table.innerHTML,\n            img: imgURI\n          };\n          window.location.href = uri + base64(format(template, ctx));\n        });\n      };\n    }();\n\n    this.backendServices = new BackendServices();\n    this.inicialize();\n    this.state = {\n      series: [],\n      options: {\n        labels: [],\n        plotOptions: {\n          pie: {\n            donut: {\n              size: '75%'\n            }\n          }\n        },\n        legend: {\n          show: false\n        },\n        colors: ['#3b5de7', '#45cb85', '#eeb902'],\n        events: {\n          dataPointSelection: (event, chartContext, config) => {\n            console.log(config.w.config.labels[config.dataPointIndex]);\n          }\n        },\n        chart: {\n          id: \"chartStatistics\",\n          events: {\n            dataPointSelection: (event, chartContext, config) => {\n              let options = config.w.config.labels[config.dataPointIndex];\n              let statistic = this.state.statistics.filter(statistic => statistic.activityBpmName === options);\n              let dataRows = statistic.map(statistic => [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: statistic.transactId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: statistic.processBpmName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: statistic.activityBpmName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: statistic.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: this.formatDate(statistic.date)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 19\n                }, this)]\n              }, statistic.transactId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 18\n              }, this)]);\n              this.setState({ ...this.state,\n                detailStatistic: statistic,\n                dataRows\n              });\n              props.setdataRows({ ...this.state,\n                detailStatistic: statistic,\n                dataRows\n              });\n            }\n          } // toolbar: {\n          //   show: true,\n          //   offsetX: 0,\n          //   offsetY: 0,\n          //   tools: {\n          //     download: true,\n          //     selection: true,\n          //     zoom: true,\n          //     zoomin: true,\n          //     zoomout: true,\n          //     pan: true,\n          //     reset: true | '<img src=\"/static/icons/reset.png\" width=\"20\">',\n          //     customIcons: []\n          //   },\n          // },\n          // export: {\n          //   csv: {\n          //     filename: undefined,\n          //     columnDelimiter: ',',\n          //     headerCategory: ['category', 'category2'],\n          //     headerValue: ['value', 'value2'],\n          //     dateFormatter(timestamp) {\n          //       return new Date(timestamp).toDateString()\n          //     }\n          //   },\n          //   svg: {\n          //     filename: 'banesco_statistic',\n          //   },\n          //   png: {\n          //     filename: 'banesco_statistic',\n          //   }\n          // },\n          // autoSelected: 'zoom'\n\n        },\n        statistics: [],\n        detailStatistic: null,\n        dataRows: null\n      }\n    };\n  }\n\n  inicialize() {\n    this.backendServices.getBpmStatisticsvm().then(resp => {\n      let processBpmId = this.groupBy(resp, \"activityBpmName\");\n      let labels = processBpmId.map(process => process.at(0).activityBpmName);\n      let series = processBpmId.map(process => process.length);\n      this.setState({ ...this.state,\n        series,\n        options: { ...this.state.options,\n          labels\n        },\n        statistics: resp\n      });\n    }).catch(err => {});\n  }\n  /**\r\n   * groupBy, agrupa los items de un JSON\r\n   * @param {Array} collection array JSON\r\n   * @param {string} property clave a agrupar\r\n   * @returns {Array}\r\n   */\n\n\n  groupBy(collection, property) {\n    var i = 0,\n        val,\n        index,\n        values = [],\n        result = [];\n\n    for (; i < collection.length; i++) {\n      val = collection[i][property];\n      index = values.indexOf(val);\n      if (index > -1) result[index].push(collection[i]);else {\n        values.push(val);\n        result.push([collection[i]]);\n      }\n    }\n\n    return result;\n  }\n\n  formatDate(date) {\n    return moment(date).format(\"DD/MM/YYYY\");\n  }\n\n  downloadPDF() {\n    var chart = new ApexCharts(document.querySelector(\"#chartStatistics\"), this.state.options);\n    ApexCharts.exec(\"chartStatistics\", \"dataURI\").then(({\n      imgURI\n    }) => {\n      const pdf = new jsPDF();\n      pdf.addImage(imgURI, 'PNG', 36, 30, 130, 60);\n      pdf.setFontSize(25);\n      pdf.setTextColor('#007953');\n      pdf.text(t(\"Statistics\"), 15, 15);\n      const headers = [[t(\"Procedure\"), t(\"Process\"), t(\"Activity\"), t(\"Date\")]];\n      let content = {\n        startY: 100,\n        head: headers,\n        // body: this.state.detailStatistic?.map(Statistic => [Statistic.transactId, Statistic.processBpmName, Statistic.activityBpmName, this.formatDate(Statistic.date)]) ?? [],\n        html: '#tableStatistic',\n        styles: {\n          halign: 'center'\n        },\n        headStyles: {\n          fillColor: [0, 121, 83]\n        },\n        // alternateRowStyles: { fillColor: [174, 217, 203] },\n        tableLineColor: [0, 121, 83],\n        tableLineWidth: 0.1\n      };\n      document.querySelector(\"#tableStatistic\") && pdf.autoTable(content);\n      pdf.save(\"banesco_statistics.pdf\");\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"card-title mb-4\",\n            children: \"Estad\\xEDsticas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"align-items-center\",\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              id: \"tests\",\n              children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n                options: this.state.options,\n                series: this.state.series,\n                type: \"donut\",\n                height: 245,\n                onClick: e => {},\n                className: \"apex-charts\",\n                id: \"chartStatistics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SalesAnalytics;","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/Statistics/sales-analytics.js"],"names":["React","Component","Row","Col","Card","CardBody","ReactApexChart","jsPDF","BackendServices","moment","translationHelpers","Button","Label","Input","CardHeader","CardTitle","InputGroup","Table","CardFooter","ApexCharts","t","SalesAnalytics","constructor","props","downloadExcel","uri","template","base64","s","window","btoa","unescape","encodeURIComponent","format","c","replace","m","p","table","name","exec","then","imgURI","byteCharacters","atob","nodeType","document","getElementById","ctx","worksheet","innerHTML","img","location","href","backendServices","inicialize","state","series","options","labels","plotOptions","pie","donut","size","legend","show","colors","events","dataPointSelection","event","chartContext","config","console","log","w","dataPointIndex","chart","id","statistic","statistics","filter","activityBpmName","dataRows","map","transactId","processBpmName","formatDate","date","setState","detailStatistic","setdataRows","getBpmStatisticsvm","resp","processBpmId","groupBy","process","at","length","catch","err","collection","property","i","val","index","values","result","indexOf","push","downloadPDF","querySelector","pdf","addImage","setFontSize","setTextColor","text","headers","content","startY","head","html","styles","halign","headStyles","fillColor","tableLineColor","tableLineWidth","autoTable","save","render","e"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Row, Col, Card, CardBody } from \"reactstrap\"\r\nimport ReactApexChart from \"react-apexcharts\"\r\nimport { jsPDF } from \"jspdf\"\r\nimport { BackendServices } from \"../../services\";\r\nimport * as moment from 'moment';\r\nimport { translationHelpers } from '../../helpers/translation-helper';\r\nimport {\r\n  Button,\r\n  Label,\r\n  Input,\r\n  CardHeader,\r\n  CardTitle,\r\n  InputGroup,\r\n  Table,\r\n  CardFooter\r\n} from \"reactstrap\"\r\nimport ApexCharts from \"apexcharts\";\r\nimport \"jspdf-autotable\";\r\n\r\nconst [t] = translationHelpers('translation');\r\n\r\nclass SalesAnalytics extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.backendServices = new BackendServices();\r\n    this.inicialize();\r\n\r\n    this.state = {\r\n      series: [],\r\n      options: {\r\n        labels: [],\r\n        plotOptions: {\r\n          pie: {\r\n            donut: {\r\n              size: '75%'\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          show: false,\r\n        },\r\n        colors: ['#3b5de7', '#45cb85', '#eeb902'],\r\n        events: {\r\n          dataPointSelection: (event, chartContext, config) => {\r\n            console.log(config.w.config.labels[config.dataPointIndex])\r\n          }\r\n        },\r\n        chart: {\r\n          id: \"chartStatistics\",\r\n          events: {\r\n            dataPointSelection: (event, chartContext, config) => {\r\n              let options = config.w.config.labels[config.dataPointIndex];\r\n              let statistic = this.state.statistics.filter(statistic => statistic.activityBpmName === options);\r\n              let dataRows = statistic.map(statistic => (\r\n                [<tr key={statistic.transactId}>\r\n                  <td>\r\n                    {statistic.transactId}\r\n                  </td>\r\n                  <td>\r\n                    {statistic.processBpmName}\r\n                  </td>\r\n                  <td>\r\n                    {statistic.activityBpmName}\r\n                  </td>\r\n                  <td>\r\n                    {statistic.name}\r\n                  </td>\r\n                  <td>\r\n                    {this.formatDate(statistic.date)}\r\n                  </td>\r\n                </tr>]\r\n              ));\r\n              this.setState({ ...this.state, detailStatistic: statistic, dataRows });\r\n              props.setdataRows({ ...this.state, detailStatistic: statistic, dataRows })\r\n            }\r\n          },\r\n          // toolbar: {\r\n          //   show: true,\r\n          //   offsetX: 0,\r\n          //   offsetY: 0,\r\n          //   tools: {\r\n          //     download: true,\r\n          //     selection: true,\r\n          //     zoom: true,\r\n          //     zoomin: true,\r\n          //     zoomout: true,\r\n          //     pan: true,\r\n          //     reset: true | '<img src=\"/static/icons/reset.png\" width=\"20\">',\r\n          //     customIcons: []\r\n          //   },\r\n          // },\r\n          // export: {\r\n          //   csv: {\r\n          //     filename: undefined,\r\n          //     columnDelimiter: ',',\r\n          //     headerCategory: ['category', 'category2'],\r\n          //     headerValue: ['value', 'value2'],\r\n          //     dateFormatter(timestamp) {\r\n          //       return new Date(timestamp).toDateString()\r\n          //     }\r\n          //   },\r\n          //   svg: {\r\n          //     filename: 'banesco_statistic',\r\n          //   },\r\n          //   png: {\r\n          //     filename: 'banesco_statistic',\r\n          //   }\r\n          // },\r\n          // autoSelected: 'zoom'\r\n        },\r\n        statistics: [],\r\n        detailStatistic: null,\r\n        dataRows: null\r\n      }\r\n    }\r\n  }\r\n\r\n  inicialize() {\r\n    this.backendServices.getBpmStatisticsvm().then(resp => {\r\n      let processBpmId = this.groupBy(resp, \"activityBpmName\");\r\n      let labels = processBpmId.map(process => process.at(0).activityBpmName);\r\n      let series = processBpmId.map(process => process.length);\r\n      this.setState({ ...this.state, series, options: { ...this.state.options, labels }, statistics: resp });\r\n    }).catch(err => { })\r\n  }\r\n\r\n  /**\r\n   * groupBy, agrupa los items de un JSON\r\n   * @param {Array} collection array JSON\r\n   * @param {string} property clave a agrupar\r\n   * @returns {Array}\r\n   */\r\n  groupBy(collection, property) {\r\n    var i = 0, val, index,\r\n      values = [], result = [];\r\n    for (; i < collection.length; i++) {\r\n      val = collection[i][property];\r\n      index = values.indexOf(val);\r\n      if (index > -1)\r\n        result[index].push(collection[i]);\r\n      else {\r\n        values.push(val);\r\n        result.push([collection[i]]);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  formatDate(date) {\r\n    return moment(date).format(\"DD/MM/YYYY\");\r\n  }\r\n\r\n  downloadPDF() {\r\n    var chart = new ApexCharts(document.querySelector(\"#chartStatistics\"), this.state.options);\r\n    ApexCharts.exec(\"chartStatistics\", \"dataURI\").then(({ imgURI }) => {\r\n      const pdf = new jsPDF();\r\n      pdf.addImage(imgURI, 'PNG', 36, 30, 130, 60);\r\n      pdf.setFontSize(25);\r\n      pdf.setTextColor('#007953');\r\n      pdf.text(t(\"Statistics\"), 15, 15);\r\n\r\n      const headers = [[t(\"Procedure\"), t(\"Process\"), t(\"Activity\"), t(\"Date\")]];\r\n\r\n      let content = {\r\n        startY: 100,\r\n        head: headers,\r\n        // body: this.state.detailStatistic?.map(Statistic => [Statistic.transactId, Statistic.processBpmName, Statistic.activityBpmName, this.formatDate(Statistic.date)]) ?? [],\r\n        html: '#tableStatistic',\r\n        styles: { halign: 'center' },\r\n        headStyles: { fillColor: [0, 121, 83] },\r\n        // alternateRowStyles: { fillColor: [174, 217, 203] },\r\n        tableLineColor: [0, 121, 83], tableLineWidth: 0.1,\r\n      };\r\n      document.querySelector(\"#tableStatistic\") && pdf.autoTable(content);\r\n      pdf.save(\"banesco_statistics.pdf\");\r\n    });\r\n  }\r\n\r\n  downloadExcel = (function () {\r\n    let uri = 'data:application/vnd.ms-excel;charset=utf-8;base64,'\r\n      , template = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta charset=\"utf-8\"></meta><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'\r\n      , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }\r\n      , format = function (s, c) { return s.replace(/{(\\w+)}/g, function (m, p) { return c[p]; }) }\r\n    return function (table, name) {\r\n\r\n      ApexCharts.exec(\"chartStatistics\", \"dataURI\").then(({ imgURI }) => {\r\n\r\n        const byteCharacters = atob(imgURI.replace('data:image/png;base64,', ''));\r\n\r\n        if (!table.nodeType) table = document.getElementById(table)\r\n        var ctx = {\r\n          worksheet: name || 'Worksheet',\r\n          table: table.innerHTML,\r\n          img: imgURI,\r\n        }\r\n        window.location.href = uri + base64(format(template, ctx))\r\n      });\r\n\r\n\r\n\r\n    }\r\n  })()\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardBody>\r\n            <h4 className=\"card-title mb-4\">Estadísticas</h4>\r\n            {/* <div className=\"d-flex flex-row justify-content-between\">\r\n              <Button color=\"success\" className=\"mdi mid-12px\" onClick={() => { this.downloadPDF() }}>PDF</Button>\r\n              <Button color=\"success\" className=\"mdi mid-12px\" onClick={() => { this.downloadExcel('tableStatistic', 'banesco_statistics') }}>Excel</Button>\r\n            </div> */}\r\n            <Row className=\"align-items-center\">\r\n              <Col id=\"tests\">\r\n                <ReactApexChart\r\n                  options={this.state.options}\r\n                  series={this.state.series}\r\n                  type=\"donut\"\r\n                  height={245}\r\n                  onClick={(e) => { }}\r\n                  className=\"apex-charts\"\r\n                  id=\"chartStatistics\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SalesAnalytics\r\n"]},"metadata":{},"sourceType":"module"}