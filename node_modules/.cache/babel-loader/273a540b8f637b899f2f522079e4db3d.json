{"ast":null,"code":"import TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\nimport { GetDashBoardModel } from \"../../models\";\nimport ApiServiceBpm from \"../ApiServiceBpm\";\nimport * as url from \"../../helpers/url_helper\";\nimport * as opt from \"../../helpers/options_helper\";\nimport qs from \"qs\";\nimport { result } from \"lodash\";\nimport LocalStorageHelper from \"../../helpers/LocalStorageHelper\";\nexport default class Services extends ApiServiceBpm {\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  //creamos un nueva instancia de proceso en BPM...    \n  async createNewInstance() {\n    try {\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \n\n      if (number !== null && number !== undefined && number > 0) {\n        var result1 = await this.getTasksByPrcess(number); //buscamos la tarea que crea el nuevo proceso\n\n        if (result1 !== undefined) {\n          var result2 = await this.startedStatusTask(result1.taskId); //iniciamos la tarea\n\n          if (result2 !== undefined) {\n            return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\n          }\n        }\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  } //creamos un nueva instancia de proceso de Instructivo de desembolso...    \n\n\n  async createNewInstanceDisbursementInstructions() {\n    try {\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \n\n      if (number !== null && number !== undefined && number > 0) {\n        var result1 = await this.getTasksByPrcess(number); //buscamos la tarea que crea el nuevo proceso\n\n        if (result1 !== undefined) {\n          var result2 = await this.startedStatusTask(result1.taskId); //iniciamos la tarea\n\n          if (result2 !== undefined) {\n            return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\n          }\n        }\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  } //retorna la bandeja de entrada\n\n\n  async getDashBoard() {\n    var result = await this.get(url.URL_BPM_DASHBOARD);\n    return GetDashBoardModel.fromJson(result);\n  } //Chequea e Inicializa la tarea\n\n\n  async checkAndStartTask(locationData) {\n    try {\n      console.log(\"checkAndStartTask\", locationData);\n      await this.startedStatusTask(locationData.taskId, undefined, locationData.instanceId);\n      return true; //chequear si la tarea no ha sido iniciada\n\n      /*if(locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\"){        \r\n        //Iniciamos la nueva tarea en BPM   \r\n        await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      }\r\n      else{\r\n        return true;\r\n      }      */\n    } catch (err) {\n      console.error(err);\n    }\n\n    return false;\n  } //retorna las tareas de un proceso especifico\n\n\n  async getTasksByPrcess(instanceId) {\n    try {\n      var result = await this.get(url.URL_BPM_DASHBOARD);\n      result = GetDashBoardModel.fromJson(result);\n      return result.results.filter(e => e.instanceId === instanceId)[0];\n    } catch (err) {\n      console.error(\"getTasksByPrcess\", err);\n    }\n\n    return undefined;\n  } //crea e inicia una nueva instancia de Proceso y actividad\n\n\n  async startProcess() {\n    //Estructura de la data que se le debe pasar\n    var data = {\n      \"containerId\": url.WORD_BPM_CONTAINERID,\n      \"processId\": url.WORD_BPM_PROCESSID,\n      \"parametros\": {\n        \"values\": {\n          \"info\": \"\",\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\n          \"activityId\": \"0\",\n          \"transactionId\": \"\",\n          \"customerId\": \"\",\n          \"applicationNumber\": \"\",\n          \"procedureNumber\": \"\",\n          \"requestId\": \"\",\n          \"facilityId\": \"\",\n          \"dambientalparalelo\": \"\",\n          \"decision\": \"\",\n          \"id\": \"\",\n          \"monto\": 0,\n          \"status\": \"\",\n          \"decicionforma\": \"\",\n          \"cargo\": \"cargo\",\n          \"statuscredito\": \"\",\n          \"statusadm\": \"\",\n          \"statusformali\": \"\",\n          \"tiposolicitud\": \"\",\n          \"origensolicitud\": \"\",\n          \"dcreditoparalelo\": \"\",\n          \"regresar\": \"\",\n          \"rol\": \"\"\n        }\n      }\n    };\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\n\n    return result.body.processInstanceId;\n  } //crea uns nueva instancia del Proceso de instructivo desembolso\n\n\n  async startProcessDisbursementInstructions() {\n    //Estructura de la data que se le debe pasar\n    var data = {\n      \"containerId\": url.WORD_BPM_CONTAINERID,\n      \"processId\": url.WORD_BPM_PROCESSID_DisbursementInstructions,\n      \"parametros\": {\n        \"values\": {\n          \"info\": \"\",\n          \"processId\": opt.PROCESS_INSTRUCTIVEDISBURSEMENT.toString(),\n          \"activityId\": \"0\",\n          \"transactionId\": \"\",\n          \"customerId\": \"\",\n          \"applicationNumber\": \"\",\n          \"procedureNumber\": \"\",\n          \"requestId\": \"\",\n          \"facilityId\": \"\",\n          \"decision\": \"\",\n          \"id\": \"\",\n          \"regresar\": \"\"\n        }\n      }\n    };\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\n\n    return result.body.processInstanceId;\n  }\n\n  async authentication(data) {\n    var result = await this.post(url.URL_BPM_LOGIN, data);\n    return result.status; //OK\n  }\n\n  async startedStatusTask(taskId, containerId = undefined, instanceId = undefined) {\n    try {\n      var data = {\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_STARTED\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n      console.log(\"startedStatusTask\", result);\n\n      if ((result === null || result === void 0 ? void 0 : result.status) === \"OK\") {\n        if (instanceId !== undefined) {\n          const localStorageHelper = new LocalStorageHelper();\n          var credentials = localStorageHelper.get(opt.VARNAME_USRCREDENTIAL);\n          var values = {\n            \"asignado\": credentials.usr\n          };\n          await this.updatevariables(instanceId, values);\n        }\n\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api startedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async completedStatusTask(taskId, values, containerId = undefined) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  }\n\n  async abortProcess(instanceId, containerId = undefined) {\n    try {\n      console.log(\"abortProcess\", instanceId); //Estructura de la data que se le debe pasar\n\n      var data = {\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId\n      };\n      console.log(\"data\", data);\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api abortProcess:\", err);\n    }\n\n    return undefined;\n  }\n\n  async updatevariables(instanceId, values, containerId = undefined) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\n        \"processInstanceId\": instanceId,\n        \"parametros\": {\n          \"values\": values\n        }\n      };\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n    }\n\n    return undefined;\n  } //Retorna la imagen relacionada a un proceso\n\n\n  async wacthprocess(processInstanceId) {\n    try {\n      var params = {\n        containerId: url.WORD_BPM_CONTAINERID,\n        processInstanceId: processInstanceId\n      };\n      var data = qs.stringify(params);\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\n      console.log(\"wacthprocess\", result);\n      return result.body.response;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  }\n\n  async saveAutonomy(autonomy, containerId = undefined) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      const {\n        amount: montos,\n        tipo\n      } = autonomy; //\"model-namespace\": \"https://kiegroup.org/dmn/_3B8E611A-D760-4020-9BA9-69ED1FD4DFFC\"\n\n      var data = {\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\n        //\"processId\": url.WORD_BPM_PROCESSID,\n        \"parametros\": {\n          \"values\": {\n            \"model-namespace\": \"https://kiegroup.org/dmn/_6A4C1540-4D56-4357-BDF3-3F9E81907A54\",\n            \"model-name\": \"ReglaAsignacionAutonomiasduales\",\n            \"dmn-context\": {\n              montos,\n              tipo\n            }\n          }\n        }\n      };\n      var result = await this.post(url.URL_BPM_checketapa, data);\n\n      if (result.status === \"OK\") {\n        return result;\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n      return undefined;\n    }\n  }\n\n  async listCheckValidation(process, containerId = undefined) {\n    try {\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\n      var data = {\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\n        //\"processId\": url.WORD_BPM_PROCESSID,\n        \"parametros\": {\n          \"values\": {\n            \"model-namespace\": url.URL_BPM_MODELNAMESPACE,\n            \"model-name\": \"estadoetapa\",\n            \"dmn-context\": {\n              \"numeroetapa\": `${process}`\n            }\n          }\n        }\n      };\n      var result = await this.post(url.URL_BPM_checketapa, data);\n\n      if (result.status === \"OK\") {\n        var _result$body, _result$body$result$d;\n\n        return (result === null || result === void 0 ? void 0 : (_result$body = result.body) === null || _result$body === void 0 ? void 0 : (_result$body$result$d = _result$body.result['dmn-evaluation-result']['dmn-context']) === null || _result$body$result$d === void 0 ? void 0 : _result$body$result$d.resuletapa) === 'true';\n      }\n    } catch (err) {\n      console.error(\"api completedStatusTask:\", err);\n      return undefined;\n    }\n  } //reasignar tarea a otro usuario\n\n\n  async ChangeTaskUser(user, taskId, instanceId, containerId = undefined) {\n    const localStorageHelper = new LocalStorageHelper();\n    var credentials = localStorageHelper.get(opt.VARNAME_USRCREDENTIAL);\n\n    try {\n      var values = {\n        \"asignado\": user\n      };\n      await this.updatevariables(instanceId, values);\n      var data = {\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\n        \"taskId\": taskId,\n        //\"10006\",         \n        \"parametros\": {\n          \"values\": {\n            \"users\": user,\n            //\"ETECCAnlPrevencion1\" \n            \"asignado\": user\n          }\n        }\n      };\n      localStorageHelper.save(opt.VARNAME_USRCREDENTIAL, {\n        usr: \"admin\",\n        psw: \"BanescoBPM2021.\",\n        email: credentials.email\n      });\n      var result = await this.post(url.URL_BPM_ChangeTaskUser, data);\n\n      if (result.status === \"OK\") {\n        return true;\n      }\n\n      values = {\n        \"asignado\": credentials.usr\n      };\n      await this.updatevariables(instanceId, values);\n    } catch (err) {} finally {\n      localStorageHelper.save(opt.VARNAME_USRCREDENTIAL, credentials);\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/services/BpmServices/Services.js"],"names":["TaskListPostownersModel","GetDashBoardModel","ApiServiceBpm","url","opt","qs","result","LocalStorageHelper","Services","createNewInstance","number","startProcess","undefined","result1","getTasksByPrcess","result2","startedStatusTask","taskId","err","console","error","createNewInstanceDisbursementInstructions","getDashBoard","get","URL_BPM_DASHBOARD","fromJson","checkAndStartTask","locationData","log","instanceId","results","filter","e","data","WORD_BPM_CONTAINERID","WORD_BPM_PROCESSID","PROCESS_BUSQUEDADESCARTE","toString","post","URL_BPM_STARTPROCESS","body","processInstanceId","startProcessDisbursementInstructions","WORD_BPM_PROCESSID_DisbursementInstructions","PROCESS_INSTRUCTIVEDISBURSEMENT","authentication","URL_BPM_LOGIN","status","containerId","WORD_BPM_STARTED","put","URL_BPM_STATUSTASK","localStorageHelper","credentials","VARNAME_USRCREDENTIAL","values","usr","updatevariables","completedStatusTask","WORD_BPM_COMPLETED","abortProcess","del","URL_BPM_ABORTPROCESS","URL_BPM_UPDATEVAR","wacthprocess","params","stringify","URL_BPM_WATCHPROCESS","response","saveAutonomy","autonomy","amount","montos","tipo","URL_BPM_checketapa","listCheckValidation","process","URL_BPM_MODELNAMESPACE","resuletapa","ChangeTaskUser","user","save","psw","email","URL_BPM_ChangeTaskUser"],"mappings":"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","sourcesContent":["\r\nimport TaskListPostownersModel from \"../../models/BPM/TaskListPostownersModel\";\r\nimport { GetDashBoardModel } from \"../../models\";\r\nimport ApiServiceBpm from \"../ApiServiceBpm\";\r\nimport * as url from \"../../helpers/url_helper\"\r\nimport * as opt from \"../../helpers/options_helper\"\r\nimport qs from \"qs\";\r\nimport { result } from \"lodash\";\r\n\r\nimport LocalStorageHelper from \"../../helpers/LocalStorageHelper\";\r\n\r\nexport default class Services extends ApiServiceBpm {\r\n\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n  /*                                 retorna las actividades para la bandeja de entrada                                 */\r\n  /* ------------------------------------------------------------------------------------------------------------------ */\r\n\r\n\r\n  //creamos un nueva instancia de proceso en BPM...    \r\n  async createNewInstance() {\r\n    try {\r\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \r\n      if (number !== null && number !== undefined && number > 0) {\r\n        var result1 = await this.getTasksByPrcess(number);//buscamos la tarea que crea el nuevo proceso\r\n        if (result1 !== undefined) {\r\n          var result2 = await this.startedStatusTask(result1.taskId);//iniciamos la tarea\r\n          if (result2 !== undefined) {\r\n            return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  //creamos un nueva instancia de proceso de Instructivo de desembolso...    \r\n  async createNewInstanceDisbursementInstructions() {\r\n    try {\r\n      var number = await this.startProcess(); //iniciamos una nueva instancia de proceso en BPM...    \r\n      if (number !== null && number !== undefined && number > 0) {\r\n        var result1 = await this.getTasksByPrcess(number);//buscamos la tarea que crea el nuevo proceso\r\n        if (result1 !== undefined) {\r\n          var result2 = await this.startedStatusTask(result1.taskId);//iniciamos la tarea\r\n          if (result2 !== undefined) {\r\n            return result1; //instanceId:result.instanceId,taskId:result.taskId,taskStatus:result.status\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  //retorna la bandeja de entrada\r\n  async getDashBoard() {\r\n    var result = await this.get(url.URL_BPM_DASHBOARD);\r\n    return GetDashBoardModel.fromJson(result);\r\n  }\r\n\r\n  //Chequea e Inicializa la tarea\r\n  async checkAndStartTask(locationData) {\r\n    try {\r\n\r\n\r\n      console.log(\"checkAndStartTask\", locationData);\r\n      await this.startedStatusTask(locationData.taskId, undefined, locationData.instanceId)\r\n      return true;\r\n      //chequear si la tarea no ha sido iniciada\r\n      /*if(locationData.taskStatus === \"Ready\" || locationData.taskStatus === \"Listo\"){        \r\n        //Iniciamos la nueva tarea en BPM   \r\n        await this.startedStatusTask(locationData.taskId)\r\n        return true;\r\n      }\r\n      else{\r\n        return true;\r\n      }      */\r\n    }\r\n    catch (err) { console.error(err) }\r\n    return false;\r\n  }\r\n\r\n  //retorna las tareas de un proceso especifico\r\n  async getTasksByPrcess(instanceId) {\r\n    try {\r\n      var result = await this.get(url.URL_BPM_DASHBOARD);\r\n      result = GetDashBoardModel.fromJson(result);\r\n      return result.results.filter((e) => e.instanceId === instanceId)[0];\r\n    }\r\n    catch (err) { console.error(\"getTasksByPrcess\", err) }\r\n    return undefined;\r\n  }\r\n\r\n  //crea e inicia una nueva instancia de Proceso y actividad\r\n  async startProcess() {\r\n    //Estructura de la data que se le debe pasar\r\n    var data = {\r\n      \"containerId\": url.WORD_BPM_CONTAINERID,\r\n      \"processId\": url.WORD_BPM_PROCESSID,\r\n      \"parametros\": {\r\n        \"values\": {\r\n          \"info\": \"\",\r\n          \"processId\": opt.PROCESS_BUSQUEDADESCARTE.toString(),\r\n          \"activityId\": \"0\",\r\n          \"transactionId\": \"\",\r\n          \"customerId\": \"\",\r\n          \"applicationNumber\": \"\",\r\n          \"procedureNumber\": \"\",\r\n          \"requestId\": \"\",\r\n          \"facilityId\": \"\",\r\n          \"dambientalparalelo\": \"\",\r\n          \"decision\": \"\",\r\n          \"id\": \"\",\r\n          \"monto\": 0,\r\n          \"status\": \"\",\r\n          \"decicionforma\": \"\",\r\n          \"cargo\": \"cargo\",\r\n          \"statuscredito\": \"\",\r\n          \"statusadm\": \"\",\r\n          \"statusformali\": \"\",\r\n          \"tiposolicitud\": \"\",\r\n          \"origensolicitud\": \"\",\r\n          \"dcreditoparalelo\": \"\",\r\n          \"regresar\": \"\",\r\n          \"rol\": \"\"\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\r\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\r\n\r\n    return result.body.processInstanceId;\r\n  }\r\n\r\n  //crea uns nueva instancia del Proceso de instructivo desembolso\r\n  async startProcessDisbursementInstructions() {\r\n    //Estructura de la data que se le debe pasar\r\n    var data = {\r\n      \"containerId\": url.WORD_BPM_CONTAINERID,\r\n      \"processId\": url.WORD_BPM_PROCESSID_DisbursementInstructions,\r\n      \"parametros\": {\r\n        \"values\": {\r\n          \"info\": \"\",\r\n          \"processId\": opt.PROCESS_INSTRUCTIVEDISBURSEMENT.toString(),\r\n          \"activityId\": \"0\",\r\n          \"transactionId\": \"\",\r\n          \"customerId\": \"\",\r\n          \"applicationNumber\": \"\",\r\n          \"procedureNumber\": \"\",\r\n          \"requestId\": \"\",\r\n          \"facilityId\": \"\",\r\n          \"decision\": \"\",\r\n          \"id\": \"\",\r\n          \"regresar\": \"\",\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = await this.post(url.URL_BPM_STARTPROCESS, data);\r\n    /*\r\n    {\r\n    \"body\": {\r\n        \"processInstanceId\": \"8124\",\r\n        \"containers\": null,\r\n        \"response\": null\r\n    },\r\n    \"status\": \"CREATED\",\r\n    \"businessStatus\": \"\",\r\n    \"timeResponse\": \"2021-12-06 13:41:57\",\r\n    \"message\": null,\r\n    \"path\": \"/api-jbpm-0.0.1-SNAPSHOT/soaint-toolbox-eis/bpm-api/v0/processes/startProcess\",\r\n    \"transactionState\": null\r\n    }\r\n    */\r\n\r\n    return result.body.processInstanceId;\r\n  }\r\n\r\n  async authentication(data) {\r\n    var result = await this.post(url.URL_BPM_LOGIN, data);\r\n    return result.status; //OK\r\n  }\r\n\r\n  async startedStatusTask(taskId, containerId = undefined, instanceId = undefined) {\r\n    try {\r\n\r\n      var data = {\r\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_STARTED\r\n      }\r\n\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      console.log(\"startedStatusTask\", result);\r\n\r\n      if (result?.status === \"OK\") {\r\n        if (instanceId !== undefined) {\r\n          const localStorageHelper = new LocalStorageHelper();\r\n          var credentials = localStorageHelper.get(opt.VARNAME_USRCREDENTIAL);\r\n          var values = {\r\n            \"asignado\": credentials.usr\r\n          };\r\n          await this.updatevariables(instanceId, values)\r\n        }\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api startedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async completedStatusTask(taskId, values, containerId = undefined) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,\r\n        \"taskStatus\": url.WORD_BPM_COMPLETED,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.put(url.URL_BPM_STATUSTASK, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async abortProcess(instanceId, containerId = undefined) {\r\n\r\n    try {\r\n      console.log(\"abortProcess\", instanceId);\r\n      //Estructura de la data que se le debe pasar\r\n      var data = {\r\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n      }\r\n      console.log(\"data\", data);\r\n      var result = await this.del(url.URL_BPM_ABORTPROCESS, data);\r\n\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api abortProcess:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async updatevariables(instanceId, values, containerId = undefined) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\r\n        \"processInstanceId\": instanceId,\r\n        \"parametros\": {\r\n          \"values\": values,\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_UPDATEVAR, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err)\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  //Retorna la imagen relacionada a un proceso\r\n  async wacthprocess(processInstanceId) {\r\n    try {\r\n\r\n      var params = { containerId: url.WORD_BPM_CONTAINERID, processInstanceId: processInstanceId }\r\n      var data = qs.stringify(params);\r\n\r\n      var result = await this.get(url.URL_BPM_WATCHPROCESS + \"?\" + data);\r\n\r\n      console.log(\"wacthprocess\", result);\r\n\r\n      return result.body.response;\r\n    }\r\n    catch (err) { console.error(err); }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  async saveAutonomy(autonomy, containerId = undefined) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n\r\n      const { amount: montos, tipo } = autonomy\r\n      //\"model-namespace\": \"https://kiegroup.org/dmn/_3B8E611A-D760-4020-9BA9-69ED1FD4DFFC\"\r\n      var data = {\r\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\r\n        //\"processId\": url.WORD_BPM_PROCESSID,\r\n        \"parametros\": {\r\n          \"values\": {\r\n            \"model-namespace\": \"https://kiegroup.org/dmn/_6A4C1540-4D56-4357-BDF3-3F9E81907A54\",\r\n            \"model-name\": \"ReglaAsignacionAutonomiasduales\",\r\n            \"dmn-context\": { montos, tipo }\r\n          }\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_checketapa, data);\r\n      if (result.status === \"OK\") {\r\n        return result;\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  async listCheckValidation(process, containerId = undefined) {\r\n    try {\r\n      /* \"values\":{\r\n          \"decision\":\"si\"  \r\n      } */\r\n      var data = {\r\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\r\n        //\"processId\": url.WORD_BPM_PROCESSID,\r\n        \"parametros\": {\r\n          \"values\": {\r\n            \"model-namespace\": url.URL_BPM_MODELNAMESPACE,\r\n            \"model-name\": \"estadoetapa\",\r\n            \"dmn-context\": { \"numeroetapa\": `${process}` }\r\n          }\r\n        }\r\n      }\r\n      var result = await this.post(url.URL_BPM_checketapa, data);\r\n      if (result.status === \"OK\") {\r\n        return result?.body?.result['dmn-evaluation-result']['dmn-context']?.resuletapa === 'true';\r\n      }\r\n\r\n    }\r\n    catch (err) {\r\n      console.error(\"api completedStatusTask:\", err);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  //reasignar tarea a otro usuario\r\n  async ChangeTaskUser(user, taskId, instanceId, containerId = undefined) {\r\n    const localStorageHelper = new LocalStorageHelper();\r\n    var credentials = localStorageHelper.get(opt.VARNAME_USRCREDENTIAL);\r\n    try {\r\n      var values = {\r\n        \"asignado\": user\r\n      };\r\n      await this.updatevariables(instanceId, values)\r\n\r\n      var data = {\r\n        \"containerId\": containerId !== undefined ? containerId : url.WORD_BPM_CONTAINERID,\r\n        \"taskId\": taskId,//\"10006\",         \r\n        \"parametros\": {\r\n          \"values\": {\r\n            \"users\": user,//\"ETECCAnlPrevencion1\" \r\n            \"asignado\": user\r\n          }\r\n        }\r\n      }\r\n      localStorageHelper.save(opt.VARNAME_USRCREDENTIAL, { usr: \"admin\", psw: \"BanescoBPM2021.\", email: credentials.email });\r\n      var result = await this.post(url.URL_BPM_ChangeTaskUser, data);\r\n      if (result.status === \"OK\") {\r\n        return true;\r\n      }\r\n\r\n      values = {\r\n        \"asignado\": credentials.usr\r\n      };\r\n      await this.updatevariables(instanceId, values)\r\n\r\n    }\r\n    catch (err) { }\r\n    finally {\r\n      localStorageHelper.save(opt.VARNAME_USRCREDENTIAL, credentials);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}