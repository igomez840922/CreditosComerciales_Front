{"ast":null,"code":"var _jsxFileName = \"D:\\\\_PROJECTS\\\\_SOAINT\\\\JBPM\\\\App\\\\banescocreditoscomerciales\\\\src\\\\pages\\\\CommercialCredit\\\\4_InformeGestionReforzado\\\\FormularioIGR\\\\Secciones\\\\ModalReciprocidad.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useTranslation, withTranslation } from \"react-i18next\";\nimport PropTypes from 'prop-types';\nimport * as opt from \"../../../../../helpers/options_helper\";\nimport { Row, Col, Button, Label, Input, Modal, Card, CardBody, CardFooter, InputGroup } from \"reactstrap\";\nimport { AvForm, AvField, AvGroup } from \"availity-reactstrap-validation\";\nimport Select from \"react-select\";\nimport Currency from \"../../../../../helpers/currency\";\nimport { BackendServices, CoreServices, BpmServices } from \"../../../../../services\";\nimport SessionHelper from \"../../../../../helpers/SessionHelper\";\nimport moment from \"moment\";\nimport { GetMontNumberByName, GetMontNameByNumber, Capitalize } from '../../../../../helpers/commons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalReciprocidad = props => {\n  _s();\n\n  var _props$dataRecipro$ye, _props$dataRecipro, _props$dataRecipro$de, _props$dataRecipro2, _props$dataRecipro$av, _props$dataRecipro3, _props$dataRecipro$re, _props$dataRecipro4, _props$dataRecipro$so, _props$dataRecipro5, _props$dataRecipro$sa, _props$dataRecipro6;\n\n  const currencyData = new Currency();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [campoRequeridoAno, setcampoRequeridoAno] = useState(false);\n  const [campoRequeridoMes, setcampoRequeridoMes] = useState(false);\n  const [year, setyear] = useState((_props$dataRecipro$ye = (_props$dataRecipro = props.dataRecipro) === null || _props$dataRecipro === void 0 ? void 0 : _props$dataRecipro.year) !== null && _props$dataRecipro$ye !== void 0 ? _props$dataRecipro$ye : 2021);\n  const [month, setmonth] = useState(null);\n  const [mesSelect, setmesSelect] = useState(undefined);\n  const meses = [{\n    label: t(\"January\"),\n    value: t(\"January\")\n  }, {\n    label: t(\"February\"),\n    value: t(\"February\")\n  }, {\n    label: t(\"March\"),\n    value: t(\"March\")\n  }, {\n    label: t(\"April\"),\n    value: t(\"April\")\n  }, {\n    label: t(\"May\"),\n    value: t(\"May\")\n  }, {\n    label: t(\"June\"),\n    value: t(\"June\")\n  }, {\n    label: t(\"July\"),\n    value: t(\"July\")\n  }, {\n    label: t(\"August\"),\n    value: t(\"August\")\n  }, {\n    label: t(\"September\"),\n    value: t(\"September\")\n  }, {\n    label: t(\"October\"),\n    value: t(\"October\")\n  }, {\n    label: t(\"November\"),\n    value: t(\"November\")\n  }, {\n    label: t(\"December\"),\n    value: t(\"December\")\n  }];\n  const [mainDebtor, setmainDebtor] = useState(null);\n  const [coreServices, setcoreServices] = useState(new CoreServices());\n  const [backendServices, setbackendServices] = useState(new BackendServices());\n  const [sessionHelper, setsessionHelper] = useState(new SessionHelper());\n  const [deposits, setdeposits] = useState(currencyData.format((_props$dataRecipro$de = props === null || props === void 0 ? void 0 : (_props$dataRecipro2 = props.dataRecipro) === null || _props$dataRecipro2 === void 0 ? void 0 : _props$dataRecipro2.deposits) !== null && _props$dataRecipro$de !== void 0 ? _props$dataRecipro$de : 0));\n  const [averageBalance, setaverageBalance] = useState(currencyData.format((_props$dataRecipro$av = props === null || props === void 0 ? void 0 : (_props$dataRecipro3 = props.dataRecipro) === null || _props$dataRecipro3 === void 0 ? void 0 : _props$dataRecipro3.averageBalance) !== null && _props$dataRecipro$av !== void 0 ? _props$dataRecipro$av : 0));\n  const [reciprocity, setreciprocity] = useState(currencyData.format((_props$dataRecipro$re = props === null || props === void 0 ? void 0 : (_props$dataRecipro4 = props.dataRecipro) === null || _props$dataRecipro4 === void 0 ? void 0 : _props$dataRecipro4.reciprocity) !== null && _props$dataRecipro$re !== void 0 ? _props$dataRecipro$re : 0));\n  const [sow, setsow] = useState(currencyData.format((_props$dataRecipro$so = props === null || props === void 0 ? void 0 : (_props$dataRecipro5 = props.dataRecipro) === null || _props$dataRecipro5 === void 0 ? void 0 : _props$dataRecipro5.sow) !== null && _props$dataRecipro$so !== void 0 ? _props$dataRecipro$so : 0));\n  React.useEffect(() => {\n    var result = sessionHelper.get(opt.VARNAME_LOCATIONDATA);\n\n    if (result !== undefined && result !== null) {\n      loadMainDebtor(result.transactionId);\n    } // Read Api Service data\n\n\n    var defaultVal = null;\n    setmesSelect(undefined);\n\n    try {\n      if (meses.length > 0 && props.dataRecipro.month !== null && mesSelect === undefined) {\n        defaultVal = meses.find(x => x.value === props.dataRecipro.month);\n\n        if (defaultVal !== undefined) {\n          setmesSelect(defaultVal);\n          setmonth(defaultVal.value.toUpperCase());\n        }\n      } else {\n        defaultVal = meses[0];\n        setmesSelect(defaultVal);\n        setmonth(defaultVal.value.toUpperCase());\n      }\n    } catch (err) {}\n  }, [props.isOpen]);\n  React.useEffect(() => {\n    getReciprocity();\n  }, [year, month, mainDebtor]); //cargar deudor principal\n\n  async function loadMainDebtor(transactionId) {\n    var result = await backendServices.consultPrincipalDebtor(transactionId);\n\n    if (result !== undefined && result !== null) {\n      setmainDebtor(result);\n    }\n  } // Submitimos formulario para busqueda de clientes\n\n\n  function handleSubmit(event, errors, values) {\n    var _mesSelect$value;\n\n    event.preventDefault();\n\n    if (errors.length > 0) {\n      return;\n    }\n\n    values.year = year !== null ? year : props.dataRecipro.year;\n    values.month = (_mesSelect$value = mesSelect === null || mesSelect === void 0 ? void 0 : mesSelect.value) !== null && _mesSelect$value !== void 0 ? _mesSelect$value : \"Enero\";\n\n    if (props.tipo == \"guardar\") {\n      props.dataManagament(values, props.tipo);\n    } else {\n      values.reciprocity_id = props.dataRecipro.reciprocity_id;\n      props.dataManagament(values, props.tipo);\n    } // props.onSubmit(values);\n\n  }\n\n  async function getReciprocity() {\n    console.log(\"getReciprocity\");\n\n    if (mainDebtor !== null && year !== null && year > 1995 && year <= Number(moment().format(\"YYYY\")) && month !== null) {\n      console.log(\"getReciprocity\", year, month);\n      var data = await coreServices.getReciprocity(mainDebtor === null || mainDebtor === void 0 ? void 0 : mainDebtor.customerNumberT24, year, month.toUpperCase());\n\n      if (data !== undefined) {\n        setdeposits(currencyData.format(data.deposits));\n        setaverageBalance(currencyData.format(data.averageAmt));\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    size: \"xl\",\n    isOpen: props.isOpen,\n    toggle: props.toggle,\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"modal-title mt-0\",\n        children: t(\"Reciprocity\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.toggle,\n        \"data-dismiss\": \"modal\",\n        className: \"close\",\n        \"aria-label\": \"Close\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          \"aria-hidden\": \"true\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-body\",\n      style: {\n        backgroundColor: \"#f3f5f7\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xl: \"12\",\n          children: /*#__PURE__*/_jsxDEV(AvForm, {\n            id: \"frmSearch\",\n            className: \"needs-validation\",\n            onSubmit: handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              children: [/*#__PURE__*/_jsxDEV(CardBody, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        htmlFor: \"idYear\",\n                        children: t(\"Date\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 155,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        className: \"form-control\",\n                        name: \"requestDate\",\n                        type: \"month\",\n                        id: \"requestDate\",\n                        onChange: e => {\n                          setyear(e.target.value.split(\"-\")[0]);\n                          var monthselect = e.target.value.split(\"-\")[1];\n                          monthselect = GetMontNameByNumber(Number(monthselect));\n                          setmonth(monthselect);\n                          monthselect = Capitalize(monthselect);\n                          console.log(monthselect);\n                          setmesSelect(meses.find(x => x.value === monthselect));\n                        },\n                        value: moment(year + \"-\" + (mesSelect !== undefined ? GetMontNumberByName(mesSelect.value.toUpperCase()) : \"01\")).format(\"YYYY-MM\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 156,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        htmlFor: \"sales\",\n                        children: t(\"Sales\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        className: \"form-control\",\n                        type: \"text\",\n                        name: \"sales\",\n                        id: \"sales\",\n                        onChange: e => {\n                          set(e.target.value);\n                        },\n                        value: currencyData.format((_props$dataRecipro$sa = props === null || props === void 0 ? void 0 : (_props$dataRecipro6 = props.dataRecipro) === null || _props$dataRecipro6 === void 0 ? void 0 : _props$dataRecipro6.sales) !== null && _props$dataRecipro$sa !== void 0 ? _props$dataRecipro$sa : 0),\n                        pattern: \"^[0-9,.]*$\",\n                        onKeyUp: e => {\n                          let x = currencyData.getRealValue(e.target.value);\n                          e.target.value = currencyData.format(x);\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 206,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 204,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        htmlFor: \"deposits\",\n                        children: t(\"Deposits\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 220,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        className: \"form-control\",\n                        type: \"text\",\n                        name: \"deposits\",\n                        onChange: e => {\n                          setdeposits(e.target.value);\n                        },\n                        value: deposits,\n                        id: \"deposits\",\n                        pattern: \"^[0-9,.]*$\",\n                        onKeyUp: e => {\n                          let x = currencyData.getRealValue(e.target.value);\n                          e.target.value = currencyData.format(x);\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 221,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 219,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        htmlFor: \"averagebalance\",\n                        children: t(\"AverageBalance\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 235,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        className: \"form-control\",\n                        type: \"text\",\n                        name: \"averageBalance\",\n                        onChange: e => {\n                          setaverageBalance(e.target.value);\n                        },\n                        value: averageBalance,\n                        id: \"averageBalance\",\n                        pattern: \"^[0-9,.]*$\",\n                        onKeyUp: e => {\n                          let x = currencyData.getRealValue(e.target.value);\n                          e.target.value = currencyData.format(x);\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 236,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        htmlFor: \"reciprocity\",\n                        children: t(\"Reciprocity\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 250,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        className: \"form-control\",\n                        type: \"text\",\n                        name: \"reciprocity\",\n                        value: reciprocity,\n                        id: \"reciprocity\",\n                        pattern: \"^[0-9,.]*$\",\n                        onKeyUp: e => {\n                          let x = currencyData.getRealValue(e.target.value);\n                          e.target.value = currencyData.format(x);\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 251,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 249,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        htmlFor: \"sow\",\n                        children: t(\"Sow\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 264,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        className: \"form-control\",\n                        type: \"text\",\n                        name: \"sow\",\n                        value: sow,\n                        id: \"sow\",\n                        pattern: \"^[0-9,.]*$\",\n                        onKeyUp: e => {\n                          let x = currencyData.getRealValue(e.target.value);\n                          e.target.value = currencyData.format(x);\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 265,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 263,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 262,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n                style: {\n                  textAlign: \"right\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  id: \"btnNew\",\n                  color: \"danger\",\n                  type: \"button\",\n                  style: {\n                    margin: '5px'\n                  },\n                  onClick: props.toggle,\n                  \"data-dismiss\": \"modal\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"mdi mdi mdi-cancel mid-12px\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 21\n                  }, this), \" \", t(\"Cancel\")]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 19\n                }, this), props.botones ? /*#__PURE__*/_jsxDEV(Button, {\n                  id: \"btnSearch\",\n                  color: \"success\",\n                  type: \"submit\",\n                  style: {\n                    margin: '5px'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"mdi mdi-content-save mdi-12px\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 100\n                  }, this), \" \", \" \", props.tipo == \"guardar\" ? t(\"Save\") : t(\"Save\")]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 21\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalReciprocidad, \"/SCpHhThSfCG8tL4j4e1tiiKgKk=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ModalReciprocidad;\nModalReciprocidad.propTypes = {\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  partyId: PropTypes.string\n};\nexport default ModalReciprocidad;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalReciprocidad\");","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/CommercialCredit/4_InformeGestionReforzado/FormularioIGR/Secciones/ModalReciprocidad.js"],"names":["React","useState","useTranslation","withTranslation","PropTypes","opt","Row","Col","Button","Label","Input","Modal","Card","CardBody","CardFooter","InputGroup","AvForm","AvField","AvGroup","Select","Currency","BackendServices","CoreServices","BpmServices","SessionHelper","moment","GetMontNumberByName","GetMontNameByNumber","Capitalize","ModalReciprocidad","props","currencyData","t","i18n","campoRequeridoAno","setcampoRequeridoAno","campoRequeridoMes","setcampoRequeridoMes","year","setyear","dataRecipro","month","setmonth","mesSelect","setmesSelect","undefined","meses","label","value","mainDebtor","setmainDebtor","coreServices","setcoreServices","backendServices","setbackendServices","sessionHelper","setsessionHelper","deposits","setdeposits","format","averageBalance","setaverageBalance","reciprocity","setreciprocity","sow","setsow","useEffect","result","get","VARNAME_LOCATIONDATA","loadMainDebtor","transactionId","defaultVal","length","find","x","toUpperCase","err","isOpen","getReciprocity","consultPrincipalDebtor","handleSubmit","event","errors","values","preventDefault","tipo","dataManagament","reciprocity_id","console","log","Number","data","customerNumberT24","averageAmt","toggle","backgroundColor","e","target","split","monthselect","set","sales","getRealValue","textAlign","margin","botones","propTypes","bool","func","partyId","string"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport { useTranslation, withTranslation } from \"react-i18next\"\r\nimport PropTypes from 'prop-types';\r\nimport * as opt from \"../../../../../helpers/options_helper\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Label,\r\n  Input,\r\n  Modal,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  InputGroup,\r\n} from \"reactstrap\"\r\nimport { AvForm, AvField, AvGroup } from \"availity-reactstrap-validation\"\r\nimport Select from \"react-select\";\r\nimport Currency from \"../../../../../helpers/currency\";\r\nimport { BackendServices, CoreServices, BpmServices, } from \"../../../../../services\";\r\nimport SessionHelper from \"../../../../../helpers/SessionHelper\";\r\nimport moment from \"moment\";\r\n\r\nimport {GetMontNumberByName,GetMontNameByNumber,Capitalize} from '../../../../../helpers/commons'\r\n\r\nconst ModalReciprocidad = (props) => {\r\n  const currencyData = new Currency();\r\n  const { t, i18n } = useTranslation();\r\n  const [campoRequeridoAno, setcampoRequeridoAno] = useState(false);\r\n  const [campoRequeridoMes, setcampoRequeridoMes] = useState(false);\r\n  const [year, setyear] = useState(props.dataRecipro?.year??2021);\r\n  const [month, setmonth] = useState(null);\r\n  const [mesSelect, setmesSelect] = useState(undefined);\r\n  const meses = [{ label: t(\"January\"), value: t(\"January\") }\r\n    , { label: t(\"February\"), value: t(\"February\") },\r\n  { label: t(\"March\"), value: t(\"March\") },\r\n  { label: t(\"April\"), value: t(\"April\") },\r\n  { label: t(\"May\"), value: t(\"May\") },\r\n  { label: t(\"June\"), value: t(\"June\") },\r\n  { label: t(\"July\"), value: t(\"July\") },\r\n  { label: t(\"August\"), value: t(\"August\") },\r\n  { label: t(\"September\"), value: t(\"September\") },\r\n  { label: t(\"October\"), value: t(\"October\") },\r\n  { label: t(\"November\"), value: t(\"November\") },\r\n  { label: t(\"December\"), value: t(\"December\") }];\r\n    \r\n  const [mainDebtor, setmainDebtor] = useState(null);\r\n  \r\n  const [coreServices, setcoreServices] = useState(new CoreServices());\r\n  const [backendServices, setbackendServices] = useState(new BackendServices());\r\n  const [sessionHelper, setsessionHelper] = useState(new SessionHelper());\r\n\r\n  const [deposits,setdeposits] = useState(currencyData.format(props?.dataRecipro?.deposits ?? 0))\r\n  const [averageBalance,setaverageBalance] = useState(currencyData.format(props?.dataRecipro?.averageBalance ?? 0))\r\n  const [reciprocity,setreciprocity] = useState(currencyData.format(props?.dataRecipro?.reciprocity ?? 0))  \r\n  const [sow,setsow] = useState(currencyData.format(props?.dataRecipro?.sow ?? 0))\r\n\r\n  React.useEffect(() => {\r\n    var result =sessionHelper.get(opt.VARNAME_LOCATIONDATA);\r\n      if (result !== undefined && result !== null) {\r\n        loadMainDebtor(result.transactionId)\r\n      }\r\n\r\n    // Read Api Service data\r\n    var defaultVal = null;\r\n    setmesSelect(undefined)\r\n    try {\r\n      if (meses.length > 0 && props.dataRecipro.month !== null && mesSelect === undefined) {\r\n        defaultVal = meses.find(x => x.value === props.dataRecipro.month);\r\n        if (defaultVal !== undefined) {\r\n          setmesSelect(defaultVal);\r\n          setmonth(defaultVal.value.toUpperCase())\r\n        }\r\n      }\r\n      else{\r\n        defaultVal = meses[0];\r\n        setmesSelect(defaultVal);\r\n          setmonth(defaultVal.value.toUpperCase());\r\n      }\r\n    }\r\n    catch (err) { }\r\n  }, [props.isOpen]);\r\n\r\n  React.useEffect(() => {\r\n    getReciprocity()\r\n  }, [year,month,mainDebtor]);\r\n\r\n  //cargar deudor principal\r\n  async function loadMainDebtor(transactionId) {\r\n    var result = await backendServices.consultPrincipalDebtor(transactionId)\r\n    if(result!==undefined && result !== null){\r\n      setmainDebtor(result);\r\n    }    \r\n  }\r\n    \r\n  // Submitimos formulario para busqueda de clientes\r\n  function handleSubmit(event, errors, values) {\r\n\r\n    event.preventDefault();\r\n    if (errors.length > 0) {\r\n      return;\r\n    }\r\n    values.year = year!==null?year:props.dataRecipro.year;\r\n    values.month = mesSelect?.value??\"Enero\";\r\n    if (props.tipo == \"guardar\") {\r\n      props.dataManagament(values, props.tipo);\r\n    } else {\r\n      values.reciprocity_id = props.dataRecipro.reciprocity_id;\r\n      props.dataManagament(values, props.tipo);\r\n    }\r\n    // props.onSubmit(values);\r\n  }\r\n\r\n  async function getReciprocity(){\r\n    \r\n    console.log(\"getReciprocity\");\r\n    if(mainDebtor!==null && year!==null && year>1995 && year<=Number(moment().format(\"YYYY\")) && month!==null){\r\n      console.log(\"getReciprocity\",year,month); \r\n        var data = await coreServices.getReciprocity(mainDebtor?.customerNumberT24,year,month.toUpperCase()); \r\n      if(data!==undefined){\r\n        setdeposits(currencyData.format(data.deposits))\r\n        setaverageBalance(currencyData.format(data.averageAmt))\r\n      }\r\n      \r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Modal\r\n      size=\"xl\"\r\n      isOpen={props.isOpen}\r\n      toggle={props.toggle}\r\n      centered={true}>\r\n      <div className=\"modal-header\">\r\n        <h5 className=\"modal-title mt-0\">{t(\"Reciprocity\")}</h5>\r\n        <button\r\n          type=\"button\"\r\n          onClick={props.toggle}\r\n          data-dismiss=\"modal\"\r\n          className=\"close\"\r\n          aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\" style={{ backgroundColor: \"#f3f5f7\" }}>\r\n        <Row>\r\n          <Col xl=\"12\">\r\n            <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmit}>\r\n              <Card>\r\n                <CardBody>\r\n                  <Row>\r\n\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"idYear\">{t(\"Date\")}</Label>\r\n                        <AvField\r\n                            className=\"form-control\"\r\n                            name=\"requestDate\"\r\n                            type=\"month\"\r\n                            id=\"requestDate\"\r\n                            onChange={(e) => { setyear(e.target.value.split(\"-\")[0]);var monthselect = e.target.value.split(\"-\")[1]; monthselect = GetMontNameByNumber(Number(monthselect)); setmonth(monthselect); monthselect = Capitalize(monthselect); console.log(monthselect); setmesSelect(meses.find(x => x.value  === monthselect));}}\r\n                            value={moment(year + \"-\" + (mesSelect!==undefined?GetMontNumberByName(mesSelect.value.toUpperCase()):\"01\")).format(\"YYYY-MM\")}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n\r\n                    {/*\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"idYear\">{t(\"Year\")}</Label>\r\n                        <AvField\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"year\"\r\n                          id=\"year\"\r\n                          onChange={(e) => { setyear(e.target.value);}}\r\n                          value={props.dataRecipro.year}\r\n                          validate={{\r\n                            required: { value: true, errorMessage: t(\"Required Field\") },\r\n                            number: { value: true, errorMessage: t(\"InvalidField\") },\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"idMonth\">{t(\"Month\")}</Label>\r\n                        <Select noOptionsMessage={() => \"\"} \r\n                          onChange={(e) => { setmesSelect(meses.find(x => x.value === e.value)); setmonth(e.value);}}\r\n                          options={meses}\r\n                          id=\"sustainableCustomer\"\r\n                          classNamePrefix=\"select2-selection\"\r\n                          placeholder={t(\"toselect\")}\r\n                          value={mesSelect}\r\n                        // value={props.dataRecipro.mes}\r\n                        />\r\n                        {campoRequeridoMes ?\r\n                          <p className=\"message-error-parrafo\">{t(\"Required Field\")}</p>\r\n                          : null}\r\n                      </div>\r\n                    </Col>\r\n                        */}\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"sales\">{t(\"Sales\")}</Label>\r\n                        <AvField\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"sales\"\r\n                          id=\"sales\"\r\n                          onChange={(e) => { set(e.target.value);}}\r\n                          value={currencyData.format(props?.dataRecipro?.sales ?? 0)}\r\n                          pattern=\"^[0-9,.]*$\"\r\n                          onKeyUp={(e) => { let x = currencyData.getRealValue(e.target.value); e.target.value = currencyData.format(x); }}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"deposits\">{t(\"Deposits\")}</Label>\r\n                        <AvField\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"deposits\"                          \r\n                          onChange={(e) => { setdeposits(e.target.value);}}\r\n                          value={deposits}\r\n                          id=\"deposits\"\r\n                          pattern=\"^[0-9,.]*$\"\r\n                          onKeyUp={(e) => { let x = currencyData.getRealValue(e.target.value); e.target.value = currencyData.format(x); }}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"averagebalance\">{t(\"AverageBalance\")}</Label>\r\n                        <AvField\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"averageBalance\"\r\n                          onChange={(e) => { setaverageBalance(e.target.value);}}\r\n                          value={averageBalance}\r\n                          id=\"averageBalance\"\r\n                          pattern=\"^[0-9,.]*$\"\r\n                          onKeyUp={(e) => { let x = currencyData.getRealValue(e.target.value); e.target.value = currencyData.format(x); }}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"reciprocity\">{t(\"Reciprocity\")}</Label>\r\n                        <AvField\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"reciprocity\"\r\n                          value={reciprocity}\r\n                          id=\"reciprocity\"\r\n                          pattern=\"^[0-9,.]*$\"\r\n                          onKeyUp={(e) => { let x = currencyData.getRealValue(e.target.value); e.target.value = currencyData.format(x); }}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"sow\">{t(\"Sow\")}</Label>\r\n                        <AvField\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"sow\"\r\n                          value={sow}\r\n                          id=\"sow\"\r\n                          pattern=\"^[0-9,.]*$\"\r\n                          onKeyUp={(e) => { let x = currencyData.getRealValue(e.target.value); e.target.value = currencyData.format(x); }}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n                <CardFooter style={{ textAlign: \"right\" }}>\r\n                  <Button id=\"btnNew\" color=\"danger\" type=\"button\" style={{ margin: '5px' }} onClick={props.toggle} data-dismiss=\"modal\">\r\n                    <i className=\"mdi mdi mdi-cancel mid-12px\"></i>{\" \"}{t(\"Cancel\")}\r\n                  </Button>\r\n                  {props.botones ?\r\n                    <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}><i className=\"mdi mdi-content-save mdi-12px\"></i>\r\n                      {\" \"} {props.tipo == \"guardar\" ? t(\"Save\") : t(\"Save\")}\r\n                    </Button> : null}\r\n                </CardFooter>\r\n              </Card>\r\n            </AvForm>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\nModalReciprocidad.propTypes = {\r\n  isOpen: PropTypes.bool,\r\n  toggle: PropTypes.func,\r\n  partyId:PropTypes.string\r\n};\r\n\r\nexport default ModalReciprocidad;\r\n"]},"metadata":{},"sourceType":"module"}