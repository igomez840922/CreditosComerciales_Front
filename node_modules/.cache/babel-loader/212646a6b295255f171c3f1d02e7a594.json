{"ast":null,"code":"import _slicedToArray from\"D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";//i18n\nimport{useTranslation}from\"react-i18next\";import{useLocation,useHistory}from'react-router-dom';import*as OPTs from\"../../../helpers/options_helper\";import*as url from\"../../../helpers/url_helper\";import{Row,Col,Card,CardBody,Button,Label}from\"reactstrap\";import{BackendServices,CoreServices,BpmServices}from\"../../../services\";import{AvForm,AvField}from\"availity-reactstrap-validation\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ClienteBusquedaDescarte=function ClienteBusquedaDescarte(props){var _useTranslation=useTranslation(),t=_useTranslation.t,i18n=_useTranslation.i18n;var _useState=useState(props.clientSelected),_useState2=_slicedToArray(_useState,2),selectClient=_useState2[0],setselectClient=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),identificationTypeList=_useState4[0],setIdentificationTypeList=_useState4[1];var _useState5=useState(undefined),_useState6=_slicedToArray(_useState5,2),identificationTypeSelected=_useState6[0],setIdentificationTypeSelected=_useState6[1];var _useState7=useState(undefined),_useState8=_slicedToArray(_useState7,2),personTypeList=_useState8[0],setPersonTypeList=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),personTypeSelected=_useState10[0],setPersonTypeSelected=_useState10[1];var apiServiceBackend=new BackendServices();//On Mounting (componentDidMount)\nReact.useEffect(function(){if(selectClient!==undefined&&selectClient!==null){}initializeData();},[selectClient]);//Caraga Inicial\nfunction initializeData(){apiServiceBackend.consultarCatalogoTipoIdentificacion().then(function(data){if(data!==null&&data!==undefined){var json=[];for(var i=0;i<data.length;i++){json.push({label:t(data[i][\"description\"]),value:data[i][\"id\"]});}setIdentificationTypeList(json);}}).catch(function(error){});var dataJson=apiServiceBackend.consultarCatalogoTipoPersona();if(dataJson!==null&&dataJson!==undefined){setPersonTypeList(dataJson);}}/*\r\n  // Form Submission\r\n  function handleSubmitFrmSearch(event, errors, values) {\r\n    event.preventDefault();\r\n    if (errors.length > 0) {\r\n      return;\r\n    }\r\n    \r\n    const form = document.getElementById('frmSearch');    \r\n    let dataModel = watchlist.getRequestModel();\r\n    switch (form.identificationType.value) {\r\n      case \"RUC\": {\r\n        dataModel.pTypeId = 'JURIDICA';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        break;\r\n      }\r\n      case \"CED\": {\r\n        dataModel.pTypeId = 'CEDULA';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n        break;\r\n      }      \r\n      default: {\r\n        dataModel.pTypeId = 'PASAPORTE';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n        break;\r\n      }\r\n    }\r\n    \r\n    props.onSubmit(dataModel);\r\n  }\r\n\r\n  //On change Inputs\r\n  function handleChangeInputfrmSearch(e) {\r\n    selectedData[e.target.name] = e.target.value;\r\n    props.updateDataModel(selectedData);    \r\n\r\n    switch(e.target.name){\r\n      case \"identificationType\":{\r\n        setidentificationType(e.target.value);    \r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleGoogleSearch() {\r\n    const form = document.getElementById('frmSearch');\r\n    let query;\r\n    \r\n    switch (form.identificationType.value) {\r\n      case \"RUC\": {\r\n        query = [\r\n          form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n          form.customerDocumentId.value,\r\n          form.firstName.value\r\n        ];\r\n        break;\r\n      }\r\n      default: {\r\n        query = [\r\n          form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n          form.customerDocumentId.value,\r\n          form.firstName.value,\r\n          form.secondName.value!==undefined?form.secondName.value:\"\",\r\n          form.firstLastName.value!==undefined?form.firstLastName.value:\"\",\r\n          form.secondLastName.value!==undefined?form.secondLastName.value:\"\"\r\n        ];\r\n        break;\r\n      }\r\n    }\r\n    props.onGoogleSearch(query);\r\n  }\r\n\r\n  function getSearchForm(){\r\n          //segun tipo de identiicaci√≥n\r\n          switch(identificationType){\r\n            case \"RUC\":{ //RUC\r\n            return(\r\n              <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n              <Row>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                    <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                    { identificationList.map((dt) => (\r\n                      <option value={dt.id}>{props.t(dt.description)}</option>\r\n                    )) }\r\n                    </select>\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"customerDocumentId\"\r\n                      type=\"text\" onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                \r\n                <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstName\">{props.t(\"Name\")}</Label>\r\n                  <AvField\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n    \r\n                </Row>\r\n    \r\n              <Row>\r\n                <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                  <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                  <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                  </Button>\r\n                  <Button id=\"btnGoogle\" color=\"warning\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                  <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                  </Button>                                    \r\n                </Col>\r\n              </Row>\r\n            </AvForm>         \r\n            )\r\n            }\r\n            default:{ //Cedula o Pasaporte \r\n                return(\r\n\r\n                  <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n              <Row>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                    <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                    { identificationList.map((dt) => (\r\n                      <option value={dt.id}>{props.t(dt.description)}</option>\r\n                    )) }\r\n                    </select>\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"customerDocumentId\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                \r\n                <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstName\">{props.t(\"First Name\")}</Label>\r\n                  <AvField\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"secondName\">{props.t(\"SecondName\")}</Label>\r\n                  <AvField\r\n                    name=\"secondName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\" value={selectedData!== undefined?selectedData.secondName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstLastName\">{props.t(\"FirstLastName\")}</Label>\r\n                  <AvField\r\n                    name=\"firstLastName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\" \r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstLastName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"secondLastName\">{props.t(\"SecondLastName\")}</Label>\r\n                  <AvField\r\n                    name=\"secondLastName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\"  value={selectedData!== undefined?selectedData.secondLastName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n                </Row>\r\n    \r\n              <Row>\r\n                <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                  <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                  <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                  </Button>\r\n                  <Button id=\"btnGoogle\" color=\"success\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                  <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                  </Button>   \r\n                </Col>\r\n              </Row>\r\n            </AvForm>         \r\n\r\n                )\r\n            }\r\n        }\r\n  }\r\n  */return/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{lg:\"12\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"card-title\",children:props.t(\"Surveillance List\")}),/*#__PURE__*/_jsx(\"p\",{className:\"card-title-desc  border-bottom\",children:props.t(\"Search and Discard your Customers\")})]})});};export default ClienteBusquedaDescarte;","map":{"version":3,"sources":["D:/_PROJECTS/_SOAINT/JBPM/App/banescocreditoscomerciales/src/pages/CommercialCredit/1_Presolicitud/ClienteBusquedaDescarte.js"],"names":["React","useState","useTranslation","useLocation","useHistory","OPTs","url","Row","Col","Card","CardBody","Button","Label","BackendServices","CoreServices","BpmServices","AvForm","AvField","ClienteBusquedaDescarte","props","t","i18n","clientSelected","selectClient","setselectClient","identificationTypeList","setIdentificationTypeList","undefined","identificationTypeSelected","setIdentificationTypeSelected","personTypeList","setPersonTypeList","personTypeSelected","setPersonTypeSelected","apiServiceBackend","useEffect","initializeData","consultarCatalogoTipoIdentificacion","then","data","json","i","length","push","label","value","catch","error","dataJson","consultarCatalogoTipoPersona"],"mappings":"+KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA;AACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,WAAT,CAAqBC,UAArB,KAAuC,kBAAvC,CACA,MAAO,GAAKC,CAAAA,IAAZ,KAAsB,iCAAtB,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,6BAArB,CAEA,OACEC,GADF,CAEEC,GAFF,CAGEC,IAHF,CAIEC,QAJF,CAKEC,MALF,CAMEC,KANF,KAOO,YAPP,CASA,OAAQC,eAAR,CAAwBC,YAAxB,CAAqCC,WAArC,KAAwD,mBAAxD,CACA,OAASC,MAAT,CAAiBC,OAAjB,KAAgC,gCAAhC,C,wFAEA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,KAAK,CAAI,CAErC,oBAAoBjB,cAAc,EAAlC,CAAQkB,CAAR,iBAAQA,CAAR,CAAWC,IAAX,iBAAWA,IAAX,CAEA,cAAwCpB,QAAQ,CAACkB,KAAK,CAACG,cAAP,CAAhD,wCAAOC,YAAP,eAAqBC,eAArB,eAEA,eAA4DvB,QAAQ,CAAC,EAAD,CAApE,yCAAOwB,sBAAP,eAA+BC,yBAA/B,eACA,eAAoEzB,QAAQ,CAAC0B,SAAD,CAA5E,yCAAOC,0BAAP,eAAmCC,6BAAnC,eAEA,eAA4C5B,QAAQ,CAAC0B,SAAD,CAApD,yCAAOG,cAAP,eAAuBC,iBAAvB,eACA,eAAoD9B,QAAQ,CAAC,EAAD,CAA5D,0CAAO+B,kBAAP,gBAA2BC,qBAA3B,gBAEA,GAAMC,CAAAA,iBAAiB,CAAG,GAAIrB,CAAAA,eAAJ,EAA1B,CAEF;AACAb,KAAK,CAACmC,SAAN,CAAgB,UAAM,CACpB,GAAGZ,YAAY,GAAGI,SAAf,EAA4BJ,YAAY,GAAG,IAA9C,CAAmD,CAElD,CACDa,cAAc,GACf,CALD,CAKG,CAACb,YAAD,CALH,EAOA;AACA,QAASa,CAAAA,cAAT,EAA0B,CAExBF,iBAAiB,CAACG,mCAAlB,GACKC,IADL,CACU,SAACC,IAAD,CAAU,CACZ,GAAIA,IAAI,GAAK,IAAT,EAAiBA,IAAI,GAAKZ,SAA9B,CAAyC,CACrC,GAAIa,CAAAA,IAAI,CAAG,EAAX,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,IAAI,CAACG,MAAzB,CAAiCD,CAAC,EAAlC,CAAsC,CACpCD,IAAI,CAACG,IAAL,CAAU,CAAEC,KAAK,CAAExB,CAAC,CAACmB,IAAI,CAACE,CAAD,CAAJ,CAAQ,aAAR,CAAD,CAAV,CAAoCI,KAAK,CAAEN,IAAI,CAACE,CAAD,CAAJ,CAAQ,IAAR,CAA3C,CAAV,EACD,CACDf,yBAAyB,CAACc,IAAD,CAAzB,CACH,CACN,CATH,EASKM,KATL,CASW,SAACC,KAAD,CAAW,CAAG,CATzB,EAWA,GAAIC,CAAAA,QAAQ,CAAGd,iBAAiB,CAACe,4BAAlB,EAAf,CACA,GAAID,QAAQ,GAAK,IAAb,EAAqBA,QAAQ,GAAKrB,SAAtC,CAAiD,CAC7CI,iBAAiB,CAACiB,QAAD,CAAjmBAEI,KAAC,GAAD,wBACI,MAAC,GAAD,EAAK,EAAE,CAAC,IAAR,wBACA,WAAI,SAAS,CAAC,YAAd,UAA4B7B,KAAK,CAACC,CAAN,CAAQ,mBAAR,CAA5B,EADA,cAEF,UAAG,SAAS,CAAC,gCAAb,UACGD,KAAK,CAACC,CAAN,CAAQ,mCAAR,CADH,EAFE,GADJ,EAFJ,CAiBD,CAjSD,CA0SA,cAAeF,CAAAA,uBAAf","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from 'prop-types';\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLocation,useHistory } from 'react-router-dom'\r\nimport * as OPTs from \"../../../helpers/options_helper\"\r\nimport * as url from \"../../../helpers/url_helper\"\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Label,\r\n} from \"reactstrap\"\r\n\r\nimport {BackendServices,CoreServices,BpmServices,} from \"../../../services\";\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\"\r\n\r\nconst ClienteBusquedaDescarte = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n  \r\n    const [selectClient, setselectClient] = useState(props.clientSelected);\r\n\r\n    const [identificationTypeList, setIdentificationTypeList] = useState([]);\r\n    const [identificationTypeSelected, setIdentificationTypeSelected] = useState(undefined);\r\n\r\n    const [personTypeList, setPersonTypeList] = useState(undefined);\r\n    const [personTypeSelected, setPersonTypeSelected] = useState([]);\r\n      \r\n    const apiServiceBackend = new BackendServices();\r\n\r\n  //On Mounting (componentDidMount)\r\n  React.useEffect(() => {\r\n    if(selectClient!==undefined && selectClient!==null){\r\n        \r\n    }\r\n    initializeData();\r\n  }, [selectClient]);\r\n\r\n  //Caraga Inicial\r\n  function initializeData() {\r\n\r\n    apiServiceBackend.consultarCatalogoTipoIdentificacion()\r\n        .then((data) => {\r\n            if (data !== null && data !== undefined) {\r\n                let json = [];\r\n                for (let i = 0; i < data.length; i++) {\r\n                  json.push({ label: t(data[i][\"description\"]), value: data[i][\"id\"] })\r\n                }\r\n                setIdentificationTypeList(json)\r\n            }          \r\n      }).catch((error) => { });\r\n    \r\n    var dataJson = apiServiceBackend.consultarCatalogoTipoPersona();\r\n    if (dataJson !== null && dataJson !== undefined) {\r\n        setPersonTypeList(dataJson)\r\n    }\r\n    \r\n  }\r\n/*\r\n  // Form Submission\r\n  function handleSubmitFrmSearch(event, errors, values) {\r\n    event.preventDefault();\r\n    if (errors.length > 0) {\r\n      return;\r\n    }\r\n    \r\n    const form = document.getElementById('frmSearch');    \r\n    let dataModel = watchlist.getRequestModel();\r\n    switch (form.identificationType.value) {\r\n      case \"RUC\": {\r\n        dataModel.pTypeId = 'JURIDICA';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        break;\r\n      }\r\n      case \"CED\": {\r\n        dataModel.pTypeId = 'CEDULA';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n        break;\r\n      }      \r\n      default: {\r\n        dataModel.pTypeId = 'PASAPORTE';\r\n        dataModel.pCustomerId = form.customerDocumentId.value;\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"NOMBRE\",_x003C_Value_x003E_k__BackingField:form.firstName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_NOMBRE\",_x003C_Value_x003E_k__BackingField:form.secondName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"PRIMER_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.firstLastName.value});\r\n        dataModel.pCustomerListParams.KeyValueParam.push({_x003C_Key_x003E_k__BackingField:\"SEGUNDO_APELLIDO\",_x003C_Value_x003E_k__BackingField:form.secondLastName.value});\r\n        break;\r\n      }\r\n    }\r\n    \r\n    props.onSubmit(dataModel);\r\n  }\r\n\r\n  //On change Inputs\r\n  function handleChangeInputfrmSearch(e) {\r\n    selectedData[e.target.name] = e.target.value;\r\n    props.updateDataModel(selectedData);    \r\n\r\n    switch(e.target.name){\r\n      case \"identificationType\":{\r\n        setidentificationType(e.target.value);    \r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleGoogleSearch() {\r\n    const form = document.getElementById('frmSearch');\r\n    let query;\r\n    \r\n    switch (form.identificationType.value) {\r\n      case \"RUC\": {\r\n        query = [\r\n          form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n          form.customerDocumentId.value,\r\n          form.firstName.value\r\n        ];\r\n        break;\r\n      }\r\n      default: {\r\n        query = [\r\n          form.identificationType.options[form.identificationType.options.selectedIndex].innerText,\r\n          form.customerDocumentId.value,\r\n          form.firstName.value,\r\n          form.secondName.value!==undefined?form.secondName.value:\"\",\r\n          form.firstLastName.value!==undefined?form.firstLastName.value:\"\",\r\n          form.secondLastName.value!==undefined?form.secondLastName.value:\"\"\r\n        ];\r\n        break;\r\n      }\r\n    }\r\n    props.onGoogleSearch(query);\r\n  }\r\n\r\n  function getSearchForm(){\r\n          //segun tipo de identiicaci√≥n\r\n          switch(identificationType){\r\n            case \"RUC\":{ //RUC\r\n            return(\r\n              <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n              <Row>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                    <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                    { identificationList.map((dt) => (\r\n                      <option value={dt.id}>{props.t(dt.description)}</option>\r\n                    )) }\r\n                    </select>\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"customerDocumentId\"\r\n                      type=\"text\" onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                \r\n                <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstName\">{props.t(\"Name\")}</Label>\r\n                  <AvField\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n    \r\n                </Row>\r\n    \r\n              <Row>\r\n                <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                  <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                  <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                  </Button>\r\n                  <Button id=\"btnGoogle\" color=\"warning\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                  <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                  </Button>                                    \r\n                </Col>\r\n              </Row>\r\n            </AvForm>         \r\n            )\r\n            }\r\n            default:{ //Cedula o Pasaporte \r\n                return(\r\n\r\n                  <AvForm id=\"frmSearch\" className=\"needs-validation\" onSubmit={handleSubmitFrmSearch}>\r\n              <Row>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"identificationType\">{props.t(\"ID Type\")}</Label>\r\n                    <select name=\"identificationType\" className=\"form-control\" value={identificationType} onChange={handleChangeInputfrmSearch}>\r\n                    { identificationList.map((dt) => (\r\n                      <option value={dt.id}>{props.t(dt.description)}</option>\r\n                    )) }\r\n                    </select>\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"3\">\r\n                  <div className=\"mb-3\">\r\n                    <Label htmlFor=\"customerDocumentId\">{props.t(\"ID Number\")}</Label>\r\n                    <AvField\r\n                      className=\"form-control\"\r\n                      name=\"customerDocumentId\"\r\n                      type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                      errorMessage={props.t(\"Required Field\")}\r\n                      validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.customerDocumentId:0}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                \r\n                <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstName\">{props.t(\"First Name\")}</Label>\r\n                  <AvField\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"secondName\">{props.t(\"SecondName\")}</Label>\r\n                  <AvField\r\n                    name=\"secondName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\" value={selectedData!== undefined?selectedData.secondName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"firstLastName\">{props.t(\"FirstLastName\")}</Label>\r\n                  <AvField\r\n                    name=\"firstLastName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\" \r\n                    errorMessage={props.t(\"Required Field\")}\r\n                    validate={{ required: { value: true } }} value={selectedData!== undefined?selectedData.firstLastName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"secondLastName\">{props.t(\"SecondLastName\")}</Label>\r\n                  <AvField\r\n                    name=\"secondLastName\"\r\n                    type=\"text\"  onChange={handleChangeInputfrmSearch}\r\n                    className=\"form-control\"  value={selectedData!== undefined?selectedData.secondLastName:\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n                </Row>\r\n    \r\n              <Row>\r\n                <Col lg=\"12\" style={{ textAlign: \"right\" }}>\r\n                  <Button id=\"btnSearch\" color=\"success\" type=\"submit\" style={{ margin: '5px' }}>\r\n                  <i className=\"mdi mdi-file-find mdi-12px\"></i> {props.t(\"Search\")}\r\n                  </Button>\r\n                  <Button id=\"btnGoogle\" color=\"success\" style={{ margin: '5px' }} onClick={() => { handleGoogleSearch() }}>\r\n                  <i className=\"mdi mdi-google mdi-12px\"></i> {props.t(\"Google\")}\r\n                  </Button>   \r\n                </Col>\r\n              </Row>\r\n            </AvForm>         \r\n\r\n                )\r\n            }\r\n        }\r\n  }\r\n  */\r\n  return (\r\n   \r\n      <Row>\r\n          <Col lg=\"12\">\r\n          <h4 className=\"card-title\">{props.t(\"Surveillance List\")}</h4>\r\n        <p className=\"card-title-desc  border-bottom\">\r\n          {props.t(\"Search and Discard your Customers\")}\r\n        </p>\r\n        \r\n\r\n        {/*getSearchForm()*/}\r\n\r\n\r\n          </Col>\r\n      </Row>\r\n       );\r\n\r\n};\r\n\r\nClienteBusquedaDescarte.propTypes = {\r\n  onSaveClient: PropTypes.func, //salvar Cliente\r\n  onSaveClientToCompliance: PropTypes.func,//salvar Cliente a Cumplimiento\r\n  onCancel: PropTypes.func, //cancelamos\r\n  clientSelected:PropTypes.any\r\n}\r\n\r\nexport default ClienteBusquedaDescarte;\r\n"]},"metadata":{},"sourceType":"module"}